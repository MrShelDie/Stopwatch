

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Jun 18 15:02:52 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F628A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  008C                     	;# 
    87  008E                     	;# 
    88  0092                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009F                     	;# 
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  000E                     	;# 
   108  000F                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001F                     	;# 
   120  0081                     	;# 
   121  0085                     	;# 
   122  0086                     	;# 
   123  008C                     	;# 
   124  008E                     	;# 
   125  0092                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009F                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  008C                     	;# 
   161  008E                     	;# 
   162  0092                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009F                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  008C                     	;# 
   198  008E                     	;# 
   199  0092                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009F                     	;# 
   207  0006                     _PORTB	set	6
   208  0005                     _PORTAbits	set	5
   209  001F                     _CMCON	set	31
   210  000B                     _INTCONbits	set	11
   211  0081                     _OPTION_REG	set	129
   212  0081                     _OPTION_REGbits	set	129
   213  0086                     _TRISB	set	134
   214  0085                     _TRISA	set	133
   215                           
   216                           	psect	cinit
   217  07F5                     start_initialization:	
   218                           ; #config settings
   219                           
   220  07F5                     __initialization:
   221                           
   222                           ; Clear objects allocated to BANK0
   223  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   224  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   225  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   226  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   227  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   228  07FA  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   229  07FB  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   230  07FC  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   231  07FD  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   232  07FE                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235  07FE                     __end_of__initialization:
   236  07FE  0183               	clrf	3
   237  07FF  2DD9               	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	bssBANK0
   240  0020                     __pbssBANK0:
   241  0020                     _formatted_time:
   242  0020                     	ds	3
   243  0023                     _time_ms:
   244  0023                     	ds	2
   245  0025                     _is_timer_work:
   246  0025                     	ds	1
   247  0026                     _Button:
   248  0026                     	ds	1
   249                           
   250                           	psect	cstackCOMMON
   251  0070                     __pcstackCOMMON:
   252  0070                     ?_reset_stopwatch:
   253  0070                     ??_reset_stopwatch:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_update_disp:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_handle_btn_pressing:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ??_handle_btn_pressing:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_get_btn_pressed:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_update_time_counter:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ??_update_time_counter:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_stop_stopwatch:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ??_stop_stopwatch:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_start_stopwatch:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ??_start_stopwatch:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_configure:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ??_configure:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_main:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_is_btn_bounce:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ??_is_btn_bounce:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_set_disp_digit_value:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ??_set_disp_digit_value:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_format_time:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?___lwdiv:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     is_btn_bounce@btn:	
   314                           ; 2 bytes @ 0x0
   315                           
   316  0070                     ___lwdiv@divisor:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 2 bytes @ 0x0
   321  0070                     	ds	1
   322  0071                     is_btn_bounce@i:
   323                           
   324                           ; 2 bytes @ 0x1
   325  0071                     	ds	1
   326  0072                     handle_btn_pressing@btn:
   327  0072                     set_disp_digit_value@value:	
   328                           ; 1 bytes @ 0x2
   329                           
   330  0072                     ___lwdiv@dividend:	
   331                           ; 1 bytes @ 0x2
   332                           
   333                           
   334                           ; 2 bytes @ 0x2
   335  0072                     	ds	1
   336  0073                     ??_get_btn_pressed:
   337                           
   338                           ; 1 bytes @ 0x3
   339  0073                     	ds	1
   340  0074                     ??___lwdiv:
   341  0074                     get_btn_pressed@btn:	
   342                           ; 1 bytes @ 0x4
   343                           
   344                           
   345                           ; 1 bytes @ 0x4
   346  0074                     	ds	1
   347  0075                     ___lwdiv@quotient:
   348                           
   349                           ; 2 bytes @ 0x5
   350  0075                     	ds	2
   351  0077                     ___lwdiv@counter:
   352                           
   353                           ; 1 bytes @ 0x7
   354  0077                     	ds	1
   355  0078                     ?___lwmod:
   356  0078                     ___lwmod@divisor:	
   357                           ; 2 bytes @ 0x8
   358                           
   359                           
   360                           ; 2 bytes @ 0x8
   361  0078                     	ds	2
   362  007A                     ___lwmod@dividend:
   363                           
   364                           ; 2 bytes @ 0xA
   365  007A                     	ds	2
   366  007C                     ??___lwmod:
   367                           
   368                           ; 1 bytes @ 0xC
   369  007C                     	ds	1
   370  007D                     ___lwmod@counter:
   371                           
   372                           ; 1 bytes @ 0xD
   373  007D                     	ds	1
   374  007E                     ??_main:
   375                           
   376                           	psect	cstackBANK0
   377  0027                     __pcstackBANK0:	
   378                           ; 1 bytes @ 0xE
   379                           
   380  0027                     ??_format_time:
   381                           
   382                           ; 1 bytes @ 0x0
   383  0027                     	ds	1
   384  0028                     format_time@cashed_time:
   385                           
   386                           ; 2 bytes @ 0x1
   387  0028                     	ds	2
   388  002A                     ??_update_disp:
   389                           
   390                           ; 1 bytes @ 0x3
   391  002A                     	ds	1
   392                           
   393                           	psect	maintext
   394  05D9                     __pmaintext:	
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 32 in file "main.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   414 ;;      Params:         0       0       0       0
   415 ;;      Locals:         0       0       0       0
   416 ;;      Temps:          0       0       0       0
   417 ;;      Totals:         0       0       0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels required when called: 3
   420 ;; This function calls:
   421 ;;		_configure
   422 ;;		_get_btn_pressed
   423 ;;		_handle_btn_pressing
   424 ;;		_reset_stopwatch
   425 ;;		_update_disp
   426 ;;		_update_time_counter
   427 ;; This function is called by:
   428 ;;		Startup code after reset
   429 ;; This function uses a non-reentrant model
   430 ;;
   431                           
   432                           
   433                           ;psect for function _main
   434  05D9                     _main:
   435  05D9                     l1072:	
   436                           ;incstack = 0
   437                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   438                           
   439  05D9  25E1               	fcall	_configure
   440  05DA  25D3               	fcall	_reset_stopwatch
   441  05DB                     l1074:
   442  05DB  2653               	fcall	_update_disp
   443  05DC                     l1076:
   444  05DC  26C4               	fcall	_get_btn_pressed
   445  05DD  25F2               	fcall	_handle_btn_pressing
   446  05DE                     l1078:
   447  05DE  260E               	fcall	_update_time_counter
   448  05DF  2DDB               	goto	l1074
   449  05E0  2800               	ljmp	start
   450  05E1                     __end_of_main:
   451                           
   452                           	psect	text1
   453  060E                     __ptext1:	
   454 ;; *************** function _update_time_counter *****************
   455 ;; Defined at:
   456 ;;		line 111 in file "stopwatch.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;		None
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      void 
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0
   465 ;; Tracked objects:
   466 ;;		On entry : 0/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   470 ;;      Params:         0       0       0       0
   471 ;;      Locals:         0       0       0       0
   472 ;;      Temps:          0       0       0       0
   473 ;;      Totals:         0       0       0       0
   474 ;;Total ram usage:        0 bytes
   475 ;; Hardware stack levels used: 1
   476 ;; This function calls:
   477 ;;		Nothing
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function _update_time_counter
   485  060E                     _update_time_counter:
   486  060E                     l1066:	
   487                           ;incstack = 0
   488                           ; Regs used in _update_time_counter: [wreg+status,2+status,0]
   489                           
   490                           
   491                           ;stopwatch.c: 113:     if (is_timer_work)
   492  060E  1283               	bcf	3,5	;RP0=0, select bank0
   493  060F  1303               	bcf	3,6	;RP1=0, select bank0
   494  0610  0825               	movf	_is_timer_work,w
   495  0611  1903               	btfsc	3,2
   496  0612  2E14               	goto	u391
   497  0613  2E15               	goto	u390
   498  0614                     u391:
   499  0614  2E2A               	goto	l118
   500  0615                     u390:
   501  0615                     l1068:
   502                           
   503                           ;stopwatch.c: 114:     {;stopwatch.c: 115:         if (time_ms > 60000)
   504  0615  30EA               	movlw	234
   505  0616  0224               	subwf	_time_ms+1,w
   506  0617  3061               	movlw	97
   507  0618  1903               	skipnz
   508  0619  0223               	subwf	_time_ms,w
   509  061A  1C03               	skipc
   510  061B  2E1D               	goto	u401
   511  061C  2E1E               	goto	u400
   512  061D                     u401:
   513  061D  2E24               	goto	l117
   514  061E                     u400:
   515  061E                     l1070:
   516                           
   517                           ;stopwatch.c: 116:             time_ms -= 60000;
   518  061E  3060               	movlw	96
   519  061F  02A3               	subwf	_time_ms,f
   520  0620  30EA               	movlw	234
   521  0621  1C03               	skipc
   522  0622  03A4               	decf	_time_ms+1,f
   523  0623  02A4               	subwf	_time_ms+1,f
   524  0624                     l117:
   525                           
   526                           ;stopwatch.c: 117:         time_ms += 1;
   527  0624  3001               	movlw	1
   528  0625  07A3               	addwf	_time_ms,f
   529  0626  1803               	skipnc
   530  0627  0AA4               	incf	_time_ms+1,f
   531  0628  3000               	movlw	0
   532  0629  07A4               	addwf	_time_ms+1,f
   533  062A                     l118:
   534  062A  0008               	return
   535  062B                     __end_of_update_time_counter:
   536                           
   537                           	psect	text2
   538  0653                     __ptext2:	
   539 ;; *************** function _update_disp *****************
   540 ;; Defined at:
   541 ;;		line 90 in file "stopwatch.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   555 ;;      Params:         0       0       0       0
   556 ;;      Locals:         0       0       0       0
   557 ;;      Temps:          0       1       0       0
   558 ;;      Totals:         0       1       0       0
   559 ;;Total ram usage:        1 bytes
   560 ;; Hardware stack levels used: 1
   561 ;; Hardware stack levels required when called: 2
   562 ;; This function calls:
   563 ;;		_format_time
   564 ;;		_set_disp_digit_value
   565 ;; This function is called by:
   566 ;;		_main
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570                           
   571                           ;psect for function _update_disp
   572  0653                     _update_disp:
   573  0653                     l1024:	
   574                           ;incstack = 0
   575                           ; Regs used in _update_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   576                           
   577                           
   578                           ;stopwatch.c: 92:     format_time();
   579  0653  2747               	fcall	_format_time
   580  0654                     l1026:
   581                           
   582                           ;stopwatch.c: 94:     set_disp_digit_value(formatted_time.ms);
   583  0654  1283               	bcf	3,5	;RP0=0, select bank0
   584  0655  1303               	bcf	3,6	;RP1=0, select bank0
   585  0656  0820               	movf	_formatted_time,w
   586  0657  2798               	fcall	_set_disp_digit_value
   587  0658                     l1028:
   588                           
   589                           ;stopwatch.c: 95:     PORTAbits.RA0 = 1;
   590  0658  1283               	bcf	3,5	;RP0=0, select bank0
   591  0659  1303               	bcf	3,6	;RP1=0, select bank0
   592  065A  1405               	bsf	5,0	;volatile
   593  065B                     l1030:
   594                           
   595                           ;stopwatch.c: 96:     _delay((unsigned long)((1)*(4000000/4000.0)));
   596  065B  30C7               	movlw	199
   597  065C  1283               	bcf	3,5	;RP0=0, select bank0
   598  065D  1303               	bcf	3,6	;RP1=0, select bank0
   599  065E  00AA               	movwf	??_update_disp
   600  065F                     u417:
   601  065F  2E60               	nop2
   602  0660  0BAA               	decfsz	??_update_disp,f
   603  0661  2E5F               	goto	u417
   604  0662  2E63               	nop2
   605  0663  0000               	nop
   606  0664                     l1032:
   607                           
   608                           ;stopwatch.c: 97:     PORTAbits.RA0 = 0;
   609  0664  1283               	bcf	3,5	;RP0=0, select bank0
   610  0665  1303               	bcf	3,6	;RP1=0, select bank0
   611  0666  1005               	bcf	5,0	;volatile
   612  0667                     l1034:
   613                           
   614                           ;stopwatch.c: 99:     set_disp_digit_value(formatted_time.sec_1_digit);
   615  0667  0821               	movf	_formatted_time+1,w
   616  0668  2798               	fcall	_set_disp_digit_value
   617  0669                     l1036:
   618                           
   619                           ;stopwatch.c: 100:     PORTAbits.RA1 = 1;
   620  0669  1283               	bcf	3,5	;RP0=0, select bank0
   621  066A  1303               	bcf	3,6	;RP1=0, select bank0
   622  066B  1485               	bsf	5,1	;volatile
   623  066C                     l1038:
   624                           
   625                           ;stopwatch.c: 101:     _delay((unsigned long)((1)*(4000000/4000.0)));
   626  066C  30C7               	movlw	199
   627  066D  1283               	bcf	3,5	;RP0=0, select bank0
   628  066E  1303               	bcf	3,6	;RP1=0, select bank0
   629  066F  00AA               	movwf	??_update_disp
   630  0670                     u427:
   631  0670  2E71               	nop2
   632  0671  0BAA               	decfsz	??_update_disp,f
   633  0672  2E70               	goto	u427
   634  0673  2E74               	nop2
   635  0674  0000               	nop
   636  0675                     l1040:
   637                           
   638                           ;stopwatch.c: 102:     PORTAbits.RA1 = 0;
   639  0675  1283               	bcf	3,5	;RP0=0, select bank0
   640  0676  1303               	bcf	3,6	;RP1=0, select bank0
   641  0677  1085               	bcf	5,1	;volatile
   642  0678                     l1042:
   643                           
   644                           ;stopwatch.c: 104:     set_disp_digit_value(formatted_time.sec_2_digit);
   645  0678  0822               	movf	_formatted_time+2,w
   646  0679  2798               	fcall	_set_disp_digit_value
   647  067A                     l1044:
   648                           
   649                           ;stopwatch.c: 105:     PORTAbits.RA2 = 1;
   650  067A  1283               	bcf	3,5	;RP0=0, select bank0
   651  067B  1303               	bcf	3,6	;RP1=0, select bank0
   652  067C  1505               	bsf	5,2	;volatile
   653  067D                     l1046:
   654                           
   655                           ;stopwatch.c: 106:     _delay((unsigned long)((1)*(4000000/4000.0)));
   656  067D  30C7               	movlw	199
   657  067E  1283               	bcf	3,5	;RP0=0, select bank0
   658  067F  1303               	bcf	3,6	;RP1=0, select bank0
   659  0680  00AA               	movwf	??_update_disp
   660  0681                     u437:
   661  0681  2E82               	nop2
   662  0682  0BAA               	decfsz	??_update_disp,f
   663  0683  2E81               	goto	u437
   664  0684  2E85               	nop2
   665  0685  0000               	nop
   666  0686                     l1048:
   667                           
   668                           ;stopwatch.c: 107:     PORTAbits.RA2 = 0;
   669  0686  1283               	bcf	3,5	;RP0=0, select bank0
   670  0687  1303               	bcf	3,6	;RP1=0, select bank0
   671  0688  1105               	bcf	5,2	;volatile
   672  0689                     l113:
   673  0689  0008               	return
   674  068A                     __end_of_update_disp:
   675                           
   676                           	psect	text3
   677  0798                     __ptext3:	
   678 ;; *************** function _set_disp_digit_value *****************
   679 ;; Defined at:
   680 ;;		line 22 in file "stopwatch.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;  value           1    wreg     unsigned char 
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  value           1    2[COMMON] unsigned char 
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   694 ;;      Params:         0       0       0       0
   695 ;;      Locals:         1       0       0       0
   696 ;;      Temps:          2       0       0       0
   697 ;;      Totals:         3       0       0       0
   698 ;;Total ram usage:        3 bytes
   699 ;; Hardware stack levels used: 1
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		_update_disp
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           
   708                           ;psect for function _set_disp_digit_value
   709  0798                     _set_disp_digit_value:
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _set_disp_digit_value: [wreg-fsr0h+status,2+status,0]
   713                           ;set_disp_digit_value@value stored from wreg
   714  0798  00F2               	movwf	set_disp_digit_value@value
   715  0799                     l992:
   716                           
   717                           ;stopwatch.c: 22: void set_disp_digit_value(char value);stopwatch.c: 23: {;stopwatch.c: 
      +                          24:     switch(value)
   718  0799  2FCC               	goto	l1016
   719  079A                     l994:
   720                           
   721                           ;stopwatch.c: 27:             PORTB = 0xC0;
   722  079A  30C0               	movlw	192
   723  079B  1283               	bcf	3,5	;RP0=0, select bank0
   724  079C  1303               	bcf	3,6	;RP1=0, select bank0
   725  079D  0086               	movwf	6	;volatile
   726                           
   727                           ;stopwatch.c: 28:             break;
   728  079E  2FF4               	goto	l98
   729  079F                     l996:
   730                           
   731                           ;stopwatch.c: 30:             PORTB = 0xF9;
   732  079F  30F9               	movlw	249
   733  07A0  1283               	bcf	3,5	;RP0=0, select bank0
   734  07A1  1303               	bcf	3,6	;RP1=0, select bank0
   735  07A2  0086               	movwf	6	;volatile
   736                           
   737                           ;stopwatch.c: 31:             break;
   738  07A3  2FF4               	goto	l98
   739  07A4                     l998:
   740                           
   741                           ;stopwatch.c: 33:             PORTB = 0xA4;
   742  07A4  30A4               	movlw	164
   743  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   744  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   745  07A7  0086               	movwf	6	;volatile
   746                           
   747                           ;stopwatch.c: 34:             break;
   748  07A8  2FF4               	goto	l98
   749  07A9                     l1000:
   750                           
   751                           ;stopwatch.c: 36:             PORTB = 0xB0;
   752  07A9  30B0               	movlw	176
   753  07AA  1283               	bcf	3,5	;RP0=0, select bank0
   754  07AB  1303               	bcf	3,6	;RP1=0, select bank0
   755  07AC  0086               	movwf	6	;volatile
   756                           
   757                           ;stopwatch.c: 37:             break;
   758  07AD  2FF4               	goto	l98
   759  07AE                     l1002:
   760                           
   761                           ;stopwatch.c: 39:             PORTB = 0x99;
   762  07AE  3099               	movlw	153
   763  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   764  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   765  07B1  0086               	movwf	6	;volatile
   766                           
   767                           ;stopwatch.c: 40:             break;
   768  07B2  2FF4               	goto	l98
   769  07B3                     l1004:
   770                           
   771                           ;stopwatch.c: 42:             PORTB = 0x92;
   772  07B3  3092               	movlw	146
   773  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   774  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   775  07B6  0086               	movwf	6	;volatile
   776                           
   777                           ;stopwatch.c: 43:             break;
   778  07B7  2FF4               	goto	l98
   779  07B8                     l1006:
   780                           
   781                           ;stopwatch.c: 45:             PORTB = 0x82;
   782  07B8  3082               	movlw	130
   783  07B9  1283               	bcf	3,5	;RP0=0, select bank0
   784  07BA  1303               	bcf	3,6	;RP1=0, select bank0
   785  07BB  0086               	movwf	6	;volatile
   786                           
   787                           ;stopwatch.c: 46:             break;
   788  07BC  2FF4               	goto	l98
   789  07BD                     l1008:
   790                           
   791                           ;stopwatch.c: 48:             PORTB = 0xF8;
   792  07BD  30F8               	movlw	248
   793  07BE  1283               	bcf	3,5	;RP0=0, select bank0
   794  07BF  1303               	bcf	3,6	;RP1=0, select bank0
   795  07C0  0086               	movwf	6	;volatile
   796                           
   797                           ;stopwatch.c: 49:             break;
   798  07C1  2FF4               	goto	l98
   799  07C2                     l1010:
   800                           
   801                           ;stopwatch.c: 51:             PORTB = 0x80;
   802  07C2  3080               	movlw	128
   803  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   804  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   805  07C5  0086               	movwf	6	;volatile
   806                           
   807                           ;stopwatch.c: 52:             break;
   808  07C6  2FF4               	goto	l98
   809  07C7                     l1012:
   810                           
   811                           ;stopwatch.c: 54:             PORTB = 0x90;
   812  07C7  3090               	movlw	144
   813  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   814  07C9  1303               	bcf	3,6	;RP1=0, select bank0
   815  07CA  0086               	movwf	6	;volatile
   816                           
   817                           ;stopwatch.c: 55:             break;
   818  07CB  2FF4               	goto	l98
   819  07CC                     l1016:
   820  07CC  0872               	movf	set_disp_digit_value@value,w
   821  07CD  00F0               	movwf	??_set_disp_digit_value
   822  07CE  01F1               	clrf	??_set_disp_digit_value+1
   823                           
   824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   825                           ; Switch size 1, requested type "simple"
   826                           ; Number of cases is 1, Range of values is 0 to 0
   827                           ; switch strategies available:
   828                           ; Name         Instructions Cycles
   829                           ; simple_byte            4     3 (average)
   830                           ; direct_byte            7     6 (fixed)
   831                           ; jumptable            260     6 (fixed)
   832                           ;	Chosen strategy is simple_byte
   833  07CF  0871               	movf	??_set_disp_digit_value+1,w
   834  07D0  3A00               	xorlw	0	; case 0
   835  07D1  1903               	skipnz
   836  07D2  2FD4               	goto	l1120
   837  07D3  2FF4               	goto	l98
   838  07D4                     l1120:
   839                           
   840                           ; Switch size 1, requested type "simple"
   841                           ; Number of cases is 10, Range of values is 0 to 9
   842                           ; switch strategies available:
   843                           ; Name         Instructions Cycles
   844                           ; direct_byte           16     6 (fixed)
   845                           ; simple_byte           31    16 (average)
   846                           ; jumptable            260     6 (fixed)
   847                           ;	Chosen strategy is simple_byte
   848  07D4  0870               	movf	??_set_disp_digit_value,w
   849  07D5  3A00               	xorlw	0	; case 0
   850  07D6  1903               	skipnz
   851  07D7  2F9A               	goto	l994
   852  07D8  3A01               	xorlw	1	; case 1
   853  07D9  1903               	skipnz
   854  07DA  2F9F               	goto	l996
   855  07DB  3A03               	xorlw	3	; case 2
   856  07DC  1903               	skipnz
   857  07DD  2FA4               	goto	l998
   858  07DE  3A01               	xorlw	1	; case 3
   859  07DF  1903               	skipnz
   860  07E0  2FA9               	goto	l1000
   861  07E1  3A07               	xorlw	7	; case 4
   862  07E2  1903               	skipnz
   863  07E3  2FAE               	goto	l1002
   864  07E4  3A01               	xorlw	1	; case 5
   865  07E5  1903               	skipnz
   866  07E6  2FB3               	goto	l1004
   867  07E7  3A03               	xorlw	3	; case 6
   868  07E8  1903               	skipnz
   869  07E9  2FB8               	goto	l1006
   870  07EA  3A01               	xorlw	1	; case 7
   871  07EB  1903               	skipnz
   872  07EC  2FBD               	goto	l1008
   873  07ED  3A0F               	xorlw	15	; case 8
   874  07EE  1903               	skipnz
   875  07EF  2FC2               	goto	l1010
   876  07F0  3A01               	xorlw	1	; case 9
   877  07F1  1903               	skipnz
   878  07F2  2FC7               	goto	l1012
   879  07F3  2FF4               	goto	l98
   880  07F4                     l98:
   881  07F4  0008               	return
   882  07F5                     __end_of_set_disp_digit_value:
   883                           
   884                           	psect	text4
   885  0747                     __ptext4:	
   886 ;; *************** function _format_time *****************
   887 ;; Defined at:
   888 ;;		line 81 in file "stopwatch.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  cashed_time     2    1[BANK0 ] unsigned int 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, pclath, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   902 ;;      Params:         0       0       0       0
   903 ;;      Locals:         0       2       0       0
   904 ;;      Temps:          0       1       0       0
   905 ;;      Totals:         0       3       0       0
   906 ;;Total ram usage:        3 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 1
   909 ;; This function calls:
   910 ;;		___lwdiv
   911 ;;		___lwmod
   912 ;; This function is called by:
   913 ;;		_update_disp
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           
   918                           ;psect for function _format_time
   919  0747                     _format_time:
   920  0747                     l1022:	
   921                           ;incstack = 0
   922                           ; Regs used in _format_time: [wreg+status,2+status,0+pclath+cstack]
   923                           
   924                           
   925                           ;stopwatch.c: 83:     formatted_time.ms = time_ms / 100 % 10;
   926  0747  300A               	movlw	10
   927  0748  00F8               	movwf	___lwmod@divisor
   928  0749  3000               	movlw	0
   929  074A  00F9               	movwf	___lwmod@divisor+1
   930  074B  3064               	movlw	100
   931  074C  00F0               	movwf	___lwdiv@divisor
   932  074D  3000               	movlw	0
   933  074E  00F1               	movwf	___lwdiv@divisor+1
   934  074F  1283               	bcf	3,5	;RP0=0, select bank0
   935  0750  1303               	bcf	3,6	;RP1=0, select bank0
   936  0751  0824               	movf	_time_ms+1,w
   937  0752  00F3               	movwf	___lwdiv@dividend+1
   938  0753  0823               	movf	_time_ms,w
   939  0754  00F2               	movwf	___lwdiv@dividend
   940  0755  2703               	fcall	___lwdiv
   941  0756  0871               	movf	?___lwdiv+1,w
   942  0757  00FB               	movwf	___lwmod@dividend+1
   943  0758  0870               	movf	?___lwdiv,w
   944  0759  00FA               	movwf	___lwmod@dividend
   945  075A  268A               	fcall	___lwmod
   946  075B  0878               	movf	?___lwmod,w
   947  075C  1283               	bcf	3,5	;RP0=0, select bank0
   948  075D  1303               	bcf	3,6	;RP1=0, select bank0
   949  075E  00A7               	movwf	??_format_time
   950  075F  0827               	movf	??_format_time,w
   951  0760  00A0               	movwf	_formatted_time
   952                           
   953                           ;stopwatch.c: 84:     unsigned int cashed_time = time_ms / 1000 % 60;
   954  0761  303C               	movlw	60
   955  0762  00F8               	movwf	___lwmod@divisor
   956  0763  3000               	movlw	0
   957  0764  00F9               	movwf	___lwmod@divisor+1
   958  0765  30E8               	movlw	232
   959  0766  00F0               	movwf	___lwdiv@divisor
   960  0767  3003               	movlw	3
   961  0768  00F1               	movwf	___lwdiv@divisor+1
   962  0769  0824               	movf	_time_ms+1,w
   963  076A  00F3               	movwf	___lwdiv@dividend+1
   964  076B  0823               	movf	_time_ms,w
   965  076C  00F2               	movwf	___lwdiv@dividend
   966  076D  2703               	fcall	___lwdiv
   967  076E  0871               	movf	?___lwdiv+1,w
   968  076F  00FB               	movwf	___lwmod@dividend+1
   969  0770  0870               	movf	?___lwdiv,w
   970  0771  00FA               	movwf	___lwmod@dividend
   971  0772  268A               	fcall	___lwmod
   972  0773  0879               	movf	?___lwmod+1,w
   973  0774  1283               	bcf	3,5	;RP0=0, select bank0
   974  0775  1303               	bcf	3,6	;RP1=0, select bank0
   975  0776  00A9               	movwf	format_time@cashed_time+1
   976  0777  0878               	movf	?___lwmod,w
   977  0778  00A8               	movwf	format_time@cashed_time
   978                           
   979                           ;stopwatch.c: 85:     formatted_time.sec_1_digit = cashed_time % 10;
   980  0779  300A               	movlw	10
   981  077A  00F8               	movwf	___lwmod@divisor
   982  077B  3000               	movlw	0
   983  077C  00F9               	movwf	___lwmod@divisor+1
   984  077D  0829               	movf	format_time@cashed_time+1,w
   985  077E  00FB               	movwf	___lwmod@dividend+1
   986  077F  0828               	movf	format_time@cashed_time,w
   987  0780  00FA               	movwf	___lwmod@dividend
   988  0781  268A               	fcall	___lwmod
   989  0782  0878               	movf	?___lwmod,w
   990  0783  1283               	bcf	3,5	;RP0=0, select bank0
   991  0784  1303               	bcf	3,6	;RP1=0, select bank0
   992  0785  00A7               	movwf	??_format_time
   993  0786  0827               	movf	??_format_time,w
   994  0787  00A1               	movwf	_formatted_time+1
   995                           
   996                           ;stopwatch.c: 86:     formatted_time.sec_2_digit = (char)(cashed_time / 10);
   997  0788  300A               	movlw	10
   998  0789  00F0               	movwf	___lwdiv@divisor
   999  078A  3000               	movlw	0
  1000  078B  00F1               	movwf	___lwdiv@divisor+1
  1001  078C  0829               	movf	format_time@cashed_time+1,w
  1002  078D  00F3               	movwf	___lwdiv@dividend+1
  1003  078E  0828               	movf	format_time@cashed_time,w
  1004  078F  00F2               	movwf	___lwdiv@dividend
  1005  0790  2703               	fcall	___lwdiv
  1006  0791  0870               	movf	?___lwdiv,w
  1007  0792  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0793  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0794  00A7               	movwf	??_format_time
  1010  0795  0827               	movf	??_format_time,w
  1011  0796  00A2               	movwf	_formatted_time+2
  1012  0797                     l110:
  1013  0797  0008               	return
  1014  0798                     __end_of_format_time:
  1015                           
  1016                           	psect	text5
  1017  068A                     __ptext5:	
  1018 ;; *************** function ___lwmod *****************
  1019 ;; Defined at:
  1020 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  divisor         2    8[COMMON] unsigned int 
  1023 ;;  dividend        2   10[COMMON] unsigned int 
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;  counter         1   13[COMMON] unsigned char 
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  2    8[COMMON] unsigned int 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1035 ;;      Params:         4       0       0       0
  1036 ;;      Locals:         1       0       0       0
  1037 ;;      Temps:          1       0       0       0
  1038 ;;      Totals:         6       0       0       0
  1039 ;;Total ram usage:        6 bytes
  1040 ;; Hardware stack levels used: 1
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_format_time
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           
  1049                           ;psect for function ___lwmod
  1050  068A                     ___lwmod:
  1051  068A                     l962:	
  1052                           ;incstack = 0
  1053                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1054                           
  1055  068A  0878               	movf	___lwmod@divisor,w
  1056  068B  0479               	iorwf	___lwmod@divisor+1,w
  1057  068C  1903               	btfsc	3,2
  1058  068D  2E8F               	goto	u331
  1059  068E  2E90               	goto	u330
  1060  068F                     u331:
  1061  068F  2EBF               	goto	l980
  1062  0690                     u330:
  1063  0690                     l964:
  1064  0690  01FD               	clrf	___lwmod@counter
  1065  0691  0AFD               	incf	___lwmod@counter,f
  1066  0692  2E9E               	goto	l970
  1067  0693                     l966:
  1068  0693  3001               	movlw	1
  1069  0694                     u345:
  1070  0694  1003               	clrc
  1071  0695  0DF8               	rlf	___lwmod@divisor,f
  1072  0696  0DF9               	rlf	___lwmod@divisor+1,f
  1073  0697  3EFF               	addlw	-1
  1074  0698  1D03               	skipz
  1075  0699  2E94               	goto	u345
  1076  069A                     l968:
  1077  069A  3001               	movlw	1
  1078  069B  00FC               	movwf	??___lwmod
  1079  069C  087C               	movf	??___lwmod,w
  1080  069D  07FD               	addwf	___lwmod@counter,f
  1081  069E                     l970:
  1082  069E  1FF9               	btfss	___lwmod@divisor+1,7
  1083  069F  2EA1               	goto	u351
  1084  06A0  2EA2               	goto	u350
  1085  06A1                     u351:
  1086  06A1  2E93               	goto	l966
  1087  06A2                     u350:
  1088  06A2                     l972:
  1089  06A2  0879               	movf	___lwmod@divisor+1,w
  1090  06A3  027B               	subwf	___lwmod@dividend+1,w
  1091  06A4  1D03               	skipz
  1092  06A5  2EA8               	goto	u365
  1093  06A6  0878               	movf	___lwmod@divisor,w
  1094  06A7  027A               	subwf	___lwmod@dividend,w
  1095  06A8                     u365:
  1096  06A8  1C03               	skipc
  1097  06A9  2EAB               	goto	u361
  1098  06AA  2EAC               	goto	u360
  1099  06AB                     u361:
  1100  06AB  2EB2               	goto	l976
  1101  06AC                     u360:
  1102  06AC                     l974:
  1103  06AC  0878               	movf	___lwmod@divisor,w
  1104  06AD  02FA               	subwf	___lwmod@dividend,f
  1105  06AE  0879               	movf	___lwmod@divisor+1,w
  1106  06AF  1C03               	skipc
  1107  06B0  03FB               	decf	___lwmod@dividend+1,f
  1108  06B1  02FB               	subwf	___lwmod@dividend+1,f
  1109  06B2                     l976:
  1110  06B2  3001               	movlw	1
  1111  06B3                     u375:
  1112  06B3  1003               	clrc
  1113  06B4  0CF9               	rrf	___lwmod@divisor+1,f
  1114  06B5  0CF8               	rrf	___lwmod@divisor,f
  1115  06B6  3EFF               	addlw	-1
  1116  06B7  1D03               	skipz
  1117  06B8  2EB3               	goto	u375
  1118  06B9                     l978:
  1119  06B9  3001               	movlw	1
  1120  06BA  02FD               	subwf	___lwmod@counter,f
  1121  06BB  1D03               	btfss	3,2
  1122  06BC  2EBE               	goto	u381
  1123  06BD  2EBF               	goto	u380
  1124  06BE                     u381:
  1125  06BE  2EA2               	goto	l972
  1126  06BF                     u380:
  1127  06BF                     l980:
  1128  06BF  087B               	movf	___lwmod@dividend+1,w
  1129  06C0  00F9               	movwf	?___lwmod+1
  1130  06C1  087A               	movf	___lwmod@dividend,w
  1131  06C2  00F8               	movwf	?___lwmod
  1132  06C3                     l486:
  1133  06C3  0008               	return
  1134  06C4                     __end_of___lwmod:
  1135                           
  1136                           	psect	text6
  1137  0703                     __ptext6:	
  1138 ;; *************** function ___lwdiv *****************
  1139 ;; Defined at:
  1140 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  divisor         2    0[COMMON] unsigned int 
  1143 ;;  dividend        2    2[COMMON] unsigned int 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  quotient        2    5[COMMON] unsigned int 
  1146 ;;  counter         1    7[COMMON] unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  2    0[COMMON] unsigned int 
  1149 ;; Registers used:
  1150 ;;		wreg, status,2, status,0
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1156 ;;      Params:         4       0       0       0
  1157 ;;      Locals:         3       0       0       0
  1158 ;;      Temps:          1       0       0       0
  1159 ;;      Totals:         8       0       0       0
  1160 ;;Total ram usage:        8 bytes
  1161 ;; Hardware stack levels used: 1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_format_time
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function ___lwdiv
  1171  0703                     ___lwdiv:
  1172  0703                     l936:	
  1173                           ;incstack = 0
  1174                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1175                           
  1176  0703  01F5               	clrf	___lwdiv@quotient
  1177  0704  01F6               	clrf	___lwdiv@quotient+1
  1178  0705                     l938:
  1179  0705  0870               	movf	___lwdiv@divisor,w
  1180  0706  0471               	iorwf	___lwdiv@divisor+1,w
  1181  0707  1903               	btfsc	3,2
  1182  0708  2F0A               	goto	u261
  1183  0709  2F0B               	goto	u260
  1184  070A                     u261:
  1185  070A  2F42               	goto	l958
  1186  070B                     u260:
  1187  070B                     l940:
  1188  070B  01F7               	clrf	___lwdiv@counter
  1189  070C  0AF7               	incf	___lwdiv@counter,f
  1190  070D  2F19               	goto	l946
  1191  070E                     l942:
  1192  070E  3001               	movlw	1
  1193  070F                     u275:
  1194  070F  1003               	clrc
  1195  0710  0DF0               	rlf	___lwdiv@divisor,f
  1196  0711  0DF1               	rlf	___lwdiv@divisor+1,f
  1197  0712  3EFF               	addlw	-1
  1198  0713  1D03               	skipz
  1199  0714  2F0F               	goto	u275
  1200  0715                     l944:
  1201  0715  3001               	movlw	1
  1202  0716  00F4               	movwf	??___lwdiv
  1203  0717  0874               	movf	??___lwdiv,w
  1204  0718  07F7               	addwf	___lwdiv@counter,f
  1205  0719                     l946:
  1206  0719  1FF1               	btfss	___lwdiv@divisor+1,7
  1207  071A  2F1C               	goto	u281
  1208  071B  2F1D               	goto	u280
  1209  071C                     u281:
  1210  071C  2F0E               	goto	l942
  1211  071D                     u280:
  1212  071D                     l948:
  1213  071D  3001               	movlw	1
  1214  071E                     u295:
  1215  071E  1003               	clrc
  1216  071F  0DF5               	rlf	___lwdiv@quotient,f
  1217  0720  0DF6               	rlf	___lwdiv@quotient+1,f
  1218  0721  3EFF               	addlw	-1
  1219  0722  1D03               	skipz
  1220  0723  2F1E               	goto	u295
  1221  0724  0871               	movf	___lwdiv@divisor+1,w
  1222  0725  0273               	subwf	___lwdiv@dividend+1,w
  1223  0726  1D03               	skipz
  1224  0727  2F2A               	goto	u305
  1225  0728  0870               	movf	___lwdiv@divisor,w
  1226  0729  0272               	subwf	___lwdiv@dividend,w
  1227  072A                     u305:
  1228  072A  1C03               	skipc
  1229  072B  2F2D               	goto	u301
  1230  072C  2F2E               	goto	u300
  1231  072D                     u301:
  1232  072D  2F35               	goto	l954
  1233  072E                     u300:
  1234  072E                     l950:
  1235  072E  0870               	movf	___lwdiv@divisor,w
  1236  072F  02F2               	subwf	___lwdiv@dividend,f
  1237  0730  0871               	movf	___lwdiv@divisor+1,w
  1238  0731  1C03               	skipc
  1239  0732  03F3               	decf	___lwdiv@dividend+1,f
  1240  0733  02F3               	subwf	___lwdiv@dividend+1,f
  1241  0734                     l952:
  1242  0734  1475               	bsf	___lwdiv@quotient,0
  1243  0735                     l954:
  1244  0735  3001               	movlw	1
  1245  0736                     u315:
  1246  0736  1003               	clrc
  1247  0737  0CF1               	rrf	___lwdiv@divisor+1,f
  1248  0738  0CF0               	rrf	___lwdiv@divisor,f
  1249  0739  3EFF               	addlw	-1
  1250  073A  1D03               	skipz
  1251  073B  2F36               	goto	u315
  1252  073C                     l956:
  1253  073C  3001               	movlw	1
  1254  073D  02F7               	subwf	___lwdiv@counter,f
  1255  073E  1D03               	btfss	3,2
  1256  073F  2F41               	goto	u321
  1257  0740  2F42               	goto	u320
  1258  0741                     u321:
  1259  0741  2F1D               	goto	l948
  1260  0742                     u320:
  1261  0742                     l958:
  1262  0742  0876               	movf	___lwdiv@quotient+1,w
  1263  0743  00F1               	movwf	?___lwdiv+1
  1264  0744  0875               	movf	___lwdiv@quotient,w
  1265  0745  00F0               	movwf	?___lwdiv
  1266  0746                     l476:
  1267  0746  0008               	return
  1268  0747                     __end_of___lwdiv:
  1269                           
  1270                           	psect	text7
  1271  05F2                     __ptext7:	
  1272 ;; *************** function _handle_btn_pressing *****************
  1273 ;; Defined at:
  1274 ;;		line 33 in file "buttons.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  btn             1    wreg     enum E469
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;  btn             1    2[COMMON] enum E469
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1288 ;;      Params:         0       0       0       0
  1289 ;;      Locals:         1       0       0       0
  1290 ;;      Temps:          2       0       0       0
  1291 ;;      Totals:         3       0       0       0
  1292 ;;Total ram usage:        3 bytes
  1293 ;; Hardware stack levels used: 1
  1294 ;; Hardware stack levels required when called: 1
  1295 ;; This function calls:
  1296 ;;		_reset_stopwatch
  1297 ;;		_start_stopwatch
  1298 ;;		_stop_stopwatch
  1299 ;; This function is called by:
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           
  1305                           ;psect for function _handle_btn_pressing
  1306  05F2                     _handle_btn_pressing:
  1307                           
  1308                           ;incstack = 0
  1309                           ; Regs used in _handle_btn_pressing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1310                           ;handle_btn_pressing@btn stored from wreg
  1311  05F2  00F2               	movwf	handle_btn_pressing@btn
  1312  05F3                     l1050:
  1313                           
  1314                           ;buttons.c: 33: void handle_btn_pressing(enum Button btn);buttons.c: 34: {;buttons.c: 35
      +                          :     switch(btn)
  1315  05F3  2DFA               	goto	l1060
  1316  05F4                     l1052:
  1317                           
  1318                           ;buttons.c: 38:             reset_stopwatch();
  1319  05F4  25D3               	fcall	_reset_stopwatch
  1320                           
  1321                           ;buttons.c: 39:             break;
  1322  05F5  2E0D               	goto	l70
  1323  05F6                     l1054:
  1324                           
  1325                           ;buttons.c: 41:             stop_stopwatch();
  1326  05F6  25CA               	fcall	_stop_stopwatch
  1327                           
  1328                           ;buttons.c: 42:             break;
  1329  05F7  2E0D               	goto	l70
  1330  05F8                     l1056:
  1331                           
  1332                           ;buttons.c: 44:             start_stopwatch();
  1333  05F8  25CE               	fcall	_start_stopwatch
  1334                           
  1335                           ;buttons.c: 45:             break;
  1336  05F9  2E0D               	goto	l70
  1337  05FA                     l1060:
  1338  05FA  0872               	movf	handle_btn_pressing@btn,w
  1339  05FB  00F0               	movwf	??_handle_btn_pressing
  1340  05FC  01F1               	clrf	??_handle_btn_pressing+1
  1341                           
  1342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1343                           ; Switch size 1, requested type "simple"
  1344                           ; Number of cases is 1, Range of values is 0 to 0
  1345                           ; switch strategies available:
  1346                           ; Name         Instructions Cycles
  1347                           ; simple_byte            4     3 (average)
  1348                           ; direct_byte            7     6 (fixed)
  1349                           ; jumptable            260     6 (fixed)
  1350                           ;	Chosen strategy is simple_byte
  1351  05FD  0871               	movf	??_handle_btn_pressing+1,w
  1352  05FE  3A00               	xorlw	0	; case 0
  1353  05FF  1903               	skipnz
  1354  0600  2E02               	goto	l1122
  1355  0601  2E0D               	goto	l70
  1356  0602                     l1122:
  1357                           
  1358                           ; Switch size 1, requested type "simple"
  1359                           ; Number of cases is 3, Range of values is 1 to 3
  1360                           ; switch strategies available:
  1361                           ; Name         Instructions Cycles
  1362                           ; simple_byte           10     6 (average)
  1363                           ; direct_byte           12     9 (fixed)
  1364                           ; jumptable            263     9 (fixed)
  1365                           ;	Chosen strategy is simple_byte
  1366  0602  0870               	movf	??_handle_btn_pressing,w
  1367  0603  3A01               	xorlw	1	; case 1
  1368  0604  1903               	skipnz
  1369  0605  2DF4               	goto	l1052
  1370  0606  3A03               	xorlw	3	; case 2
  1371  0607  1903               	skipnz
  1372  0608  2DF6               	goto	l1054
  1373  0609  3A01               	xorlw	1	; case 3
  1374  060A  1903               	skipnz
  1375  060B  2DF8               	goto	l1056
  1376  060C  2E0D               	goto	l70
  1377  060D                     l70:
  1378  060D  0008               	return
  1379  060E                     __end_of_handle_btn_pressing:
  1380                           
  1381                           	psect	text8
  1382  05CA                     __ptext8:	
  1383 ;; *************** function _stop_stopwatch *****************
  1384 ;; Defined at:
  1385 ;;		line 69 in file "stopwatch.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;		None
  1388 ;; Auto vars:     Size  Location     Type
  1389 ;;		None
  1390 ;; Return value:  Size  Location     Type
  1391 ;;                  1    wreg      void 
  1392 ;; Registers used:
  1393 ;;		status,2
  1394 ;; Tracked objects:
  1395 ;;		On entry : 0/0
  1396 ;;		On exit  : 0/0
  1397 ;;		Unchanged: 0/0
  1398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1399 ;;      Params:         0       0       0       0
  1400 ;;      Locals:         0       0       0       0
  1401 ;;      Temps:          0       0       0       0
  1402 ;;      Totals:         0       0       0       0
  1403 ;;Total ram usage:        0 bytes
  1404 ;; Hardware stack levels used: 1
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_handle_btn_pressing
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _stop_stopwatch
  1414  05CA                     _stop_stopwatch:
  1415  05CA                     l988:	
  1416                           ;incstack = 0
  1417                           ; Regs used in _stop_stopwatch: [status,2]
  1418                           
  1419                           
  1420                           ;stopwatch.c: 71:     is_timer_work = 0;
  1421  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1422  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1423  05CC  01A5               	clrf	_is_timer_work
  1424  05CD                     l104:
  1425  05CD  0008               	return
  1426  05CE                     __end_of_stop_stopwatch:
  1427                           
  1428                           	psect	text9
  1429  05CE                     __ptext9:	
  1430 ;; *************** function _start_stopwatch *****************
  1431 ;; Defined at:
  1432 ;;		line 75 in file "stopwatch.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      void 
  1439 ;; Registers used:
  1440 ;;		None
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1446 ;;      Params:         0       0       0       0
  1447 ;;      Locals:         0       0       0       0
  1448 ;;      Temps:          0       0       0       0
  1449 ;;      Totals:         0       0       0       0
  1450 ;;Total ram usage:        0 bytes
  1451 ;; Hardware stack levels used: 1
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_handle_btn_pressing
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           
  1460                           ;psect for function _start_stopwatch
  1461  05CE                     _start_stopwatch:
  1462  05CE                     l990:	
  1463                           ;incstack = 0
  1464                           ; Regs used in _start_stopwatch: []
  1465                           
  1466                           
  1467                           ;stopwatch.c: 77:     is_timer_work = 1;
  1468  05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1469  05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1470  05D0  01A5               	clrf	_is_timer_work
  1471  05D1  0AA5               	incf	_is_timer_work,f
  1472  05D2                     l107:
  1473  05D2  0008               	return
  1474  05D3                     __end_of_start_stopwatch:
  1475                           
  1476                           	psect	text10
  1477  05D3                     __ptext10:	
  1478 ;; *************** function _reset_stopwatch *****************
  1479 ;; Defined at:
  1480 ;;		line 62 in file "stopwatch.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;		None
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      void 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1494 ;;      Params:         0       0       0       0
  1495 ;;      Locals:         0       0       0       0
  1496 ;;      Temps:          0       0       0       0
  1497 ;;      Totals:         0       0       0       0
  1498 ;;Total ram usage:        0 bytes
  1499 ;; Hardware stack levels used: 1
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;;		_handle_btn_pressing
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function _reset_stopwatch
  1510  05D3                     _reset_stopwatch:
  1511  05D3                     l984:	
  1512                           ;incstack = 0
  1513                           ; Regs used in _reset_stopwatch: [wreg+status,2]
  1514                           
  1515                           
  1516                           ;stopwatch.c: 64:     is_timer_work = 0;
  1517  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1518  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1519  05D5  01A5               	clrf	_is_timer_work
  1520  05D6                     l986:
  1521                           
  1522                           ;stopwatch.c: 65:     PORTB = 0xC0;
  1523  05D6  30C0               	movlw	192
  1524  05D7  0086               	movwf	6	;volatile
  1525  05D8                     l101:
  1526  05D8  0008               	return
  1527  05D9                     __end_of_reset_stopwatch:
  1528                           
  1529                           	psect	text11
  1530  06C4                     __ptext11:	
  1531 ;; *************** function _get_btn_pressed *****************
  1532 ;; Defined at:
  1533 ;;		line 18 in file "buttons.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  btn             1    4[COMMON] enum E469
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      enum E469
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1547 ;;      Params:         0       0       0       0
  1548 ;;      Locals:         1       0       0       0
  1549 ;;      Temps:          1       0       0       0
  1550 ;;      Totals:         2       0       0       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 1
  1554 ;; This function calls:
  1555 ;;		_is_btn_bounce
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           
  1562                           ;psect for function _get_btn_pressed
  1563  06C4                     _get_btn_pressed:
  1564  06C4                     l848:	
  1565                           ;incstack = 0
  1566                           ; Regs used in _get_btn_pressed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1567                           
  1568                           
  1569                           ;buttons.c: 20:     enum Button btn = NONE;
  1570  06C4  01F4               	clrf	get_btn_pressed@btn
  1571  06C5                     l850:
  1572                           
  1573                           ;buttons.c: 22:     if (PORTAbits.RA7 == 0 && !is_btn_bounce(PORTAbits.RA7))
  1574  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1575  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1576  06C7  1B85               	btfsc	5,7	;volatile
  1577  06C8  2ECA               	goto	u181
  1578  06C9  2ECB               	goto	u180
  1579  06CA                     u181:
  1580  06CA  2ED7               	goto	l56
  1581  06CB                     u180:
  1582  06CB                     l852:
  1583  06CB  0D05               	rlf	5,w	;volatile
  1584  06CC  0D05               	rlf	5,w	;volatile
  1585  06CD  3901               	andlw	1
  1586  06CE  262B               	fcall	_is_btn_bounce
  1587  06CF  3A00               	xorlw	0
  1588  06D0  1D03               	skipz
  1589  06D1  2ED3               	goto	u191
  1590  06D2  2ED4               	goto	u190
  1591  06D3                     u191:
  1592  06D3  2ED7               	goto	l56
  1593  06D4                     u190:
  1594  06D4                     l854:
  1595                           
  1596                           ;buttons.c: 23:         btn = RESET;
  1597  06D4  01F4               	clrf	get_btn_pressed@btn
  1598  06D5  0AF4               	incf	get_btn_pressed@btn,f
  1599  06D6  2F01               	goto	l57
  1600  06D7                     l56:	
  1601                           ;buttons.c: 24:     else if (PORTAbits.RA6 == 0 && !is_btn_bounce(PORTAbits.RA6))
  1602                           
  1603  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  1604  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  1605  06D9  1B05               	btfsc	5,6	;volatile
  1606  06DA  2EDC               	goto	u201
  1607  06DB  2EDD               	goto	u200
  1608  06DC                     u201:
  1609  06DC  2EED               	goto	l58
  1610  06DD                     u200:
  1611  06DD                     l856:
  1612  06DD  0E05               	swapf	5,w	;volatile
  1613  06DE  00F3               	movwf	??_get_btn_pressed
  1614  06DF  0CF3               	rrf	??_get_btn_pressed,f
  1615  06E0  0C73               	rrf	??_get_btn_pressed,w
  1616  06E1  3901               	andlw	1
  1617  06E2  262B               	fcall	_is_btn_bounce
  1618  06E3  3A00               	xorlw	0
  1619  06E4  1D03               	skipz
  1620  06E5  2EE7               	goto	u211
  1621  06E6  2EE8               	goto	u210
  1622  06E7                     u211:
  1623  06E7  2EED               	goto	l58
  1624  06E8                     u210:
  1625  06E8                     l858:
  1626                           
  1627                           ;buttons.c: 25:         btn = STOP;
  1628  06E8  3002               	movlw	2
  1629  06E9  00F3               	movwf	??_get_btn_pressed
  1630  06EA  0873               	movf	??_get_btn_pressed,w
  1631  06EB  00F4               	movwf	get_btn_pressed@btn
  1632  06EC  2F01               	goto	l57
  1633  06ED                     l58:	
  1634                           ;buttons.c: 26:     else if (PORTAbits.RA5 == 0 && !is_btn_bounce(PORTAbits.RA5))
  1635                           
  1636  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1637  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  1638  06EF  1A85               	btfsc	5,5	;volatile
  1639  06F0  2EF2               	goto	u221
  1640  06F1  2EF3               	goto	u220
  1641  06F2                     u221:
  1642  06F2  2F01               	goto	l57
  1643  06F3                     u220:
  1644  06F3                     l860:
  1645  06F3  0E05               	swapf	5,w	;volatile
  1646  06F4  00F3               	movwf	??_get_btn_pressed
  1647  06F5  0C73               	rrf	??_get_btn_pressed,w
  1648  06F6  3901               	andlw	1
  1649  06F7  262B               	fcall	_is_btn_bounce
  1650  06F8  3A00               	xorlw	0
  1651  06F9  1D03               	skipz
  1652  06FA  2EFC               	goto	u231
  1653  06FB  2EFD               	goto	u230
  1654  06FC                     u231:
  1655  06FC  2F01               	goto	l57
  1656  06FD                     u230:
  1657  06FD                     l862:
  1658                           
  1659                           ;buttons.c: 27:         btn = START;
  1660  06FD  3003               	movlw	3
  1661  06FE  00F3               	movwf	??_get_btn_pressed
  1662  06FF  0873               	movf	??_get_btn_pressed,w
  1663  0700  00F4               	movwf	get_btn_pressed@btn
  1664  0701                     l57:
  1665                           
  1666                           ;buttons.c: 29:     return btn;
  1667  0701  0874               	movf	get_btn_pressed@btn,w
  1668  0702                     l61:
  1669  0702  0008               	return
  1670  0703                     __end_of_get_btn_pressed:
  1671                           
  1672                           	psect	text12
  1673  062B                     __ptext12:	
  1674 ;; *************** function _is_btn_bounce *****************
  1675 ;; Defined at:
  1676 ;;		line 8 in file "buttons.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  btn             1    wreg     unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  btn             1    0[COMMON] unsigned char 
  1681 ;;  i               2    1[COMMON] int 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      unsigned char 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0, btemp+1
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1691 ;;      Params:         0       0       0       0
  1692 ;;      Locals:         3       0       0       0
  1693 ;;      Temps:          0       0       0       0
  1694 ;;      Totals:         3       0       0       0
  1695 ;;Total ram usage:        3 bytes
  1696 ;; Hardware stack levels used: 1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_get_btn_pressed
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function _is_btn_bounce
  1706  062B                     _is_btn_bounce:
  1707                           
  1708                           ;incstack = 0
  1709                           ; Regs used in _is_btn_bounce: [wreg+status,2+status,0+btemp+1]
  1710                           ;is_btn_bounce@btn stored from wreg
  1711  062B  00F0               	movwf	is_btn_bounce@btn
  1712  062C                     l762:
  1713                           
  1714                           ;buttons.c: 8: char is_btn_bounce(char btn);buttons.c: 9: {;buttons.c: 10:     int i = 0
      +                          ;
  1715  062C  01F1               	clrf	is_btn_bounce@i
  1716  062D  01F2               	clrf	is_btn_bounce@i+1
  1717                           
  1718                           ;buttons.c: 11:     while(i < 400 && btn == 0)
  1719  062E  2E35               	goto	l766
  1720  062F                     l764:
  1721                           
  1722                           ;buttons.c: 12:         i++;
  1723  062F  3001               	movlw	1
  1724  0630  07F1               	addwf	is_btn_bounce@i,f
  1725  0631  1803               	skipnc
  1726  0632  0AF2               	incf	is_btn_bounce@i+1,f
  1727  0633  3000               	movlw	0
  1728  0634  07F2               	addwf	is_btn_bounce@i+1,f
  1729  0635                     l766:
  1730                           
  1731                           ;buttons.c: 11:     while(i < 400 && btn == 0)
  1732  0635  0872               	movf	is_btn_bounce@i+1,w
  1733  0636  3A80               	xorlw	128
  1734  0637  00FF               	movwf	btemp+1
  1735  0638  3081               	movlw	129
  1736  0639  027F               	subwf	btemp+1,w
  1737  063A  1D03               	skipz
  1738  063B  2E3E               	goto	u145
  1739  063C  3090               	movlw	144
  1740  063D  0271               	subwf	is_btn_bounce@i,w
  1741  063E                     u145:
  1742  063E  1803               	skipnc
  1743  063F  2E41               	goto	u141
  1744  0640  2E42               	goto	u140
  1745  0641                     u141:
  1746  0641  2E47               	goto	l770
  1747  0642                     u140:
  1748  0642                     l768:
  1749  0642  0870               	movf	is_btn_bounce@btn,w
  1750  0643  1903               	btfsc	3,2
  1751  0644  2E46               	goto	u151
  1752  0645  2E47               	goto	u150
  1753  0646                     u151:
  1754  0646  2E2F               	goto	l764
  1755  0647                     u150:
  1756  0647                     l770:
  1757                           
  1758                           ;buttons.c: 14:     return i == 400 ? 0 : 1;
  1759  0647  3090               	movlw	144
  1760  0648  0671               	xorwf	is_btn_bounce@i,w
  1761  0649  1D03               	skipz
  1762  064A  2E4F               	goto	u161
  1763  064B  0372               	decf	is_btn_bounce@i+1,w
  1764  064C  1D03               	btfss	3,2
  1765  064D  2E4F               	goto	u161
  1766  064E  2E51               	goto	u160
  1767  064F                     u161:
  1768  064F  3001               	movlw	1
  1769  0650  2E52               	goto	u170
  1770  0651                     u160:
  1771  0651  3000               	movlw	0
  1772  0652                     u170:
  1773  0652                     l53:
  1774  0652  0008               	return
  1775  0653                     __end_of_is_btn_bounce:
  1776                           
  1777                           	psect	text13
  1778  05E1                     __ptext13:	
  1779 ;; *************** function _configure *****************
  1780 ;; Defined at:
  1781 ;;		line 17 in file "main.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;		None
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;		None
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg, status,2, status,0
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1795 ;;      Params:         0       0       0       0
  1796 ;;      Locals:         0       0       0       0
  1797 ;;      Temps:          1       0       0       0
  1798 ;;      Totals:         1       0       0       0
  1799 ;;Total ram usage:        1 bytes
  1800 ;; Hardware stack levels used: 1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _configure
  1810  05E1                     _configure:
  1811  05E1                     l810:	
  1812                           ;incstack = 0
  1813                           ; Regs used in _configure: [wreg+status,2+status,0]
  1814                           
  1815                           
  1816                           ;main.c: 19:     reset_stopwatch();
  1817  05E1  178B               	bsf	11,7	;volatile
  1818  05E2                     l812:
  1819                           
  1820                           ;main.c: 21:     while(1)
  1821  05E2  3007               	movlw	7
  1822  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  1823  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  1824  05E5  009F               	movwf	31	;volatile
  1825                           
  1826                           ;main.c: 23:         update_disp();
  1827  05E6  30E0               	movlw	224
  1828  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  1829  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  1830  05E9  0085               	movwf	5	;volatile
  1831  05EA                     l814:
  1832                           
  1833                           ;main.c: 24:         handle_btn_pressing(get_btn_pressed());
  1834  05EA  0186               	clrf	6	;volatile
  1835  05EB                     l816:
  1836                           
  1837                           ;main.c: 26:     }
  1838  05EB  1281               	bcf	1,5	;volatile
  1839  05EC                     l818:
  1840                           
  1841                           ;main.c: 27: 
  1842  05EC  1181               	bcf	1,3	;volatile
  1843  05ED                     l820:
  1844                           
  1845                           ;main.c: 28:     return;
  1846  05ED  3007               	movlw	7
  1847  05EE  00F0               	movwf	??_configure
  1848  05EF  0870               	movf	??_configure,w
  1849  05F0  0481               	iorwf	1,f	;volatile
  1850  05F1                     l27:
  1851  05F1  0008               	return
  1852  05F2                     __end_of_configure:
  1853  007E                     btemp	set	126	;btemp
  1854  007E                     wtemp0	set	126
  1855                           
  1856                           	psect	config
  1857                           
  1858                           ;Config register CONFIG @ 0x2007
  1859                           ;	Oscillator Selection bits
  1860                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1861                           ;	Watchdog Timer Enable bit
  1862                           ;	WDTE = OFF, WDT disabled
  1863                           ;	Power-up Timer Enable bit
  1864                           ;	PWRTE = OFF, PWRT disabled
  1865                           ;	RA5/MCLR/VPP Pin Function Select bit
  1866                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1867                           ;	Brown-out Detect Enable bit
  1868                           ;	BOREN = OFF, BOD disabled
  1869                           ;	Low-Voltage Programming Enable bit
  1870                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1871                           ;	Data EE Memory Code Protection bit
  1872                           ;	CPD = OFF, Data memory code protection off
  1873                           ;	Flash Program Memory Code Protection bit
  1874                           ;	CP = OFF, Code protection off
  1875  2007                     	org	8199
  1876  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4      11
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _format_time->___lwmod
    ___lwmod->___lwdiv
    _get_btn_pressed->_is_btn_bounce

Critical Paths under _main in BANK0

    _main->_update_disp
    _update_disp->_format_time

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1382
                          _configure
                    _get_btn_pressed
                _handle_btn_pressing
                    _reset_stopwatch
                        _update_disp
                _update_time_counter
 ---------------------------------------------------------------------------------
 (1) _update_time_counter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_disp                                          1     1      0    1300
                                              3 BANK0      1     1      0
                        _format_time
               _set_disp_digit_value
 ---------------------------------------------------------------------------------
 (2) _set_disp_digit_value                                 3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _format_time                                          3     3      0    1278
                                              0 BANK0      3     3      0
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     615
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     618
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _handle_btn_pressing                                  3     3      0      22
                                              0 COMMON     3     3      0
                    _reset_stopwatch
                    _start_stopwatch
                     _stop_stopwatch
 ---------------------------------------------------------------------------------
 (2) _stop_stopwatch                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_btn_pressed                                      2     2      0      60
                                              3 COMMON     2     2      0
                      _is_btn_bounce
 ---------------------------------------------------------------------------------
 (2) _is_btn_bounce                                        3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _configure                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure
   _get_btn_pressed
     _is_btn_bounce
   _handle_btn_pressing
     _reset_stopwatch
     _start_stopwatch
     _stop_stopwatch
   _reset_stopwatch
   _update_disp
     _format_time
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _set_disp_digit_value
   _update_time_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      4       B       3       13.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      19       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      19      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Jun 18 15:02:52 2021

                  _update_disp 0653                             l27 05F1                             l53 0652  
                           l61 0702                             l70 060D                             l56 06D7  
                           l57 0701                             l58 06ED                             l98 07F4  
                          l101 05D8                            l110 0797                            l104 05CD  
                          l113 0689                            l107 05D2                            l117 0624  
                          l118 062A                            l810 05E1                            l820 05ED  
                          l812 05E2                            l476 0746                            l814 05EA  
                          l486 06C3                            l816 05EB                            l818 05EC  
                          l770 0647                            l762 062C                            l850 06C5  
                          l764 062F                            l860 06F3                            l852 06CB  
                          l940 070B                            l766 0635                            l862 06FD  
                          l854 06D4                            l950 072E                            l942 070E  
                          l768 0642                            l856 06DD                            l848 06C4  
                          l952 0734                            l944 0715                            l936 0703  
                          l858 06E8                            l954 0735                            l946 0719  
                          l938 0705                            l970 069E                            l962 068A  
                          l956 073C                            l948 071D                            l972 06A2  
                          l964 0690                            l980 06BF                            l990 05CE  
                          l958 0742                            l974 06AC                            l966 0693  
                          l984 05D3                            l976 06B2                            l968 069A  
                          l992 0799                            l986 05D6                            l978 06B9  
                          l994 079A                            l988 05CA                            l996 079F  
                          l998 07A4                            u200 06DD                            u201 06DC  
                          u210 06E8                            u211 06E7                            u140 0642  
                          u220 06F3                            u300 072E                            u141 0641  
                          u221 06F2                            u301 072D                            u150 0647  
                          u230 06FD                            u151 0646                            u231 06FC  
                          u160 0651                            u320 0742                            u400 061E  
                          u161 064F                            u145 063E                            u321 0741  
                          u305 072A                            u401 061D                            u170 0652  
                          u330 0690                            u315 0736                            u331 068F  
                          u180 06CB                            u260 070B                            u181 06CA  
                          u261 070A                            u190 06D4                            u350 06A2  
                          u191 06D3                            u351 06A1                            u280 071D  
                          u360 06AC                            u281 071C                            u361 06AB  
                          u345 0694                            u417 065F                            u275 070F  
                          u427 0670                            u380 06BF                            u381 06BE  
                          u365 06A8                            u437 0681                            u390 0615  
                          u295 071E                            u375 06B3                            u391 0614  
         ?_handle_btn_pressing 0070          ??_update_time_counter 0070                           l1000 07A9  
                         l1010 07C2                           l1002 07AE                           l1012 07C7  
                         l1004 07B3                           l1022 0747                           l1006 07B8  
                         l1030 065B                           l1120 07D4                           l1008 07BD  
                         l1016 07CC                           l1040 0675                           l1032 0664  
                         l1024 0653                           l1122 0602                           l1050 05F3  
                         l1042 0678                           l1034 0667                           l1026 0654  
                         l1052 05F4                           l1060 05FA                           l1044 067A  
                         l1036 0669                           l1028 0658                           l1054 05F6  
                         l1046 067D                           l1038 066C                           l1070 061E  
                         l1056 05F8                           l1048 0686                           l1072 05D9  
                         l1066 060E                           l1074 05DB                           l1068 0615  
                         l1076 05DC                           l1078 05DE                           _main 05D9  
                         btemp 007E                           start 0000        __end_of_reset_stopwatch 05D9  
                 ?_format_time 0070       __size_of_start_stopwatch 0005                          ?_main 0070  
                        _CMCON 001F                __end_of___lwdiv 0747          ??_handle_btn_pressing 0070  
              __end_of___lwmod 06C4                          _PORTB 0006                          _TRISA 0085  
                        _TRISB 0086      set_disp_digit_value@value 0072                          status 0003  
                        wtemp0 007E                __initialization 07F5         format_time@cashed_time 0028  
                 __end_of_main 05E1         __size_of_is_btn_bounce 0028                         ??_main 007E  
       handle_btn_pressing@btn 0072                         _Button 0026               ?_reset_stopwatch 0070  
                    ??___lwdiv 0074                      ??___lwmod 007C              ??_start_stopwatch 0070  
                _is_btn_bounce 062B        __end_of__initialization 07FE       __size_of_get_btn_pressed 003F  
                 ?_update_disp 0070                 __pcstackCOMMON 0070           __size_of_format_time 0051  
               _OPTION_REGbits 0081                 ?_is_btn_bounce 0070             __size_of_configure 0011  
                   __pbssBANK0 0020                     __pmaintext 05D9  __size_of_set_disp_digit_value 005D  
  __end_of_update_time_counter 062B                  _is_timer_work 0025        __size_of_stop_stopwatch 0004  
            ??_get_btn_pressed 0073              __end_of_configure 05F2    __end_of_handle_btn_pressing 060E  
                      ___lwdiv 0703                        ___lwmod 068A                        __ptext1 060E  
                      __ptext2 0653                        __ptext3 0798                        __ptext4 0747  
                      __ptext5 068A                        __ptext6 0703                        __ptext7 05F2  
                      __ptext8 05CA                        __ptext9 05CE                ??_is_btn_bounce 0070  
                      _time_ms 0023           end_of_initialization 07FE           __size_of_update_disp 0037  
              _start_stopwatch 05CE                      _PORTAbits 0005                 is_btn_bounce@i 0071  
               _formatted_time 0020       __size_of_reset_stopwatch 0006            start_initialization 07F5  
               _stop_stopwatch 05CA        __end_of_start_stopwatch 05D3                  ??_format_time 0027  
 __end_of_set_disp_digit_value 07F5                      ___latbits 0000                  __pcstackBANK0 0027  
       __end_of_stop_stopwatch 05CE                _get_btn_pressed 06C4               ___lwdiv@dividend 0072  
                     ?___lwdiv 0070                       ?___lwmod 0078                      _configure 05E1  
          __end_of_format_time 0798   __size_of_update_time_counter 001D               ___lwdiv@quotient 0075  
              ?_stop_stopwatch 0070              ??_reset_stopwatch 0070               ?_start_stopwatch 0070  
                   ?_configure 0070   __size_of_handle_btn_pressing 001C        __end_of_get_btn_pressed 0703  
        __end_of_is_btn_bounce 0653                  ??_update_disp 002A           _set_disp_digit_value 0798  
                  _format_time 0747               __size_of___lwdiv 0044               __size_of___lwmod 003A  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0077                       __ptext10 05D3  
                     __ptext11 06C4                       __ptext12 062B                       __ptext13 05E1  
                __size_of_main 0008          ?_set_disp_digit_value 0070                    ??_configure 0070  
          __end_of_update_disp 068A                     _INTCONbits 000B               ?_get_btn_pressed 0070  
             ___lwmod@dividend 007A            _update_time_counter 060E                _reset_stopwatch 05D3  
                   _OPTION_REG 0081                ___lwmod@divisor 0078               ??_stop_stopwatch 0070  
              ___lwmod@counter 007D           ?_update_time_counter 0070             get_btn_pressed@btn 0074  
       ??_set_disp_digit_value 0070            _handle_btn_pressing 05F2               is_btn_bounce@btn 0070  
