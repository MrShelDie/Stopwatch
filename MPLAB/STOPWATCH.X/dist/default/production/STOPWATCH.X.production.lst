

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jul 28 15:04:38 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F628A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  008C                     	;# 
    89  008E                     	;# 
    90  0092                     	;# 
    91  0098                     	;# 
    92  0099                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009F                     	;# 
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0015                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0017                     	;# 
   118  0018                     	;# 
   119  0019                     	;# 
   120  001A                     	;# 
   121  001F                     	;# 
   122  0081                     	;# 
   123  0085                     	;# 
   124  0086                     	;# 
   125  008C                     	;# 
   126  008E                     	;# 
   127  0092                     	;# 
   128  0098                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009F                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  008C                     	;# 
   163  008E                     	;# 
   164  0092                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009A                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009F                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001F                     	;# 
   196  0081                     	;# 
   197  0085                     	;# 
   198  0086                     	;# 
   199  008C                     	;# 
   200  008E                     	;# 
   201  0092                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009F                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000E                     	;# 
   220  000E                     	;# 
   221  000F                     	;# 
   222  0010                     	;# 
   223  0011                     	;# 
   224  0012                     	;# 
   225  0015                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001F                     	;# 
   233  0081                     	;# 
   234  0085                     	;# 
   235  0086                     	;# 
   236  008C                     	;# 
   237  008E                     	;# 
   238  0092                     	;# 
   239  0098                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009F                     	;# 
   246  0006                     _PORTBbits	set	6
   247  0006                     _PORTB	set	6
   248  0005                     _PORTAbits	set	5
   249  001F                     _CMCON	set	31
   250  000B                     _INTCONbits	set	11
   251  0081                     _OPTION_REG	set	129
   252  0081                     _OPTION_REGbits	set	129
   253  0086                     _TRISB	set	134
   254  0085                     _TRISA	set	133
   255                           
   256                           	psect	cinit
   257  07F5                     start_initialization:	
   258                           ; #config settings
   259                           
   260  07F5                     __initialization:
   261                           
   262                           ; Clear objects allocated to BANK0
   263  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   264  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   265  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   266  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   267  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   268  07FA  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   269  07FB  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   270  07FC  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   271  07FD  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   272  07FE                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275  07FE                     __end_of__initialization:
   276  07FE  0183               	clrf	3
   277  07FF  2D19               	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	bssBANK0
   280  0020                     __pbssBANK0:
   281  0020                     _formatted_time:
   282  0020                     	ds	3
   283  0023                     _time_ms:
   284  0023                     	ds	2
   285  0025                     _is_timer_work:
   286  0025                     	ds	1
   287  0026                     _Button:
   288  0026                     	ds	1
   289                           
   290                           	psect	cstackCOMMON
   291  0070                     __pcstackCOMMON:
   292  0070                     ?_reset_stopwatch:
   293  0070                     ??_reset_stopwatch:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_update_disp:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_handle_btn_pressing:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ??_handle_btn_pressing:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_get_btn_pressed:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_update_time_counter:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ??_update_time_counter:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_stop_stopwatch:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ??_stop_stopwatch:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_start_stopwatch:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ??_start_stopwatch:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_configure:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ??_configure:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_main:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_is_btn_bounce:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ??_is_btn_bounce:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_format_time:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_set_disp_digit_value:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ??_set_disp_digit_value:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?___awdiv:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?___awmod:	
   354                           ; 2 bytes @ 0x0
   355                           
   356  0070                     ?___lwdiv:	
   357                           ; 2 bytes @ 0x0
   358                           
   359  0070                     is_btn_bounce@btn:	
   360                           ; 2 bytes @ 0x0
   361                           
   362  0070                     ___awdiv@divisor:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ___awmod@divisor:	
   366                           ; 2 bytes @ 0x0
   367                           
   368  0070                     ___lwdiv@divisor:	
   369                           ; 2 bytes @ 0x0
   370                           
   371                           
   372                           ; 2 bytes @ 0x0
   373  0070                     	ds	1
   374  0071                     is_btn_bounce@is_bounce:
   375                           
   376                           ; 1 bytes @ 0x1
   377  0071                     	ds	1
   378  0072                     handle_btn_pressing@btn:
   379  0072                     set_disp_digit_value@value:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0072                     is_btn_bounce@i:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0072                     ___awdiv@dividend:	
   386                           ; 2 bytes @ 0x2
   387                           
   388  0072                     ___awmod@dividend:	
   389                           ; 2 bytes @ 0x2
   390                           
   391  0072                     ___lwdiv@dividend:	
   392                           ; 2 bytes @ 0x2
   393                           
   394                           
   395                           ; 2 bytes @ 0x2
   396  0072                     	ds	2
   397  0074                     ??_get_btn_pressed:
   398  0074                     ??___awdiv:	
   399                           ; 1 bytes @ 0x4
   400                           
   401  0074                     ??___awmod:	
   402                           ; 1 bytes @ 0x4
   403                           
   404  0074                     ??___lwdiv:	
   405                           ; 1 bytes @ 0x4
   406                           
   407                           
   408                           ; 1 bytes @ 0x4
   409  0074                     	ds	1
   410  0075                     get_btn_pressed@btn:
   411  0075                     ___awdiv@counter:	
   412                           ; 1 bytes @ 0x5
   413                           
   414  0075                     ___awmod@counter:	
   415                           ; 1 bytes @ 0x5
   416                           
   417  0075                     ___lwdiv@quotient:	
   418                           ; 1 bytes @ 0x5
   419                           
   420                           
   421                           ; 2 bytes @ 0x5
   422  0075                     	ds	1
   423  0076                     ___awdiv@sign:
   424  0076                     ___awmod@sign:	
   425                           ; 1 bytes @ 0x6
   426                           
   427                           
   428                           ; 1 bytes @ 0x6
   429  0076                     	ds	1
   430  0077                     ___lwdiv@counter:
   431  0077                     ___awdiv@quotient:	
   432                           ; 1 bytes @ 0x7
   433                           
   434                           
   435                           ; 2 bytes @ 0x7
   436  0077                     	ds	1
   437  0078                     ?___lwmod:
   438  0078                     ___lwmod@divisor:	
   439                           ; 2 bytes @ 0x8
   440                           
   441                           
   442                           ; 2 bytes @ 0x8
   443  0078                     	ds	2
   444  007A                     ___lwmod@dividend:
   445                           
   446                           ; 2 bytes @ 0xA
   447  007A                     	ds	2
   448  007C                     ??___lwmod:
   449                           
   450                           ; 1 bytes @ 0xC
   451  007C                     	ds	1
   452  007D                     ___lwmod@counter:
   453                           
   454                           ; 1 bytes @ 0xD
   455  007D                     	ds	1
   456  007E                     ??_main:
   457                           
   458                           	psect	cstackBANK0
   459  0027                     __pcstackBANK0:	
   460                           ; 1 bytes @ 0xE
   461                           
   462  0027                     ??_format_time:
   463                           
   464                           ; 1 bytes @ 0x0
   465  0027                     	ds	3
   466  002A                     format_time@cashed_value:
   467                           
   468                           ; 1 bytes @ 0x3
   469  002A                     	ds	1
   470  002B                     ??_update_disp:
   471                           
   472                           ; 1 bytes @ 0x4
   473  002B                     	ds	1
   474                           
   475                           	psect	maintext
   476  0519                     __pmaintext:	
   477 ;;
   478 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   479 ;;
   480 ;; *************** function _main *****************
   481 ;; Defined at:
   482 ;;		line 33 in file "main.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      void 
   489 ;; Registers used:
   490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   491 ;; Tracked objects:
   492 ;;		On entry : B00/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   496 ;;      Params:         0       0       0       0
   497 ;;      Locals:         0       0       0       0
   498 ;;      Temps:          0       0       0       0
   499 ;;      Totals:         0       0       0       0
   500 ;;Total ram usage:        0 bytes
   501 ;; Hardware stack levels required when called: 3
   502 ;; This function calls:
   503 ;;		_configure
   504 ;;		_get_btn_pressed
   505 ;;		_handle_btn_pressing
   506 ;;		_reset_stopwatch
   507 ;;		_update_disp
   508 ;;		_update_time_counter
   509 ;; This function is called by:
   510 ;;		Startup code after reset
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           
   515                           ;psect for function _main
   516  0519                     _main:
   517  0519                     l1256:	
   518                           ;incstack = 0
   519                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   520                           
   521  0519  2521               	fcall	_configure
   522  051A  2511               	fcall	_reset_stopwatch
   523  051B                     l1258:
   524  051B  258B               	fcall	_update_disp
   525  051C                     l1260:
   526  051C  25FE               	fcall	_get_btn_pressed
   527  051D  2532               	fcall	_handle_btn_pressing
   528  051E                     l1262:
   529  051E  254E               	fcall	_update_time_counter
   530  051F  2D1B               	goto	l1258
   531  0520  2800               	ljmp	start
   532  0521                     __end_of_main:
   533                           
   534                           	psect	text1
   535  054E                     __ptext1:	
   536 ;; *************** function _update_time_counter *****************
   537 ;; Defined at:
   538 ;;		line 48 in file "stopwatch.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   552 ;;      Params:         0       0       0       0
   553 ;;      Locals:         0       0       0       0
   554 ;;      Temps:          0       0       0       0
   555 ;;      Totals:         0       0       0       0
   556 ;;Total ram usage:        0 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_main
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           
   566                           ;psect for function _update_time_counter
   567  054E                     _update_time_counter:
   568  054E                     l1250:	
   569                           ;incstack = 0
   570                           ; Regs used in _update_time_counter: [wreg+status,2+status,0]
   571                           
   572                           
   573                           ;stopwatch.c: 50:     if (is_timer_work)
   574  054E  1283               	bcf	3,5	;RP0=0, select bank0
   575  054F  1303               	bcf	3,6	;RP1=0, select bank0
   576  0550  0825               	movf	_is_timer_work,w
   577  0551  1903               	btfsc	3,2
   578  0552  2D54               	goto	u751
   579  0553  2D55               	goto	u750
   580  0554                     u751:
   581  0554  2D6A               	goto	l93
   582  0555                     u750:
   583  0555                     l1252:
   584                           
   585                           ;stopwatch.c: 51:     {;stopwatch.c: 52:         if (time_ms > 60000)
   586  0555  30EA               	movlw	234
   587  0556  0224               	subwf	_time_ms+1,w
   588  0557  3061               	movlw	97
   589  0558  1903               	skipnz
   590  0559  0223               	subwf	_time_ms,w
   591  055A  1C03               	skipc
   592  055B  2D5D               	goto	u761
   593  055C  2D5E               	goto	u760
   594  055D                     u761:
   595  055D  2D64               	goto	l92
   596  055E                     u760:
   597  055E                     l1254:
   598                           
   599                           ;stopwatch.c: 53:             time_ms -= 60000;
   600  055E  3060               	movlw	96
   601  055F  02A3               	subwf	_time_ms,f
   602  0560  30EA               	movlw	234
   603  0561  1C03               	skipc
   604  0562  03A4               	decf	_time_ms+1,f
   605  0563  02A4               	subwf	_time_ms+1,f
   606  0564                     l92:
   607                           
   608                           ;stopwatch.c: 54:         time_ms += 16;
   609  0564  3010               	movlw	16
   610  0565  07A3               	addwf	_time_ms,f
   611  0566  1803               	skipnc
   612  0567  0AA4               	incf	_time_ms+1,f
   613  0568  3000               	movlw	0
   614  0569  07A4               	addwf	_time_ms+1,f
   615  056A                     l93:
   616  056A  0008               	return
   617  056B                     __end_of_update_time_counter:
   618                           
   619                           	psect	text2
   620  058B                     __ptext2:	
   621 ;; *************** function _update_disp *****************
   622 ;; Defined at:
   623 ;;		line 52 in file "display.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      void 
   630 ;; Registers used:
   631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   637 ;;      Params:         0       0       0       0
   638 ;;      Locals:         0       0       0       0
   639 ;;      Temps:          0       1       0       0
   640 ;;      Totals:         0       1       0       0
   641 ;;Total ram usage:        1 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; Hardware stack levels required when called: 2
   644 ;; This function calls:
   645 ;;		_format_time
   646 ;;		_set_disp_digit_value
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652                           
   653                           ;psect for function _update_disp
   654  058B                     _update_disp:
   655  058B                     l1204:	
   656                           ;incstack = 0
   657                           ; Regs used in _update_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   658                           
   659                           
   660                           ;display.c: 54:     format_time();
   661  058B  2681               	fcall	_format_time
   662  058C                     l1206:
   663                           
   664                           ;display.c: 56:     set_disp_digit_value(formatted_time.ms);
   665  058C  1283               	bcf	3,5	;RP0=0, select bank0
   666  058D  1303               	bcf	3,6	;RP1=0, select bank0
   667  058E  0820               	movf	_formatted_time,w
   668  058F  2731               	fcall	_set_disp_digit_value
   669  0590                     l1208:
   670                           
   671                           ;display.c: 57:     PORTAbits.RA0 = 1;
   672  0590  1283               	bcf	3,5	;RP0=0, select bank0
   673  0591  1303               	bcf	3,6	;RP1=0, select bank0
   674  0592  1405               	bsf	5,0	;volatile
   675  0593                     l1210:
   676                           
   677                           ;display.c: 58:     _delay((unsigned long)((1)*(4000000/4000.0)));
   678  0593  30C7               	movlw	199
   679  0594  1283               	bcf	3,5	;RP0=0, select bank0
   680  0595  1303               	bcf	3,6	;RP1=0, select bank0
   681  0596  00AB               	movwf	??_update_disp
   682  0597                     u777:
   683  0597  2D98               	nop2
   684  0598  0BAB               	decfsz	??_update_disp,f
   685  0599  2D97               	goto	u777
   686  059A  2D9B               	nop2
   687  059B  0000               	nop
   688  059C                     l1212:
   689                           
   690                           ;display.c: 59:     PORTAbits.RA0 = 0;
   691  059C  1283               	bcf	3,5	;RP0=0, select bank0
   692  059D  1303               	bcf	3,6	;RP1=0, select bank0
   693  059E  1005               	bcf	5,0	;volatile
   694  059F                     l1214:
   695                           
   696                           ;display.c: 61:     set_disp_digit_value(formatted_time.sec_1_digit);
   697  059F  0821               	movf	_formatted_time+1,w
   698  05A0  2731               	fcall	_set_disp_digit_value
   699  05A1                     l1216:
   700                           
   701                           ;display.c: 62:     PORTAbits.RA1 = 1;
   702  05A1  1283               	bcf	3,5	;RP0=0, select bank0
   703  05A2  1303               	bcf	3,6	;RP1=0, select bank0
   704  05A3  1485               	bsf	5,1	;volatile
   705  05A4                     l1218:
   706                           
   707                           ;display.c: 63:     PORTBbits.RB7 = 0;
   708  05A4  1386               	bcf	6,7	;volatile
   709  05A5                     l1220:
   710                           
   711                           ;display.c: 64:     _delay((unsigned long)((1)*(4000000/4000.0)));
   712  05A5  30C7               	movlw	199
   713  05A6  1283               	bcf	3,5	;RP0=0, select bank0
   714  05A7  1303               	bcf	3,6	;RP1=0, select bank0
   715  05A8  00AB               	movwf	??_update_disp
   716  05A9                     u787:
   717  05A9  2DAA               	nop2
   718  05AA  0BAB               	decfsz	??_update_disp,f
   719  05AB  2DA9               	goto	u787
   720  05AC  2DAD               	nop2
   721  05AD  0000               	nop
   722  05AE                     l1222:
   723                           
   724                           ;display.c: 65:     PORTAbits.RA1 = 0;
   725  05AE  1283               	bcf	3,5	;RP0=0, select bank0
   726  05AF  1303               	bcf	3,6	;RP1=0, select bank0
   727  05B0  1085               	bcf	5,1	;volatile
   728  05B1                     l1224:
   729                           
   730                           ;display.c: 66:     PORTBbits.RB7 = 1;
   731  05B1  1786               	bsf	6,7	;volatile
   732  05B2                     l1226:
   733                           
   734                           ;display.c: 68:     set_disp_digit_value(formatted_time.sec_2_digit);
   735  05B2  0822               	movf	_formatted_time+2,w
   736  05B3  2731               	fcall	_set_disp_digit_value
   737  05B4                     l1228:
   738                           
   739                           ;display.c: 69:     PORTAbits.RA2 = 1;
   740  05B4  1283               	bcf	3,5	;RP0=0, select bank0
   741  05B5  1303               	bcf	3,6	;RP1=0, select bank0
   742  05B6  1505               	bsf	5,2	;volatile
   743  05B7                     l1230:
   744                           
   745                           ;display.c: 70:     _delay((unsigned long)((1)*(4000000/4000.0)));
   746  05B7  30C7               	movlw	199
   747  05B8  1283               	bcf	3,5	;RP0=0, select bank0
   748  05B9  1303               	bcf	3,6	;RP1=0, select bank0
   749  05BA  00AB               	movwf	??_update_disp
   750  05BB                     u797:
   751  05BB  2DBC               	nop2
   752  05BC  0BAB               	decfsz	??_update_disp,f
   753  05BD  2DBB               	goto	u797
   754  05BE  2DBF               	nop2
   755  05BF  0000               	nop
   756  05C0                     l1232:
   757                           
   758                           ;display.c: 71:     PORTAbits.RA2 = 0;
   759  05C0  1283               	bcf	3,5	;RP0=0, select bank0
   760  05C1  1303               	bcf	3,6	;RP1=0, select bank0
   761  05C2  1105               	bcf	5,2	;volatile
   762  05C3                     l124:
   763  05C3  0008               	return
   764  05C4                     __end_of_update_disp:
   765                           
   766                           	psect	text3
   767  0731                     __ptext3:	
   768 ;; *************** function _set_disp_digit_value *****************
   769 ;; Defined at:
   770 ;;		line 12 in file "display.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  value           1    wreg     unsigned char 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  value           1    2[COMMON] unsigned char 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   784 ;;      Params:         0       0       0       0
   785 ;;      Locals:         1       0       0       0
   786 ;;      Temps:          2       0       0       0
   787 ;;      Totals:         3       0       0       0
   788 ;;Total ram usage:        3 bytes
   789 ;; Hardware stack levels used: 1
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_update_disp
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           
   798                           ;psect for function _set_disp_digit_value
   799  0731                     _set_disp_digit_value:
   800                           
   801                           ;incstack = 0
   802                           ; Regs used in _set_disp_digit_value: [wreg-fsr0h+status,2+status,0]
   803                           ;set_disp_digit_value@value stored from wreg
   804  0731  00F2               	movwf	set_disp_digit_value@value
   805  0732                     l1174:
   806                           
   807                           ;display.c: 12: static void set_disp_digit_value(uint8_t value);display.c: 13: {;display
      +                          .c: 14:     switch(value)
   808  0732  2F65               	goto	l1198
   809  0733                     l1176:
   810                           
   811                           ;display.c: 17:             PORTB = 0xC0;
   812  0733  30C0               	movlw	192
   813  0734  1283               	bcf	3,5	;RP0=0, select bank0
   814  0735  1303               	bcf	3,6	;RP1=0, select bank0
   815  0736  0086               	movwf	6	;volatile
   816                           
   817                           ;display.c: 18:             break;
   818  0737  2F8D               	goto	l121
   819  0738                     l1178:
   820                           
   821                           ;display.c: 20:             PORTB = 0xF9;
   822  0738  30F9               	movlw	249
   823  0739  1283               	bcf	3,5	;RP0=0, select bank0
   824  073A  1303               	bcf	3,6	;RP1=0, select bank0
   825  073B  0086               	movwf	6	;volatile
   826                           
   827                           ;display.c: 21:             break;
   828  073C  2F8D               	goto	l121
   829  073D                     l1180:
   830                           
   831                           ;display.c: 23:             PORTB = 0xA4;
   832  073D  30A4               	movlw	164
   833  073E  1283               	bcf	3,5	;RP0=0, select bank0
   834  073F  1303               	bcf	3,6	;RP1=0, select bank0
   835  0740  0086               	movwf	6	;volatile
   836                           
   837                           ;display.c: 24:             break;
   838  0741  2F8D               	goto	l121
   839  0742                     l1182:
   840                           
   841                           ;display.c: 26:             PORTB = 0xB0;
   842  0742  30B0               	movlw	176
   843  0743  1283               	bcf	3,5	;RP0=0, select bank0
   844  0744  1303               	bcf	3,6	;RP1=0, select bank0
   845  0745  0086               	movwf	6	;volatile
   846                           
   847                           ;display.c: 27:             break;
   848  0746  2F8D               	goto	l121
   849  0747                     l1184:
   850                           
   851                           ;display.c: 29:             PORTB = 0x99;
   852  0747  3099               	movlw	153
   853  0748  1283               	bcf	3,5	;RP0=0, select bank0
   854  0749  1303               	bcf	3,6	;RP1=0, select bank0
   855  074A  0086               	movwf	6	;volatile
   856                           
   857                           ;display.c: 30:             break;
   858  074B  2F8D               	goto	l121
   859  074C                     l1186:
   860                           
   861                           ;display.c: 32:             PORTB = 0x92;
   862  074C  3092               	movlw	146
   863  074D  1283               	bcf	3,5	;RP0=0, select bank0
   864  074E  1303               	bcf	3,6	;RP1=0, select bank0
   865  074F  0086               	movwf	6	;volatile
   866                           
   867                           ;display.c: 33:             break;
   868  0750  2F8D               	goto	l121
   869  0751                     l1188:
   870                           
   871                           ;display.c: 35:             PORTB = 0x82;
   872  0751  3082               	movlw	130
   873  0752  1283               	bcf	3,5	;RP0=0, select bank0
   874  0753  1303               	bcf	3,6	;RP1=0, select bank0
   875  0754  0086               	movwf	6	;volatile
   876                           
   877                           ;display.c: 36:             break;
   878  0755  2F8D               	goto	l121
   879  0756                     l1190:
   880                           
   881                           ;display.c: 38:             PORTB = 0xF8;
   882  0756  30F8               	movlw	248
   883  0757  1283               	bcf	3,5	;RP0=0, select bank0
   884  0758  1303               	bcf	3,6	;RP1=0, select bank0
   885  0759  0086               	movwf	6	;volatile
   886                           
   887                           ;display.c: 39:             break;
   888  075A  2F8D               	goto	l121
   889  075B                     l1192:
   890                           
   891                           ;display.c: 41:             PORTB = 0x80;
   892  075B  3080               	movlw	128
   893  075C  1283               	bcf	3,5	;RP0=0, select bank0
   894  075D  1303               	bcf	3,6	;RP1=0, select bank0
   895  075E  0086               	movwf	6	;volatile
   896                           
   897                           ;display.c: 42:             break;
   898  075F  2F8D               	goto	l121
   899  0760                     l1194:
   900                           
   901                           ;display.c: 44:             PORTB = 0x90;
   902  0760  3090               	movlw	144
   903  0761  1283               	bcf	3,5	;RP0=0, select bank0
   904  0762  1303               	bcf	3,6	;RP1=0, select bank0
   905  0763  0086               	movwf	6	;volatile
   906                           
   907                           ;display.c: 45:             break;
   908  0764  2F8D               	goto	l121
   909  0765                     l1198:
   910  0765  0872               	movf	set_disp_digit_value@value,w
   911  0766  00F0               	movwf	??_set_disp_digit_value
   912  0767  01F1               	clrf	??_set_disp_digit_value+1
   913                           
   914                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   915                           ; Switch size 1, requested type "simple"
   916                           ; Number of cases is 1, Range of values is 0 to 0
   917                           ; switch strategies available:
   918                           ; Name         Instructions Cycles
   919                           ; simple_byte            4     3 (average)
   920                           ; direct_byte            7     6 (fixed)
   921                           ; jumptable            260     6 (fixed)
   922                           ;	Chosen strategy is simple_byte
   923  0768  0871               	movf	??_set_disp_digit_value+1,w
   924  0769  3A00               	xorlw	0	; case 0
   925  076A  1903               	skipnz
   926  076B  2F6D               	goto	l1304
   927  076C  2F8D               	goto	l121
   928  076D                     l1304:
   929                           
   930                           ; Switch size 1, requested type "simple"
   931                           ; Number of cases is 10, Range of values is 0 to 9
   932                           ; switch strategies available:
   933                           ; Name         Instructions Cycles
   934                           ; direct_byte           16     6 (fixed)
   935                           ; simple_byte           31    16 (average)
   936                           ; jumptable            260     6 (fixed)
   937                           ;	Chosen strategy is simple_byte
   938  076D  0870               	movf	??_set_disp_digit_value,w
   939  076E  3A00               	xorlw	0	; case 0
   940  076F  1903               	skipnz
   941  0770  2F33               	goto	l1176
   942  0771  3A01               	xorlw	1	; case 1
   943  0772  1903               	skipnz
   944  0773  2F38               	goto	l1178
   945  0774  3A03               	xorlw	3	; case 2
   946  0775  1903               	skipnz
   947  0776  2F3D               	goto	l1180
   948  0777  3A01               	xorlw	1	; case 3
   949  0778  1903               	skipnz
   950  0779  2F42               	goto	l1182
   951  077A  3A07               	xorlw	7	; case 4
   952  077B  1903               	skipnz
   953  077C  2F47               	goto	l1184
   954  077D  3A01               	xorlw	1	; case 5
   955  077E  1903               	skipnz
   956  077F  2F4C               	goto	l1186
   957  0780  3A03               	xorlw	3	; case 6
   958  0781  1903               	skipnz
   959  0782  2F51               	goto	l1188
   960  0783  3A01               	xorlw	1	; case 7
   961  0784  1903               	skipnz
   962  0785  2F56               	goto	l1190
   963  0786  3A0F               	xorlw	15	; case 8
   964  0787  1903               	skipnz
   965  0788  2F5B               	goto	l1192
   966  0789  3A01               	xorlw	1	; case 9
   967  078A  1903               	skipnz
   968  078B  2F60               	goto	l1194
   969  078C  2F8D               	goto	l121
   970  078D                     l121:
   971  078D  0008               	return
   972  078E                     __end_of_set_disp_digit_value:
   973                           
   974                           	psect	text4
   975  0681                     __ptext4:	
   976 ;; *************** function _format_time *****************
   977 ;; Defined at:
   978 ;;		line 39 in file "stopwatch.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;		None
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  cashed_value    1    3[BANK0 ] unsigned char 
   983 ;; Return value:  Size  Location     Type
   984 ;;                  1    wreg      void 
   985 ;; Registers used:
   986 ;;		wreg, status,2, status,0, pclath, cstack
   987 ;; Tracked objects:
   988 ;;		On entry : 0/0
   989 ;;		On exit  : 0/0
   990 ;;		Unchanged: 0/0
   991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   992 ;;      Params:         0       0       0       0
   993 ;;      Locals:         0       1       0       0
   994 ;;      Temps:          0       3       0       0
   995 ;;      Totals:         0       4       0       0
   996 ;;Total ram usage:        4 bytes
   997 ;; Hardware stack levels used: 1
   998 ;; Hardware stack levels required when called: 1
   999 ;; This function calls:
  1000 ;;		___awdiv
  1001 ;;		___awmod
  1002 ;;		___lwdiv
  1003 ;;		___lwmod
  1004 ;; This function is called by:
  1005 ;;		_update_disp
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _format_time
  1011  0681                     _format_time:
  1012  0681                     l1172:	
  1013                           ;incstack = 0
  1014                           ; Regs used in _format_time: [wreg+status,2+status,0+pclath+cstack]
  1015                           
  1016                           
  1017                           ;stopwatch.c: 41:     formatted_time.ms = time_ms / 100 % 10;
  1018  0681  300A               	movlw	10
  1019  0682  00F8               	movwf	___lwmod@divisor
  1020  0683  3000               	movlw	0
  1021  0684  00F9               	movwf	___lwmod@divisor+1
  1022  0685  3064               	movlw	100
  1023  0686  00F0               	movwf	___lwdiv@divisor
  1024  0687  3000               	movlw	0
  1025  0688  00F1               	movwf	___lwdiv@divisor+1
  1026  0689  1283               	bcf	3,5	;RP0=0, select bank0
  1027  068A  1303               	bcf	3,6	;RP1=0, select bank0
  1028  068B  0824               	movf	_time_ms+1,w
  1029  068C  00F3               	movwf	___lwdiv@dividend+1
  1030  068D  0823               	movf	_time_ms,w
  1031  068E  00F2               	movwf	___lwdiv@dividend
  1032  068F  263D               	fcall	___lwdiv
  1033  0690  0871               	movf	?___lwdiv+1,w
  1034  0691  00FB               	movwf	___lwmod@dividend+1
  1035  0692  0870               	movf	?___lwdiv,w
  1036  0693  00FA               	movwf	___lwmod@dividend
  1037  0694  25C4               	fcall	___lwmod
  1038  0695  0878               	movf	?___lwmod,w
  1039  0696  1283               	bcf	3,5	;RP0=0, select bank0
  1040  0697  1303               	bcf	3,6	;RP1=0, select bank0
  1041  0698  00A7               	movwf	??_format_time
  1042  0699  0827               	movf	??_format_time,w
  1043  069A  00A0               	movwf	_formatted_time
  1044                           
  1045                           ;stopwatch.c: 42:     uint8_t cashed_value = time_ms / 1000 % 60;
  1046  069B  303C               	movlw	60
  1047  069C  00F8               	movwf	___lwmod@divisor
  1048  069D  3000               	movlw	0
  1049  069E  00F9               	movwf	___lwmod@divisor+1
  1050  069F  30E8               	movlw	232
  1051  06A0  00F0               	movwf	___lwdiv@divisor
  1052  06A1  3003               	movlw	3
  1053  06A2  00F1               	movwf	___lwdiv@divisor+1
  1054  06A3  0824               	movf	_time_ms+1,w
  1055  06A4  00F3               	movwf	___lwdiv@dividend+1
  1056  06A5  0823               	movf	_time_ms,w
  1057  06A6  00F2               	movwf	___lwdiv@dividend
  1058  06A7  263D               	fcall	___lwdiv
  1059  06A8  0871               	movf	?___lwdiv+1,w
  1060  06A9  00FB               	movwf	___lwmod@dividend+1
  1061  06AA  0870               	movf	?___lwdiv,w
  1062  06AB  00FA               	movwf	___lwmod@dividend
  1063  06AC  25C4               	fcall	___lwmod
  1064  06AD  0878               	movf	?___lwmod,w
  1065  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1066  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1067  06B0  00A7               	movwf	??_format_time
  1068  06B1  0827               	movf	??_format_time,w
  1069  06B2  00AA               	movwf	format_time@cashed_value
  1070                           
  1071                           ;stopwatch.c: 43:     formatted_time.sec_1_digit = cashed_value % 10;
  1072  06B3  300A               	movlw	10
  1073  06B4  00F0               	movwf	___awmod@divisor
  1074  06B5  3000               	movlw	0
  1075  06B6  00F1               	movwf	___awmod@divisor+1
  1076  06B7  082A               	movf	format_time@cashed_value,w
  1077  06B8  00A7               	movwf	??_format_time
  1078  06B9  01A8               	clrf	??_format_time+1
  1079  06BA  0827               	movf	??_format_time,w
  1080  06BB  00F2               	movwf	___awmod@dividend
  1081  06BC  0828               	movf	??_format_time+1,w
  1082  06BD  00F3               	movwf	___awmod@dividend+1
  1083  06BE  26D8               	fcall	___awmod
  1084  06BF  0870               	movf	?___awmod,w
  1085  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1086  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1087  06C2  00A9               	movwf	??_format_time+2
  1088  06C3  0829               	movf	??_format_time+2,w
  1089  06C4  00A1               	movwf	_formatted_time+1
  1090                           
  1091                           ;stopwatch.c: 44:     formatted_time.sec_2_digit = (uint8_t)(cashed_value / 10);
  1092  06C5  300A               	movlw	10
  1093  06C6  00F0               	movwf	___awdiv@divisor
  1094  06C7  3000               	movlw	0
  1095  06C8  00F1               	movwf	___awdiv@divisor+1
  1096  06C9  082A               	movf	format_time@cashed_value,w
  1097  06CA  00A7               	movwf	??_format_time
  1098  06CB  01A8               	clrf	??_format_time+1
  1099  06CC  0827               	movf	??_format_time,w
  1100  06CD  00F2               	movwf	___awdiv@dividend
  1101  06CE  0828               	movf	??_format_time+1,w
  1102  06CF  00F3               	movwf	___awdiv@dividend+1
  1103  06D0  278E               	fcall	___awdiv
  1104  06D1  0870               	movf	?___awdiv,w
  1105  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1106  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1107  06D4  00A9               	movwf	??_format_time+2
  1108  06D5  0829               	movf	??_format_time+2,w
  1109  06D6  00A2               	movwf	_formatted_time+2
  1110  06D7                     l88:
  1111  06D7  0008               	return
  1112  06D8                     __end_of_format_time:
  1113                           
  1114                           	psect	text5
  1115  05C4                     __ptext5:	
  1116 ;; *************** function ___lwmod *****************
  1117 ;; Defined at:
  1118 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;  divisor         2    8[COMMON] unsigned int 
  1121 ;;  dividend        2   10[COMMON] unsigned int 
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;  counter         1   13[COMMON] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  2    8[COMMON] unsigned int 
  1126 ;; Registers used:
  1127 ;;		wreg, status,2, status,0
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1133 ;;      Params:         4       0       0       0
  1134 ;;      Locals:         1       0       0       0
  1135 ;;      Temps:          1       0       0       0
  1136 ;;      Totals:         6       0       0       0
  1137 ;;Total ram usage:        6 bytes
  1138 ;; Hardware stack levels used: 1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_format_time
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function ___lwmod
  1148  05C4                     ___lwmod:
  1149  05C4                     l1142:	
  1150                           ;incstack = 0
  1151                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1152                           
  1153  05C4  0878               	movf	___lwmod@divisor,w
  1154  05C5  0479               	iorwf	___lwmod@divisor+1,w
  1155  05C6  1903               	btfsc	3,2
  1156  05C7  2DC9               	goto	u691
  1157  05C8  2DCA               	goto	u690
  1158  05C9                     u691:
  1159  05C9  2DF9               	goto	l1160
  1160  05CA                     u690:
  1161  05CA                     l1144:
  1162  05CA  01FD               	clrf	___lwmod@counter
  1163  05CB  0AFD               	incf	___lwmod@counter,f
  1164  05CC  2DD8               	goto	l1150
  1165  05CD                     l1146:
  1166  05CD  3001               	movlw	1
  1167  05CE                     u705:
  1168  05CE  1003               	clrc
  1169  05CF  0DF8               	rlf	___lwmod@divisor,f
  1170  05D0  0DF9               	rlf	___lwmod@divisor+1,f
  1171  05D1  3EFF               	addlw	-1
  1172  05D2  1D03               	skipz
  1173  05D3  2DCE               	goto	u705
  1174  05D4                     l1148:
  1175  05D4  3001               	movlw	1
  1176  05D5  00FC               	movwf	??___lwmod
  1177  05D6  087C               	movf	??___lwmod,w
  1178  05D7  07FD               	addwf	___lwmod@counter,f
  1179  05D8                     l1150:
  1180  05D8  1FF9               	btfss	___lwmod@divisor+1,7
  1181  05D9  2DDB               	goto	u711
  1182  05DA  2DDC               	goto	u710
  1183  05DB                     u711:
  1184  05DB  2DCD               	goto	l1146
  1185  05DC                     u710:
  1186  05DC                     l1152:
  1187  05DC  0879               	movf	___lwmod@divisor+1,w
  1188  05DD  027B               	subwf	___lwmod@dividend+1,w
  1189  05DE  1D03               	skipz
  1190  05DF  2DE2               	goto	u725
  1191  05E0  0878               	movf	___lwmod@divisor,w
  1192  05E1  027A               	subwf	___lwmod@dividend,w
  1193  05E2                     u725:
  1194  05E2  1C03               	skipc
  1195  05E3  2DE5               	goto	u721
  1196  05E4  2DE6               	goto	u720
  1197  05E5                     u721:
  1198  05E5  2DEC               	goto	l1156
  1199  05E6                     u720:
  1200  05E6                     l1154:
  1201  05E6  0878               	movf	___lwmod@divisor,w
  1202  05E7  02FA               	subwf	___lwmod@dividend,f
  1203  05E8  0879               	movf	___lwmod@divisor+1,w
  1204  05E9  1C03               	skipc
  1205  05EA  03FB               	decf	___lwmod@dividend+1,f
  1206  05EB  02FB               	subwf	___lwmod@dividend+1,f
  1207  05EC                     l1156:
  1208  05EC  3001               	movlw	1
  1209  05ED                     u735:
  1210  05ED  1003               	clrc
  1211  05EE  0CF9               	rrf	___lwmod@divisor+1,f
  1212  05EF  0CF8               	rrf	___lwmod@divisor,f
  1213  05F0  3EFF               	addlw	-1
  1214  05F1  1D03               	skipz
  1215  05F2  2DED               	goto	u735
  1216  05F3                     l1158:
  1217  05F3  3001               	movlw	1
  1218  05F4  02FD               	subwf	___lwmod@counter,f
  1219  05F5  1D03               	btfss	3,2
  1220  05F6  2DF8               	goto	u741
  1221  05F7  2DF9               	goto	u740
  1222  05F8                     u741:
  1223  05F8  2DDC               	goto	l1152
  1224  05F9                     u740:
  1225  05F9                     l1160:
  1226  05F9  087B               	movf	___lwmod@dividend+1,w
  1227  05FA  00F9               	movwf	?___lwmod+1
  1228  05FB  087A               	movf	___lwmod@dividend,w
  1229  05FC  00F8               	movwf	?___lwmod
  1230  05FD                     l492:
  1231  05FD  0008               	return
  1232  05FE                     __end_of___lwmod:
  1233                           
  1234                           	psect	text6
  1235  063D                     __ptext6:	
  1236 ;; *************** function ___lwdiv *****************
  1237 ;; Defined at:
  1238 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  divisor         2    0[COMMON] unsigned int 
  1241 ;;  dividend        2    2[COMMON] unsigned int 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  quotient        2    5[COMMON] unsigned int 
  1244 ;;  counter         1    7[COMMON] unsigned char 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  2    0[COMMON] unsigned int 
  1247 ;; Registers used:
  1248 ;;		wreg, status,2, status,0
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1254 ;;      Params:         4       0       0       0
  1255 ;;      Locals:         3       0       0       0
  1256 ;;      Temps:          1       0       0       0
  1257 ;;      Totals:         8       0       0       0
  1258 ;;Total ram usage:        8 bytes
  1259 ;; Hardware stack levels used: 1
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_format_time
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function ___lwdiv
  1269  063D                     ___lwdiv:
  1270  063D                     l1116:	
  1271                           ;incstack = 0
  1272                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1273                           
  1274  063D  01F5               	clrf	___lwdiv@quotient
  1275  063E  01F6               	clrf	___lwdiv@quotient+1
  1276  063F                     l1118:
  1277  063F  0870               	movf	___lwdiv@divisor,w
  1278  0640  0471               	iorwf	___lwdiv@divisor+1,w
  1279  0641  1903               	btfsc	3,2
  1280  0642  2E44               	goto	u621
  1281  0643  2E45               	goto	u620
  1282  0644                     u621:
  1283  0644  2E7C               	goto	l1138
  1284  0645                     u620:
  1285  0645                     l1120:
  1286  0645  01F7               	clrf	___lwdiv@counter
  1287  0646  0AF7               	incf	___lwdiv@counter,f
  1288  0647  2E53               	goto	l1126
  1289  0648                     l1122:
  1290  0648  3001               	movlw	1
  1291  0649                     u635:
  1292  0649  1003               	clrc
  1293  064A  0DF0               	rlf	___lwdiv@divisor,f
  1294  064B  0DF1               	rlf	___lwdiv@divisor+1,f
  1295  064C  3EFF               	addlw	-1
  1296  064D  1D03               	skipz
  1297  064E  2E49               	goto	u635
  1298  064F                     l1124:
  1299  064F  3001               	movlw	1
  1300  0650  00F4               	movwf	??___lwdiv
  1301  0651  0874               	movf	??___lwdiv,w
  1302  0652  07F7               	addwf	___lwdiv@counter,f
  1303  0653                     l1126:
  1304  0653  1FF1               	btfss	___lwdiv@divisor+1,7
  1305  0654  2E56               	goto	u641
  1306  0655  2E57               	goto	u640
  1307  0656                     u641:
  1308  0656  2E48               	goto	l1122
  1309  0657                     u640:
  1310  0657                     l1128:
  1311  0657  3001               	movlw	1
  1312  0658                     u655:
  1313  0658  1003               	clrc
  1314  0659  0DF5               	rlf	___lwdiv@quotient,f
  1315  065A  0DF6               	rlf	___lwdiv@quotient+1,f
  1316  065B  3EFF               	addlw	-1
  1317  065C  1D03               	skipz
  1318  065D  2E58               	goto	u655
  1319  065E  0871               	movf	___lwdiv@divisor+1,w
  1320  065F  0273               	subwf	___lwdiv@dividend+1,w
  1321  0660  1D03               	skipz
  1322  0661  2E64               	goto	u665
  1323  0662  0870               	movf	___lwdiv@divisor,w
  1324  0663  0272               	subwf	___lwdiv@dividend,w
  1325  0664                     u665:
  1326  0664  1C03               	skipc
  1327  0665  2E67               	goto	u661
  1328  0666  2E68               	goto	u660
  1329  0667                     u661:
  1330  0667  2E6F               	goto	l1134
  1331  0668                     u660:
  1332  0668                     l1130:
  1333  0668  0870               	movf	___lwdiv@divisor,w
  1334  0669  02F2               	subwf	___lwdiv@dividend,f
  1335  066A  0871               	movf	___lwdiv@divisor+1,w
  1336  066B  1C03               	skipc
  1337  066C  03F3               	decf	___lwdiv@dividend+1,f
  1338  066D  02F3               	subwf	___lwdiv@dividend+1,f
  1339  066E                     l1132:
  1340  066E  1475               	bsf	___lwdiv@quotient,0
  1341  066F                     l1134:
  1342  066F  3001               	movlw	1
  1343  0670                     u675:
  1344  0670  1003               	clrc
  1345  0671  0CF1               	rrf	___lwdiv@divisor+1,f
  1346  0672  0CF0               	rrf	___lwdiv@divisor,f
  1347  0673  3EFF               	addlw	-1
  1348  0674  1D03               	skipz
  1349  0675  2E70               	goto	u675
  1350  0676                     l1136:
  1351  0676  3001               	movlw	1
  1352  0677  02F7               	subwf	___lwdiv@counter,f
  1353  0678  1D03               	btfss	3,2
  1354  0679  2E7B               	goto	u681
  1355  067A  2E7C               	goto	u680
  1356  067B                     u681:
  1357  067B  2E57               	goto	l1128
  1358  067C                     u680:
  1359  067C                     l1138:
  1360  067C  0876               	movf	___lwdiv@quotient+1,w
  1361  067D  00F1               	movwf	?___lwdiv+1
  1362  067E  0875               	movf	___lwdiv@quotient,w
  1363  067F  00F0               	movwf	?___lwdiv
  1364  0680                     l482:
  1365  0680  0008               	return
  1366  0681                     __end_of___lwdiv:
  1367                           
  1368                           	psect	text7
  1369  06D8                     __ptext7:	
  1370 ;; *************** function ___awmod *****************
  1371 ;; Defined at:
  1372 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  divisor         2    0[COMMON] int 
  1375 ;;  dividend        2    2[COMMON] int 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  sign            1    6[COMMON] unsigned char 
  1378 ;;  counter         1    5[COMMON] unsigned char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  2    0[COMMON] int 
  1381 ;; Registers used:
  1382 ;;		wreg, status,2, status,0
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1388 ;;      Params:         4       0       0       0
  1389 ;;      Locals:         2       0       0       0
  1390 ;;      Temps:          1       0       0       0
  1391 ;;      Totals:         7       0       0       0
  1392 ;;Total ram usage:        7 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_format_time
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function ___awmod
  1403  06D8                     ___awmod:
  1404  06D8                     l1078:	
  1405                           ;incstack = 0
  1406                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1407                           
  1408  06D8  01F6               	clrf	___awmod@sign
  1409  06D9                     l1080:
  1410  06D9  1FF3               	btfss	___awmod@dividend+1,7
  1411  06DA  2EDC               	goto	u531
  1412  06DB  2EDD               	goto	u530
  1413  06DC                     u531:
  1414  06DC  2EE4               	goto	l1086
  1415  06DD                     u530:
  1416  06DD                     l1082:
  1417  06DD  09F2               	comf	___awmod@dividend,f
  1418  06DE  09F3               	comf	___awmod@dividend+1,f
  1419  06DF  0AF2               	incf	___awmod@dividend,f
  1420  06E0  1903               	skipnz
  1421  06E1  0AF3               	incf	___awmod@dividend+1,f
  1422  06E2                     l1084:
  1423  06E2  01F6               	clrf	___awmod@sign
  1424  06E3  0AF6               	incf	___awmod@sign,f
  1425  06E4                     l1086:
  1426  06E4  1FF1               	btfss	___awmod@divisor+1,7
  1427  06E5  2EE7               	goto	u541
  1428  06E6  2EE8               	goto	u540
  1429  06E7                     u541:
  1430  06E7  2EED               	goto	l1090
  1431  06E8                     u540:
  1432  06E8                     l1088:
  1433  06E8  09F0               	comf	___awmod@divisor,f
  1434  06E9  09F1               	comf	___awmod@divisor+1,f
  1435  06EA  0AF0               	incf	___awmod@divisor,f
  1436  06EB  1903               	skipnz
  1437  06EC  0AF1               	incf	___awmod@divisor+1,f
  1438  06ED                     l1090:
  1439  06ED  0870               	movf	___awmod@divisor,w
  1440  06EE  0471               	iorwf	___awmod@divisor+1,w
  1441  06EF  1903               	btfsc	3,2
  1442  06F0  2EF2               	goto	u551
  1443  06F1  2EF3               	goto	u550
  1444  06F2                     u551:
  1445  06F2  2F22               	goto	l1108
  1446  06F3                     u550:
  1447  06F3                     l1092:
  1448  06F3  01F5               	clrf	___awmod@counter
  1449  06F4  0AF5               	incf	___awmod@counter,f
  1450  06F5  2F01               	goto	l1098
  1451  06F6                     l1094:
  1452  06F6  3001               	movlw	1
  1453  06F7                     u565:
  1454  06F7  1003               	clrc
  1455  06F8  0DF0               	rlf	___awmod@divisor,f
  1456  06F9  0DF1               	rlf	___awmod@divisor+1,f
  1457  06FA  3EFF               	addlw	-1
  1458  06FB  1D03               	skipz
  1459  06FC  2EF7               	goto	u565
  1460  06FD                     l1096:
  1461  06FD  3001               	movlw	1
  1462  06FE  00F4               	movwf	??___awmod
  1463  06FF  0874               	movf	??___awmod,w
  1464  0700  07F5               	addwf	___awmod@counter,f
  1465  0701                     l1098:
  1466  0701  1FF1               	btfss	___awmod@divisor+1,7
  1467  0702  2F04               	goto	u571
  1468  0703  2F05               	goto	u570
  1469  0704                     u571:
  1470  0704  2EF6               	goto	l1094
  1471  0705                     u570:
  1472  0705                     l1100:
  1473  0705  0871               	movf	___awmod@divisor+1,w
  1474  0706  0273               	subwf	___awmod@dividend+1,w
  1475  0707  1D03               	skipz
  1476  0708  2F0B               	goto	u585
  1477  0709  0870               	movf	___awmod@divisor,w
  1478  070A  0272               	subwf	___awmod@dividend,w
  1479  070B                     u585:
  1480  070B  1C03               	skipc
  1481  070C  2F0E               	goto	u581
  1482  070D  2F0F               	goto	u580
  1483  070E                     u581:
  1484  070E  2F15               	goto	l1104
  1485  070F                     u580:
  1486  070F                     l1102:
  1487  070F  0870               	movf	___awmod@divisor,w
  1488  0710  02F2               	subwf	___awmod@dividend,f
  1489  0711  0871               	movf	___awmod@divisor+1,w
  1490  0712  1C03               	skipc
  1491  0713  03F3               	decf	___awmod@dividend+1,f
  1492  0714  02F3               	subwf	___awmod@dividend+1,f
  1493  0715                     l1104:
  1494  0715  3001               	movlw	1
  1495  0716                     u595:
  1496  0716  1003               	clrc
  1497  0717  0CF1               	rrf	___awmod@divisor+1,f
  1498  0718  0CF0               	rrf	___awmod@divisor,f
  1499  0719  3EFF               	addlw	-1
  1500  071A  1D03               	skipz
  1501  071B  2F16               	goto	u595
  1502  071C                     l1106:
  1503  071C  3001               	movlw	1
  1504  071D  02F5               	subwf	___awmod@counter,f
  1505  071E  1D03               	btfss	3,2
  1506  071F  2F21               	goto	u601
  1507  0720  2F22               	goto	u600
  1508  0721                     u601:
  1509  0721  2F05               	goto	l1100
  1510  0722                     u600:
  1511  0722                     l1108:
  1512  0722  0876               	movf	___awmod@sign,w
  1513  0723  1903               	btfsc	3,2
  1514  0724  2F26               	goto	u611
  1515  0725  2F27               	goto	u610
  1516  0726                     u611:
  1517  0726  2F2C               	goto	l1112
  1518  0727                     u610:
  1519  0727                     l1110:
  1520  0727  09F2               	comf	___awmod@dividend,f
  1521  0728  09F3               	comf	___awmod@dividend+1,f
  1522  0729  0AF2               	incf	___awmod@dividend,f
  1523  072A  1903               	skipnz
  1524  072B  0AF3               	incf	___awmod@dividend+1,f
  1525  072C                     l1112:
  1526  072C  0873               	movf	___awmod@dividend+1,w
  1527  072D  00F1               	movwf	?___awmod+1
  1528  072E  0872               	movf	___awmod@dividend,w
  1529  072F  00F0               	movwf	?___awmod
  1530  0730                     l376:
  1531  0730  0008               	return
  1532  0731                     __end_of___awmod:
  1533                           
  1534                           	psect	text8
  1535  078E                     __ptext8:	
  1536 ;; *************** function ___awdiv *****************
  1537 ;; Defined at:
  1538 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  divisor         2    0[COMMON] int 
  1541 ;;  dividend        2    2[COMMON] int 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  quotient        2    7[COMMON] int 
  1544 ;;  sign            1    6[COMMON] unsigned char 
  1545 ;;  counter         1    5[COMMON] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;                  2    0[COMMON] int 
  1548 ;; Registers used:
  1549 ;;		wreg, status,2, status,0
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1555 ;;      Params:         4       0       0       0
  1556 ;;      Locals:         4       0       0       0
  1557 ;;      Temps:          1       0       0       0
  1558 ;;      Totals:         9       0       0       0
  1559 ;;Total ram usage:        9 bytes
  1560 ;; Hardware stack levels used: 1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_format_time
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function ___awdiv
  1570  078E                     ___awdiv:
  1571  078E                     l1034:	
  1572                           ;incstack = 0
  1573                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1574                           
  1575  078E  01F6               	clrf	___awdiv@sign
  1576  078F                     l1036:
  1577  078F  1FF1               	btfss	___awdiv@divisor+1,7
  1578  0790  2F92               	goto	u431
  1579  0791  2F93               	goto	u430
  1580  0792                     u431:
  1581  0792  2F9A               	goto	l1042
  1582  0793                     u430:
  1583  0793                     l1038:
  1584  0793  09F0               	comf	___awdiv@divisor,f
  1585  0794  09F1               	comf	___awdiv@divisor+1,f
  1586  0795  0AF0               	incf	___awdiv@divisor,f
  1587  0796  1903               	skipnz
  1588  0797  0AF1               	incf	___awdiv@divisor+1,f
  1589  0798                     l1040:
  1590  0798  01F6               	clrf	___awdiv@sign
  1591  0799  0AF6               	incf	___awdiv@sign,f
  1592  079A                     l1042:
  1593  079A  1FF3               	btfss	___awdiv@dividend+1,7
  1594  079B  2F9D               	goto	u441
  1595  079C  2F9E               	goto	u440
  1596  079D                     u441:
  1597  079D  2FA7               	goto	l1048
  1598  079E                     u440:
  1599  079E                     l1044:
  1600  079E  09F2               	comf	___awdiv@dividend,f
  1601  079F  09F3               	comf	___awdiv@dividend+1,f
  1602  07A0  0AF2               	incf	___awdiv@dividend,f
  1603  07A1  1903               	skipnz
  1604  07A2  0AF3               	incf	___awdiv@dividend+1,f
  1605  07A3                     l1046:
  1606  07A3  3001               	movlw	1
  1607  07A4  00F4               	movwf	??___awdiv
  1608  07A5  0874               	movf	??___awdiv,w
  1609  07A6  06F6               	xorwf	___awdiv@sign,f
  1610  07A7                     l1048:
  1611  07A7  01F7               	clrf	___awdiv@quotient
  1612  07A8  01F8               	clrf	___awdiv@quotient+1
  1613  07A9                     l1050:
  1614  07A9  0870               	movf	___awdiv@divisor,w
  1615  07AA  0471               	iorwf	___awdiv@divisor+1,w
  1616  07AB  1903               	btfsc	3,2
  1617  07AC  2FAE               	goto	u451
  1618  07AD  2FAF               	goto	u450
  1619  07AE                     u451:
  1620  07AE  2FE6               	goto	l1070
  1621  07AF                     u450:
  1622  07AF                     l1052:
  1623  07AF  01F5               	clrf	___awdiv@counter
  1624  07B0  0AF5               	incf	___awdiv@counter,f
  1625  07B1  2FBD               	goto	l1058
  1626  07B2                     l1054:
  1627  07B2  3001               	movlw	1
  1628  07B3                     u465:
  1629  07B3  1003               	clrc
  1630  07B4  0DF0               	rlf	___awdiv@divisor,f
  1631  07B5  0DF1               	rlf	___awdiv@divisor+1,f
  1632  07B6  3EFF               	addlw	-1
  1633  07B7  1D03               	skipz
  1634  07B8  2FB3               	goto	u465
  1635  07B9                     l1056:
  1636  07B9  3001               	movlw	1
  1637  07BA  00F4               	movwf	??___awdiv
  1638  07BB  0874               	movf	??___awdiv,w
  1639  07BC  07F5               	addwf	___awdiv@counter,f
  1640  07BD                     l1058:
  1641  07BD  1FF1               	btfss	___awdiv@divisor+1,7
  1642  07BE  2FC0               	goto	u471
  1643  07BF  2FC1               	goto	u470
  1644  07C0                     u471:
  1645  07C0  2FB2               	goto	l1054
  1646  07C1                     u470:
  1647  07C1                     l1060:
  1648  07C1  3001               	movlw	1
  1649  07C2                     u485:
  1650  07C2  1003               	clrc
  1651  07C3  0DF7               	rlf	___awdiv@quotient,f
  1652  07C4  0DF8               	rlf	___awdiv@quotient+1,f
  1653  07C5  3EFF               	addlw	-1
  1654  07C6  1D03               	skipz
  1655  07C7  2FC2               	goto	u485
  1656  07C8  0871               	movf	___awdiv@divisor+1,w
  1657  07C9  0273               	subwf	___awdiv@dividend+1,w
  1658  07CA  1D03               	skipz
  1659  07CB  2FCE               	goto	u495
  1660  07CC  0870               	movf	___awdiv@divisor,w
  1661  07CD  0272               	subwf	___awdiv@dividend,w
  1662  07CE                     u495:
  1663  07CE  1C03               	skipc
  1664  07CF  2FD1               	goto	u491
  1665  07D0  2FD2               	goto	u490
  1666  07D1                     u491:
  1667  07D1  2FD9               	goto	l1066
  1668  07D2                     u490:
  1669  07D2                     l1062:
  1670  07D2  0870               	movf	___awdiv@divisor,w
  1671  07D3  02F2               	subwf	___awdiv@dividend,f
  1672  07D4  0871               	movf	___awdiv@divisor+1,w
  1673  07D5  1C03               	skipc
  1674  07D6  03F3               	decf	___awdiv@dividend+1,f
  1675  07D7  02F3               	subwf	___awdiv@dividend+1,f
  1676  07D8                     l1064:
  1677  07D8  1477               	bsf	___awdiv@quotient,0
  1678  07D9                     l1066:
  1679  07D9  3001               	movlw	1
  1680  07DA                     u505:
  1681  07DA  1003               	clrc
  1682  07DB  0CF1               	rrf	___awdiv@divisor+1,f
  1683  07DC  0CF0               	rrf	___awdiv@divisor,f
  1684  07DD  3EFF               	addlw	-1
  1685  07DE  1D03               	skipz
  1686  07DF  2FDA               	goto	u505
  1687  07E0                     l1068:
  1688  07E0  3001               	movlw	1
  1689  07E1  02F5               	subwf	___awdiv@counter,f
  1690  07E2  1D03               	btfss	3,2
  1691  07E3  2FE5               	goto	u511
  1692  07E4  2FE6               	goto	u510
  1693  07E5                     u511:
  1694  07E5  2FC1               	goto	l1060
  1695  07E6                     u510:
  1696  07E6                     l1070:
  1697  07E6  0876               	movf	___awdiv@sign,w
  1698  07E7  1903               	btfsc	3,2
  1699  07E8  2FEA               	goto	u521
  1700  07E9  2FEB               	goto	u520
  1701  07EA                     u521:
  1702  07EA  2FF0               	goto	l1074
  1703  07EB                     u520:
  1704  07EB                     l1072:
  1705  07EB  09F7               	comf	___awdiv@quotient,f
  1706  07EC  09F8               	comf	___awdiv@quotient+1,f
  1707  07ED  0AF7               	incf	___awdiv@quotient,f
  1708  07EE  1903               	skipnz
  1709  07EF  0AF8               	incf	___awdiv@quotient+1,f
  1710  07F0                     l1074:
  1711  07F0  0878               	movf	___awdiv@quotient+1,w
  1712  07F1  00F1               	movwf	?___awdiv+1
  1713  07F2  0877               	movf	___awdiv@quotient,w
  1714  07F3  00F0               	movwf	?___awdiv
  1715  07F4                     l363:
  1716  07F4  0008               	return
  1717  07F5                     __end_of___awdiv:
  1718                           
  1719                           	psect	text9
  1720  0532                     __ptext9:	
  1721 ;; *************** function _handle_btn_pressing *****************
  1722 ;; Defined at:
  1723 ;;		line 46 in file "buttons.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  btn             1    wreg     enum E469
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  btn             1    2[COMMON] enum E469
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1737 ;;      Params:         0       0       0       0
  1738 ;;      Locals:         1       0       0       0
  1739 ;;      Temps:          2       0       0       0
  1740 ;;      Totals:         3       0       0       0
  1741 ;;Total ram usage:        3 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 1
  1744 ;; This function calls:
  1745 ;;		_reset_stopwatch
  1746 ;;		_start_stopwatch
  1747 ;;		_stop_stopwatch
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _handle_btn_pressing
  1755  0532                     _handle_btn_pressing:
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _handle_btn_pressing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1759                           ;handle_btn_pressing@btn stored from wreg
  1760  0532  00F2               	movwf	handle_btn_pressing@btn
  1761  0533                     l1234:
  1762                           
  1763                           ;buttons.c: 46: void handle_btn_pressing(enum Button btn);buttons.c: 47: {;buttons.c: 48
      +                          :     switch(btn)
  1764  0533  2D3A               	goto	l1244
  1765  0534                     l1236:
  1766                           
  1767                           ;buttons.c: 51:             reset_stopwatch();
  1768  0534  2511               	fcall	_reset_stopwatch
  1769                           
  1770                           ;buttons.c: 52:             break;
  1771  0535  2D4D               	goto	l68
  1772  0536                     l1238:
  1773                           
  1774                           ;buttons.c: 54:             stop_stopwatch();
  1775  0536  2508               	fcall	_stop_stopwatch
  1776                           
  1777                           ;buttons.c: 55:             break;
  1778  0537  2D4D               	goto	l68
  1779  0538                     l1240:
  1780                           
  1781                           ;buttons.c: 57:             start_stopwatch();
  1782  0538  250C               	fcall	_start_stopwatch
  1783                           
  1784                           ;buttons.c: 58:             break;
  1785  0539  2D4D               	goto	l68
  1786  053A                     l1244:
  1787  053A  0872               	movf	handle_btn_pressing@btn,w
  1788  053B  00F0               	movwf	??_handle_btn_pressing
  1789  053C  01F1               	clrf	??_handle_btn_pressing+1
  1790                           
  1791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1792                           ; Switch size 1, requested type "simple"
  1793                           ; Number of cases is 1, Range of values is 0 to 0
  1794                           ; switch strategies available:
  1795                           ; Name         Instructions Cycles
  1796                           ; simple_byte            4     3 (average)
  1797                           ; direct_byte            7     6 (fixed)
  1798                           ; jumptable            260     6 (fixed)
  1799                           ;	Chosen strategy is simple_byte
  1800  053D  0871               	movf	??_handle_btn_pressing+1,w
  1801  053E  3A00               	xorlw	0	; case 0
  1802  053F  1903               	skipnz
  1803  0540  2D42               	goto	l1306
  1804  0541  2D4D               	goto	l68
  1805  0542                     l1306:
  1806                           
  1807                           ; Switch size 1, requested type "simple"
  1808                           ; Number of cases is 3, Range of values is 1 to 3
  1809                           ; switch strategies available:
  1810                           ; Name         Instructions Cycles
  1811                           ; simple_byte           10     6 (average)
  1812                           ; direct_byte           12     9 (fixed)
  1813                           ; jumptable            263     9 (fixed)
  1814                           ;	Chosen strategy is simple_byte
  1815  0542  0870               	movf	??_handle_btn_pressing,w
  1816  0543  3A01               	xorlw	1	; case 1
  1817  0544  1903               	skipnz
  1818  0545  2D34               	goto	l1236
  1819  0546  3A03               	xorlw	3	; case 2
  1820  0547  1903               	skipnz
  1821  0548  2D36               	goto	l1238
  1822  0549  3A01               	xorlw	1	; case 3
  1823  054A  1903               	skipnz
  1824  054B  2D38               	goto	l1240
  1825  054C  2D4D               	goto	l68
  1826  054D                     l68:
  1827  054D  0008               	return
  1828  054E                     __end_of_handle_btn_pressing:
  1829                           
  1830                           	psect	text10
  1831  0508                     __ptext10:	
  1832 ;; *************** function _stop_stopwatch *****************
  1833 ;; Defined at:
  1834 ;;		line 26 in file "stopwatch.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;		None
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  1    wreg      void 
  1841 ;; Registers used:
  1842 ;;		status,2
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1848 ;;      Params:         0       0       0       0
  1849 ;;      Locals:         0       0       0       0
  1850 ;;      Temps:          0       0       0       0
  1851 ;;      Totals:         0       0       0       0
  1852 ;;Total ram usage:        0 bytes
  1853 ;; Hardware stack levels used: 1
  1854 ;; This function calls:
  1855 ;;		Nothing
  1856 ;; This function is called by:
  1857 ;;		_handle_btn_pressing
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           
  1862                           ;psect for function _stop_stopwatch
  1863  0508                     _stop_stopwatch:
  1864  0508                     l1168:	
  1865                           ;incstack = 0
  1866                           ; Regs used in _stop_stopwatch: [status,2]
  1867                           
  1868                           
  1869                           ;stopwatch.c: 28:     is_timer_work = 0;
  1870  0508  1283               	bcf	3,5	;RP0=0, select bank0
  1871  0509  1303               	bcf	3,6	;RP1=0, select bank0
  1872  050A  01A5               	clrf	_is_timer_work
  1873  050B                     l82:
  1874  050B  0008               	return
  1875  050C                     __end_of_stop_stopwatch:
  1876                           
  1877                           	psect	text11
  1878  050C                     __ptext11:	
  1879 ;; *************** function _start_stopwatch *****************
  1880 ;; Defined at:
  1881 ;;		line 32 in file "stopwatch.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		None
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1895 ;;      Params:         0       0       0       0
  1896 ;;      Locals:         0       0       0       0
  1897 ;;      Temps:          0       0       0       0
  1898 ;;      Totals:         0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_handle_btn_pressing
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function _start_stopwatch
  1910  050C                     _start_stopwatch:
  1911  050C                     l1170:	
  1912                           ;incstack = 0
  1913                           ; Regs used in _start_stopwatch: []
  1914                           
  1915                           
  1916                           ;stopwatch.c: 34:     is_timer_work = 1;
  1917  050C  1283               	bcf	3,5	;RP0=0, select bank0
  1918  050D  1303               	bcf	3,6	;RP1=0, select bank0
  1919  050E  01A5               	clrf	_is_timer_work
  1920  050F  0AA5               	incf	_is_timer_work,f
  1921  0510                     l85:
  1922  0510  0008               	return
  1923  0511                     __end_of_start_stopwatch:
  1924                           
  1925                           	psect	text12
  1926  0511                     __ptext12:	
  1927 ;; *************** function _reset_stopwatch *****************
  1928 ;; Defined at:
  1929 ;;		line 18 in file "stopwatch.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1943 ;;      Params:         0       0       0       0
  1944 ;;      Locals:         0       0       0       0
  1945 ;;      Temps:          0       0       0       0
  1946 ;;      Totals:         0       0       0       0
  1947 ;;Total ram usage:        0 bytes
  1948 ;; Hardware stack levels used: 1
  1949 ;; This function calls:
  1950 ;;		Nothing
  1951 ;; This function is called by:
  1952 ;;		_main
  1953 ;;		_handle_btn_pressing
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           
  1958                           ;psect for function _reset_stopwatch
  1959  0511                     _reset_stopwatch:
  1960  0511                     l1164:	
  1961                           ;incstack = 0
  1962                           ; Regs used in _reset_stopwatch: [wreg+status,2]
  1963                           
  1964                           
  1965                           ;stopwatch.c: 20:     is_timer_work = 0;
  1966  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0512  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0513  01A5               	clrf	_is_timer_work
  1969                           
  1970                           ;stopwatch.c: 21:     time_ms = 0;
  1971  0514  01A3               	clrf	_time_ms
  1972  0515  01A4               	clrf	_time_ms+1
  1973  0516                     l1166:
  1974                           
  1975                           ;stopwatch.c: 22:     PORTB = 0xC0;
  1976  0516  30C0               	movlw	192
  1977  0517  0086               	movwf	6	;volatile
  1978  0518                     l79:
  1979  0518  0008               	return
  1980  0519                     __end_of_reset_stopwatch:
  1981                           
  1982                           	psect	text13
  1983  05FE                     __ptext13:	
  1984 ;; *************** function _get_btn_pressed *****************
  1985 ;; Defined at:
  1986 ;;		line 31 in file "buttons.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  btn             1    5[COMMON] enum E469
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      enum E469
  1993 ;; Registers used:
  1994 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2000 ;;      Params:         0       0       0       0
  2001 ;;      Locals:         1       0       0       0
  2002 ;;      Temps:          1       0       0       0
  2003 ;;      Totals:         2       0       0       0
  2004 ;;Total ram usage:        2 bytes
  2005 ;; Hardware stack levels used: 1
  2006 ;; Hardware stack levels required when called: 1
  2007 ;; This function calls:
  2008 ;;		_is_btn_bounce
  2009 ;; This function is called by:
  2010 ;;		_main
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           
  2015                           ;psect for function _get_btn_pressed
  2016  05FE                     _get_btn_pressed:
  2017  05FE                     l946:	
  2018                           ;incstack = 0
  2019                           ; Regs used in _get_btn_pressed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2020                           
  2021                           
  2022                           ;buttons.c: 33:     enum Button btn = NONE;
  2023  05FE  01F5               	clrf	get_btn_pressed@btn
  2024  05FF                     l948:
  2025                           
  2026                           ;buttons.c: 35:     if (PORTAbits.RA7 == 0 && !is_btn_bounce(PORTAbits.RA7))
  2027  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  2028  0600  1303               	bcf	3,6	;RP1=0, select bank0
  2029  0601  1B85               	btfsc	5,7	;volatile
  2030  0602  2E04               	goto	u351
  2031  0603  2E05               	goto	u350
  2032  0604                     u351:
  2033  0604  2E11               	goto	l54
  2034  0605                     u350:
  2035  0605                     l950:
  2036  0605  0D05               	rlf	5,w	;volatile
  2037  0606  0D05               	rlf	5,w	;volatile
  2038  0607  3901               	andlw	1
  2039  0608  256B               	fcall	_is_btn_bounce
  2040  0609  3A00               	xorlw	0
  2041  060A  1D03               	skipz
  2042  060B  2E0D               	goto	u361
  2043  060C  2E0E               	goto	u360
  2044  060D                     u361:
  2045  060D  2E11               	goto	l54
  2046  060E                     u360:
  2047  060E                     l952:
  2048                           
  2049                           ;buttons.c: 36:         btn = RESET;
  2050  060E  01F5               	clrf	get_btn_pressed@btn
  2051  060F  0AF5               	incf	get_btn_pressed@btn,f
  2052  0610  2E3B               	goto	l55
  2053  0611                     l54:	
  2054                           ;buttons.c: 37:     else if (PORTAbits.RA6 == 0 && !is_btn_bounce(PORTAbits.RA6))
  2055                           
  2056  0611  1283               	bcf	3,5	;RP0=0, select bank0
  2057  0612  1303               	bcf	3,6	;RP1=0, select bank0
  2058  0613  1B05               	btfsc	5,6	;volatile
  2059  0614  2E16               	goto	u371
  2060  0615  2E17               	goto	u370
  2061  0616                     u371:
  2062  0616  2E27               	goto	l56
  2063  0617                     u370:
  2064  0617                     l954:
  2065  0617  0E05               	swapf	5,w	;volatile
  2066  0618  00F4               	movwf	??_get_btn_pressed
  2067  0619  0CF4               	rrf	??_get_btn_pressed,f
  2068  061A  0C74               	rrf	??_get_btn_pressed,w
  2069  061B  3901               	andlw	1
  2070  061C  256B               	fcall	_is_btn_bounce
  2071  061D  3A00               	xorlw	0
  2072  061E  1D03               	skipz
  2073  061F  2E21               	goto	u381
  2074  0620  2E22               	goto	u380
  2075  0621                     u381:
  2076  0621  2E27               	goto	l56
  2077  0622                     u380:
  2078  0622                     l956:
  2079                           
  2080                           ;buttons.c: 38:         btn = STOP;
  2081  0622  3002               	movlw	2
  2082  0623  00F4               	movwf	??_get_btn_pressed
  2083  0624  0874               	movf	??_get_btn_pressed,w
  2084  0625  00F5               	movwf	get_btn_pressed@btn
  2085  0626  2E3B               	goto	l55
  2086  0627                     l56:	
  2087                           ;buttons.c: 39:     else if (PORTAbits.RA5 == 0 && !is_btn_bounce(PORTAbits.RA5))
  2088                           
  2089  0627  1283               	bcf	3,5	;RP0=0, select bank0
  2090  0628  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0629  1A85               	btfsc	5,5	;volatile
  2092  062A  2E2C               	goto	u391
  2093  062B  2E2D               	goto	u390
  2094  062C                     u391:
  2095  062C  2E3B               	goto	l55
  2096  062D                     u390:
  2097  062D                     l958:
  2098  062D  0E05               	swapf	5,w	;volatile
  2099  062E  00F4               	movwf	??_get_btn_pressed
  2100  062F  0C74               	rrf	??_get_btn_pressed,w
  2101  0630  3901               	andlw	1
  2102  0631  256B               	fcall	_is_btn_bounce
  2103  0632  3A00               	xorlw	0
  2104  0633  1D03               	skipz
  2105  0634  2E36               	goto	u401
  2106  0635  2E37               	goto	u400
  2107  0636                     u401:
  2108  0636  2E3B               	goto	l55
  2109  0637                     u400:
  2110  0637                     l960:
  2111                           
  2112                           ;buttons.c: 40:         btn = START;
  2113  0637  3003               	movlw	3
  2114  0638  00F4               	movwf	??_get_btn_pressed
  2115  0639  0874               	movf	??_get_btn_pressed,w
  2116  063A  00F5               	movwf	get_btn_pressed@btn
  2117  063B                     l55:
  2118                           
  2119                           ;buttons.c: 42:     return btn;
  2120  063B  0875               	movf	get_btn_pressed@btn,w
  2121  063C                     l59:
  2122  063C  0008               	return
  2123  063D                     __end_of_get_btn_pressed:
  2124                           
  2125                           	psect	text14
  2126  056B                     __ptext14:	
  2127 ;; *************** function _is_btn_bounce *****************
  2128 ;; Defined at:
  2129 ;;		line 13 in file "buttons.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  btn             1    wreg     unsigned char 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  btn             1    0[COMMON] unsigned char 
  2134 ;;  i               2    2[COMMON] int 
  2135 ;;  is_bounce       1    1[COMMON] _Bool 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      _Bool 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0, btemp+1
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2145 ;;      Params:         0       0       0       0
  2146 ;;      Locals:         4       0       0       0
  2147 ;;      Temps:          0       0       0       0
  2148 ;;      Totals:         4       0       0       0
  2149 ;;Total ram usage:        4 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_get_btn_pressed
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _is_btn_bounce
  2160  056B                     _is_btn_bounce:
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _is_btn_bounce: [wreg+status,2+status,0+btemp+1]
  2164                           ;is_btn_bounce@btn stored from wreg
  2165  056B  00F0               	movwf	is_btn_bounce@btn
  2166  056C                     l850:
  2167                           
  2168                           ;buttons.c: 13: static _Bool is_btn_bounce(uint8_t btn);buttons.c: 14: {;buttons.c: 15: 
      +                              _Bool is_bounce = 0;
  2169  056C  01F1               	clrf	is_btn_bounce@is_bounce
  2170                           
  2171                           ;buttons.c: 21:     for (int i = 0; i < 385; i++)
  2172  056D  01F2               	clrf	is_btn_bounce@i
  2173  056E  01F3               	clrf	is_btn_bounce@i+1
  2174  056F                     l856:
  2175                           
  2176                           ;buttons.c: 22:     {;buttons.c: 23:         if (btn != 0)
  2177  056F  0870               	movf	is_btn_bounce@btn,w
  2178  0570  1903               	btfsc	3,2
  2179  0571  2D73               	goto	u331
  2180  0572  2D74               	goto	u330
  2181  0573                     u331:
  2182  0573  2D76               	goto	l860
  2183  0574                     u330:
  2184  0574                     l858:
  2185                           
  2186                           ;buttons.c: 24:             is_bounce = 1;
  2187  0574  01F1               	clrf	is_btn_bounce@is_bounce
  2188  0575  0AF1               	incf	is_btn_bounce@is_bounce,f
  2189  0576                     l860:
  2190                           
  2191                           ;buttons.c: 25:     }
  2192  0576  3001               	movlw	1
  2193  0577  07F2               	addwf	is_btn_bounce@i,f
  2194  0578  1803               	skipnc
  2195  0579  0AF3               	incf	is_btn_bounce@i+1,f
  2196  057A  3000               	movlw	0
  2197  057B  07F3               	addwf	is_btn_bounce@i+1,f
  2198  057C                     l862:
  2199  057C  0873               	movf	is_btn_bounce@i+1,w
  2200  057D  3A80               	xorlw	128
  2201  057E  00FF               	movwf	btemp+1
  2202  057F  3081               	movlw	129
  2203  0580  027F               	subwf	btemp+1,w
  2204  0581  1D03               	skipz
  2205  0582  2D85               	goto	u345
  2206  0583  3081               	movlw	129
  2207  0584  0272               	subwf	is_btn_bounce@i,w
  2208  0585                     u345:
  2209  0585  1C03               	skipc
  2210  0586  2D88               	goto	u341
  2211  0587  2D89               	goto	u340
  2212  0588                     u341:
  2213  0588  2D6F               	goto	l856
  2214  0589                     u340:
  2215  0589                     l864:
  2216                           
  2217                           ;buttons.c: 27:     return is_bounce;
  2218  0589  0871               	movf	is_btn_bounce@is_bounce,w
  2219  058A                     l51:
  2220  058A  0008               	return
  2221  058B                     __end_of_is_btn_bounce:
  2222                           
  2223                           	psect	text15
  2224  0521                     __ptext15:	
  2225 ;; *************** function _configure *****************
  2226 ;; Defined at:
  2227 ;;		line 18 in file "main.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2241 ;;      Params:         0       0       0       0
  2242 ;;      Locals:         0       0       0       0
  2243 ;;      Temps:          1       0       0       0
  2244 ;;      Totals:         1       0       0       0
  2245 ;;Total ram usage:        1 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _configure
  2256  0521                     _configure:
  2257  0521                     l904:	
  2258                           ;incstack = 0
  2259                           ; Regs used in _configure: [wreg+status,2+status,0]
  2260                           
  2261                           
  2262                           ;main.c: 20: 
  2263  0521  178B               	bsf	11,7	;volatile
  2264  0522                     l906:
  2265                           
  2266                           ;main.c: 22:     {
  2267  0522  3007               	movlw	7
  2268  0523  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0524  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0525  009F               	movwf	31	;volatile
  2271                           
  2272                           ;main.c: 24:         handle_btn_pressing(get_btn_pressed());
  2273  0526  30E0               	movlw	224
  2274  0527  1683               	bsf	3,5	;RP0=1, select bank1
  2275  0528  1303               	bcf	3,6	;RP1=0, select bank1
  2276  0529  0085               	movwf	5	;volatile
  2277  052A                     l908:
  2278                           
  2279                           ;main.c: 25:         update_time_counter();
  2280  052A  0186               	clrf	6	;volatile
  2281  052B                     l910:
  2282                           
  2283                           ;main.c: 27: 
  2284  052B  1281               	bcf	1,5	;volatile
  2285  052C                     l912:
  2286                           
  2287                           ;main.c: 28:     return;
  2288  052C  1181               	bcf	1,3	;volatile
  2289  052D                     l914:
  2290                           
  2291                           ;main.c: 29: }
  2292  052D  3007               	movlw	7
  2293  052E  00F0               	movwf	??_configure
  2294  052F  0870               	movf	??_configure,w
  2295  0530  0481               	iorwf	1,f	;volatile
  2296  0531                     l27:
  2297  0531  0008               	return
  2298  0532                     __end_of_configure:
  2299  007E                     btemp	set	126	;btemp
  2300  007E                     wtemp0	set	126
  2301                           
  2302                           	psect	config
  2303                           
  2304                           ;Config register CONFIG @ 0x2007
  2305                           ;	Oscillator Selection bits
  2306                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2307                           ;	Watchdog Timer Enable bit
  2308                           ;	WDTE = OFF, WDT disabled
  2309                           ;	Power-up Timer Enable bit
  2310                           ;	PWRTE = OFF, PWRT disabled
  2311                           ;	RA5/MCLR/VPP Pin Function Select bit
  2312                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2313                           ;	Brown-out Detect Enable bit
  2314                           ;	BOREN = OFF, BOD disabled
  2315                           ;	Low-Voltage Programming Enable bit
  2316                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2317                           ;	Data EE Memory Code Protection bit
  2318                           ;	CPD = OFF, Data memory code protection off
  2319                           ;	Flash Program Memory Code Protection bit
  2320                           ;	CP = OFF, Code protection off
  2321  2007                     	org	8199
  2322  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      5      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _format_time->___lwmod
    ___lwmod->___lwdiv
    _get_btn_pressed->_is_btn_bounce

Critical Paths under _main in BANK0

    _main->_update_disp
    _update_disp->_format_time

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1993
                          _configure
                    _get_btn_pressed
                _handle_btn_pressing
                    _reset_stopwatch
                        _update_disp
                _update_time_counter
 ---------------------------------------------------------------------------------
 (1) _update_time_counter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_disp                                          1     1      0    1896
                                              4 BANK0      1     1      0
                        _format_time
               _set_disp_digit_value
 ---------------------------------------------------------------------------------
 (2) _set_disp_digit_value                                 3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _format_time                                          4     4      0    1874
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     463
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _handle_btn_pressing                                  3     3      0      22
                                              0 COMMON     3     3      0
                    _reset_stopwatch
                    _start_stopwatch
                     _stop_stopwatch
 ---------------------------------------------------------------------------------
 (2) _stop_stopwatch                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_btn_pressed                                      2     2      0      75
                                              4 COMMON     2     2      0
                      _is_btn_bounce
 ---------------------------------------------------------------------------------
 (2) _is_btn_bounce                                        4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _configure                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure
   _get_btn_pressed
     _is_btn_bounce
   _handle_btn_pressing
     _reset_stopwatch
     _start_stopwatch
     _stop_stopwatch
   _reset_stopwatch
   _update_disp
     _format_time
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _set_disp_digit_value
   _update_time_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      5       C       3       15.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      1A      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jul 28 15:04:38 2021

                  _update_disp 058B                             l27 0531                             l51 058A  
                           l54 0611                             l55 063B                             l56 0627  
                           l82 050B                             l59 063C                             l68 054D  
                           l92 0564                             l85 0510                             l93 056A  
                           l79 0518                             l88 06D7                   ___awdiv@sign 0076  
                          l121 078D                            l124 05C3                            l363 07F4  
                          l376 0730                            l482 0680                            l492 05FD  
                          l910 052B                            l912 052C                            l904 0521  
                          l914 052D                            l906 0522                            l850 056C  
                          l908 052A                            l860 0576                            l862 057C  
                          l950 0605                            l864 0589                            l856 056F  
                          l960 0637                            l952 060E                            l858 0574  
                          l954 0617                            l946 05FE                            l956 0622  
                          l948 05FF                            l958 062D                            u400 0637  
                          u401 0636                            u330 0574                            u331 0573  
                          u340 0589                            u341 0588                            u350 0605  
                          u510 07E6                            u430 0793                            u351 0604  
                          u511 07E5                            u431 0792                            u360 060E  
                          u520 07EB                            u440 079E                            u600 0722  
                          u345 0585                            u361 060D                            u521 07EA  
                          u505 07DA                            u441 079D                            u601 0721  
                          u370 0617                            u450 07AF                            u610 0727  
                          u530 06DD                            u371 0616                            u451 07AE  
                          u611 0726                            u531 06DC                            u380 0622  
                          u540 06E8                            u620 0645                            u381 0621  
                          u541 06E7                            u621 0644                            u390 062D  
                          u470 07C1                            u550 06F3                            u710 05DC  
                          u391 062C                            u471 07C0                            u551 06F2  
                          u711 05DB                            u640 0657                            u720 05E6  
                          u465 07B3                            u641 0656                            u721 05E5  
                          u705 05CE                            u490 07D2                            u570 0705  
                          u491 07D1                            u571 0704                            u635 0649  
                          u580 070F                            u660 0668                            u740 05F9  
                          u485 07C2                            u581 070E                            u565 06F7  
                          u661 0667                            u741 05F8                            u725 05E2  
                          u750 0555                            u495 07CE                            u655 0658  
                          u735 05ED                            u751 0554                            u680 067C  
                          u760 055E                            u585 070B                            u681 067B  
                          u665 0664                            u761 055D                            u690 05CA  
                          u595 0716                            u675 0670                            u691 05C9  
                          u777 0597                            u787 05A9                            u797 05BB  
         ?_handle_btn_pressing 0070          ??_update_time_counter 0070                   ___awmod@sign 0076  
                         l1100 0705                           l1110 0727                           l1102 070F  
                         l1040 0798                           l1112 072C                           l1104 0715  
                         l1120 0645                           l1050 07A9                           l1042 079A  
                         l1034 078E                           l1106 071C                           l1130 0668  
                         l1122 0648                           l1210 0593                           l1060 07C1  
                         l1052 07AF                           l1044 079E                           l1036 078F  
                         l1108 0722                           l1132 066E                           l1124 064F  
                         l1116 063D                           l1220 05A5                           l1212 059C  
                         l1204 058B                           l1062 07D2                           l1054 07B2  
                         l1070 07E6                           l1046 07A3                           l1038 0793  
                         l1134 066F                           l1126 0653                           l1118 063F  
                         l1150 05D8                           l1142 05C4                           l1230 05B7  
                         l1222 05AE                           l1214 059F                           l1206 058C  
                         l1240 0538                           l1072 07EB                           l1064 07D8  
                         l1056 07B9                           l1048 07A7                           l1080 06D9  
                         l1136 0676                           l1128 0657                           l1152 05DC  
                         l1144 05CA                           l1160 05F9                           l1304 076D  
                         l1232 05C0                           l1224 05B1                           l1216 05A1  
                         l1208 0590                           l1170 050C                           l1306 0542  
                         l1234 0533                           l1074 07F0                           l1066 07D9  
                         l1058 07BD                           l1090 06ED                           l1082 06DD  
                         l1138 067C                           l1154 05E6                           l1146 05CD  
                         l1226 05B2                           l1218 05A4                           l1250 054E  
                         l1164 0511                           l1236 0534                           l1244 053A  
                         l1068 07E0                           l1092 06F3                           l1084 06E2  
                         l1156 05EC                           l1148 05D4                           l1172 0681  
                         l1180 073D                           l1228 05B4                           l1252 0555  
                         l1260 051C                           l1166 0516                           l1238 0536  
                         l1094 06F6                           l1086 06E4                           l1078 06D8  
                         l1158 05F3                           l1190 0756                           l1182 0742  
                         l1174 0732                           l1254 055E                           l1262 051E  
                         l1168 0508                           l1096 06FD                           l1088 06E8  
                         l1192 075B                           l1184 0747                           l1176 0733  
                         l1256 0519                           l1098 0701                           l1194 0760  
                         l1186 074C                           l1178 0738                           l1258 051B  
                         l1188 0751                           l1198 0765                           _main 0519  
                         btemp 007E                           start 0000        __end_of_reset_stopwatch 0519  
                 ?_format_time 0070       __size_of_start_stopwatch 0005                          ?_main 0070  
              __end_of___awdiv 07F5                __end_of___awmod 0731                          _CMCON 001F  
              ___awdiv@divisor 0070                __end_of___lwdiv 0681          ??_handle_btn_pressing 0070  
              __end_of___lwmod 05FE                ___awdiv@counter 0075                          _PORTB 0006  
                        _TRISA 0085                          _TRISB 0086      set_disp_digit_value@value 0072  
                        status 0003                          wtemp0 007E                __initialization 07F5  
                 __end_of_main 0521         __size_of_is_btn_bounce 0020                         ??_main 007E  
             ___awdiv@dividend 0072         handle_btn_pressing@btn 0072                         _Button 0026  
             ?_reset_stopwatch 0070                      ??___awdiv 0074                      ??___awmod 0074  
                    ??___lwdiv 0074                      ??___lwmod 007C               ___awdiv@quotient 0077  
              ___awmod@divisor 0070                ___awmod@counter 0075              ??_start_stopwatch 0070  
                _is_btn_bounce 056B        __end_of__initialization 07FE       __size_of_get_btn_pressed 003F  
                 ?_update_disp 0070                 __pcstackCOMMON 0070        format_time@cashed_value 002A  
         __size_of_format_time 0057                 _OPTION_REGbits 0081                 ?_is_btn_bounce 0070  
           __size_of_configure 0011                     __pbssBANK0 0020                     __pmaintext 0519  
__size_of_set_disp_digit_value 005D    __end_of_update_time_counter 056B                  _is_timer_work 0025  
      __size_of_stop_stopwatch 0004              ??_get_btn_pressed 0074              __end_of_configure 0532  
                      ___awdiv 078E                        ___awmod 06D8    __end_of_handle_btn_pressing 054E  
                      ___lwdiv 063D                        ___lwmod 05C4                        __ptext1 054E  
                      __ptext2 058B                        __ptext3 0731                        __ptext4 0681  
                      __ptext5 05C4                        __ptext6 063D                        __ptext7 06D8  
                      __ptext8 078E                        __ptext9 0532               ___awmod@dividend 0072  
              ??_is_btn_bounce 0070                        _time_ms 0023           end_of_initialization 07FE  
         __size_of_update_disp 0039                _start_stopwatch 050C                      _PORTAbits 0005  
                    _PORTBbits 0006                 is_btn_bounce@i 0072                 _formatted_time 0020  
     __size_of_reset_stopwatch 0008            start_initialization 07F5                 _stop_stopwatch 0508  
      __end_of_start_stopwatch 0511                  ??_format_time 0027   __end_of_set_disp_digit_value 078E  
                    ___latbits 0000                  __pcstackBANK0 0027         __end_of_stop_stopwatch 050C  
              _get_btn_pressed 05FE               ___lwdiv@dividend 0072                       ?___awdiv 0070  
                     ?___awmod 0070                       ?___lwdiv 0070                       ?___lwmod 0078  
                    _configure 0521            __end_of_format_time 06D8   __size_of_update_time_counter 001D  
             ___lwdiv@quotient 0075                ?_stop_stopwatch 0070              ??_reset_stopwatch 0070  
             ?_start_stopwatch 0070                     ?_configure 0070   __size_of_handle_btn_pressing 001C  
      __end_of_get_btn_pressed 063D          __end_of_is_btn_bounce 058B                  ??_update_disp 002B  
         _set_disp_digit_value 0731               __size_of___awdiv 0067               __size_of___awmod 0059  
                  _format_time 0681               __size_of___lwdiv 0044               __size_of___lwmod 003A  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0077                       __ptext10 0508  
                     __ptext11 050C                       __ptext12 0511                       __ptext13 05FE  
                     __ptext14 056B                       __ptext15 0521                  __size_of_main 0008  
        ?_set_disp_digit_value 0070                    ??_configure 0070            __end_of_update_disp 05C4  
                   _INTCONbits 000B               ?_get_btn_pressed 0070               ___lwmod@dividend 007A  
          _update_time_counter 054E         is_btn_bounce@is_bounce 0071                _reset_stopwatch 0511  
                   _OPTION_REG 0081                ___lwmod@divisor 0078               ??_stop_stopwatch 0070  
              ___lwmod@counter 007D           ?_update_time_counter 0070             get_btn_pressed@btn 0075  
       ??_set_disp_digit_value 0070            _handle_btn_pressing 0532               is_btn_bounce@btn 0070  
