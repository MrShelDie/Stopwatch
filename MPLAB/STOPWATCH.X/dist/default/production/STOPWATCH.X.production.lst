

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Sep  7 21:57:23 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F628A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  008C                     	;# 
    90  008E                     	;# 
    91  0092                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009F                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0092                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  008C                     	;# 
   164  008E                     	;# 
   165  0092                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009F                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  008C                     	;# 
   201  008E                     	;# 
   202  0092                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009F                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001F                     	;# 
   234  0081                     	;# 
   235  0085                     	;# 
   236  0086                     	;# 
   237  008C                     	;# 
   238  008E                     	;# 
   239  0092                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009F                     	;# 
   247  0006                     _PORTBbits	set	6
   248  0006                     _PORTB	set	6
   249  0005                     _PORTAbits	set	5
   250  0005                     _PORTA	set	5
   251  001F                     _CMCON	set	31
   252  000B                     _INTCONbits	set	11
   253  0086                     _TRISB	set	134
   254  0085                     _TRISA	set	133
   255                           
   256                           	psect	cinit
   257  07F5                     start_initialization:	
   258                           ; #config settings
   259                           
   260  07F5                     __initialization:
   261                           
   262                           ; Clear objects allocated to BANK0
   263  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   264  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   265  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   266  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   267  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   268  07FA  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   269  07FB  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   270  07FC  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   271  07FD  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   272  07FE                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275  07FE                     __end_of__initialization:
   276  07FE  0183               	clrf	3
   277  07FF  2CF2               	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	bssBANK0
   280  0020                     __pbssBANK0:
   281  0020                     _formatted_time:
   282  0020                     	ds	3
   283  0023                     _time_ms:
   284  0023                     	ds	2
   285  0025                     _is_timer_work:
   286  0025                     	ds	1
   287  0026                     _Button:
   288  0026                     	ds	1
   289                           
   290                           	psect	cstackCOMMON
   291  0070                     __pcstackCOMMON:
   292  0070                     ?_reset_stopwatch:
   293  0070                     ??_reset_stopwatch:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_update_disp:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_handle_btn_pressing:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ??_handle_btn_pressing:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_get_btn_pressed:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_update_time_counter:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ??_update_time_counter:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_stop_stopwatch:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ??_stop_stopwatch:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_start_stopwatch:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ??_start_stopwatch:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_configure:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ??_configure:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_main:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_get_mask:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ??_get_mask:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_is_btn_bounce:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_format_time:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_set_disp_digit_value:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ??_set_disp_digit_value:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?___awdiv:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?___awmod:	
   357                           ; 2 bytes @ 0x0
   358                           
   359  0070                     ?___lwdiv:	
   360                           ; 2 bytes @ 0x0
   361                           
   362  0070                     ___awdiv@divisor:	
   363                           ; 2 bytes @ 0x0
   364                           
   365  0070                     ___awmod@divisor:	
   366                           ; 2 bytes @ 0x0
   367                           
   368  0070                     ___lwdiv@divisor:	
   369                           ; 2 bytes @ 0x0
   370                           
   371                           
   372                           ; 2 bytes @ 0x0
   373  0070                     	ds	1
   374  0071                     get_mask@btn:
   375                           
   376                           ; 1 bytes @ 0x1
   377  0071                     	ds	1
   378  0072                     get_mask@mask:
   379  0072                     handle_btn_pressing@btn:	
   380                           ; 1 bytes @ 0x2
   381                           
   382  0072                     set_disp_digit_value@value:	
   383                           ; 1 bytes @ 0x2
   384                           
   385  0072                     ___awdiv@dividend:	
   386                           ; 1 bytes @ 0x2
   387                           
   388  0072                     ___awmod@dividend:	
   389                           ; 2 bytes @ 0x2
   390                           
   391  0072                     ___lwdiv@dividend:	
   392                           ; 2 bytes @ 0x2
   393                           
   394                           
   395                           ; 2 bytes @ 0x2
   396  0072                     	ds	1
   397  0073                     ??_is_btn_bounce:
   398                           
   399                           ; 1 bytes @ 0x3
   400  0073                     	ds	1
   401  0074                     ??___awdiv:
   402  0074                     ??___awmod:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     ??___lwdiv:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0074                     is_btn_bounce@btn:	
   409                           ; 1 bytes @ 0x4
   410                           
   411                           
   412                           ; 1 bytes @ 0x4
   413  0074                     	ds	1
   414  0075                     is_btn_bounce@mask:
   415  0075                     ___awdiv@counter:	
   416                           ; 1 bytes @ 0x5
   417                           
   418  0075                     ___awmod@counter:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0075                     ___lwdiv@quotient:	
   422                           ; 1 bytes @ 0x5
   423                           
   424                           
   425                           ; 2 bytes @ 0x5
   426  0075                     	ds	1
   427  0076                     ___awdiv@sign:
   428  0076                     ___awmod@sign:	
   429                           ; 1 bytes @ 0x6
   430                           
   431  0076                     is_btn_bounce@i:	
   432                           ; 1 bytes @ 0x6
   433                           
   434                           
   435                           ; 2 bytes @ 0x6
   436  0076                     	ds	1
   437  0077                     ___lwdiv@counter:
   438  0077                     ___awdiv@quotient:	
   439                           ; 1 bytes @ 0x7
   440                           
   441                           
   442                           ; 2 bytes @ 0x7
   443  0077                     	ds	1
   444  0078                     ?___lwmod:
   445  0078                     is_btn_bounce@is_bounce:	
   446                           ; 2 bytes @ 0x8
   447                           
   448  0078                     ___lwmod@divisor:	
   449                           ; 1 bytes @ 0x8
   450                           
   451                           
   452                           ; 2 bytes @ 0x8
   453  0078                     	ds	1
   454  0079                     ??_get_btn_pressed:
   455                           
   456                           ; 1 bytes @ 0x9
   457  0079                     	ds	1
   458  007A                     get_btn_pressed@btn:
   459  007A                     ___lwmod@dividend:	
   460                           ; 1 bytes @ 0xA
   461                           
   462                           
   463                           ; 2 bytes @ 0xA
   464  007A                     	ds	2
   465  007C                     ??___lwmod:
   466                           
   467                           ; 1 bytes @ 0xC
   468  007C                     	ds	1
   469  007D                     ___lwmod@counter:
   470                           
   471                           ; 1 bytes @ 0xD
   472  007D                     	ds	1
   473  007E                     ??_main:
   474                           
   475                           	psect	cstackBANK0
   476  0027                     __pcstackBANK0:	
   477                           ; 1 bytes @ 0xE
   478                           
   479  0027                     ??_format_time:
   480                           
   481                           ; 1 bytes @ 0x0
   482  0027                     	ds	3
   483  002A                     format_time@cashed_value:
   484                           
   485                           ; 1 bytes @ 0x3
   486  002A                     	ds	1
   487  002B                     ??_update_disp:
   488                           
   489                           ; 1 bytes @ 0x4
   490  002B                     	ds	1
   491                           
   492                           	psect	maintext
   493  04F2                     __pmaintext:	
   494 ;;
   495 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   496 ;;
   497 ;; *************** function _main *****************
   498 ;; Defined at:
   499 ;;		line 29 in file "main.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : B00/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   513 ;;      Params:         0       0       0       0
   514 ;;      Locals:         0       0       0       0
   515 ;;      Temps:          0       0       0       0
   516 ;;      Totals:         0       0       0       0
   517 ;;Total ram usage:        0 bytes
   518 ;; Hardware stack levels required when called: 3
   519 ;; This function calls:
   520 ;;		_configure
   521 ;;		_get_btn_pressed
   522 ;;		_handle_btn_pressing
   523 ;;		_reset_stopwatch
   524 ;;		_update_disp
   525 ;;		_update_time_counter
   526 ;; This function is called by:
   527 ;;		Startup code after reset
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531                           
   532                           ;psect for function _main
   533  04F2                     _main:
   534  04F2                     l1584:	
   535                           ;incstack = 0
   536                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   537                           
   538  04F2  24FA               	fcall	_configure
   539  04F3  24EA               	fcall	_reset_stopwatch
   540  04F4                     l1586:
   541  04F4  2590               	fcall	_update_disp
   542  04F5                     l1588:
   543  04F5  255A               	fcall	_get_btn_pressed
   544  04F6  2521               	fcall	_handle_btn_pressing
   545  04F7                     l1590:
   546  04F7  253D               	fcall	_update_time_counter
   547  04F8  2CF4               	goto	l1586
   548  04F9  2800               	ljmp	start
   549  04FA                     __end_of_main:
   550                           
   551                           	psect	text1
   552  053D                     __ptext1:	
   553 ;; *************** function _update_time_counter *****************
   554 ;; Defined at:
   555 ;;		line 45 in file "stopwatch.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, status,2, status,0
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   569 ;;      Params:         0       0       0       0
   570 ;;      Locals:         0       0       0       0
   571 ;;      Temps:          0       0       0       0
   572 ;;      Totals:         0       0       0       0
   573 ;;Total ram usage:        0 bytes
   574 ;; Hardware stack levels used: 1
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_main
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           
   583                           ;psect for function _update_time_counter
   584  053D                     _update_time_counter:
   585  053D                     l1288:	
   586                           ;incstack = 0
   587                           ; Regs used in _update_time_counter: [wreg+status,2+status,0]
   588                           
   589                           
   590                           ;stopwatch.c: 47:     if (is_timer_work)
   591  053D  1283               	bcf	3,5	;RP0=0, select bank0
   592  053E  1303               	bcf	3,6	;RP1=0, select bank0
   593  053F  0825               	movf	_is_timer_work,w
   594  0540  1903               	btfsc	3,2
   595  0541  2D43               	goto	u741
   596  0542  2D44               	goto	u740
   597  0543                     u741:
   598  0543  2D59               	goto	l103
   599  0544                     u740:
   600  0544                     l1290:
   601                           
   602                           ;stopwatch.c: 48:     {;stopwatch.c: 49:         if (time_ms > 60000)
   603  0544  30EA               	movlw	234
   604  0545  0224               	subwf	_time_ms+1,w
   605  0546  3061               	movlw	97
   606  0547  1903               	skipnz
   607  0548  0223               	subwf	_time_ms,w
   608  0549  1C03               	skipc
   609  054A  2D4C               	goto	u751
   610  054B  2D4D               	goto	u750
   611  054C                     u751:
   612  054C  2D53               	goto	l102
   613  054D                     u750:
   614  054D                     l1292:
   615                           
   616                           ;stopwatch.c: 50:             time_ms -= 60000;
   617  054D  3060               	movlw	96
   618  054E  02A3               	subwf	_time_ms,f
   619  054F  30EA               	movlw	234
   620  0550  1C03               	skipc
   621  0551  03A4               	decf	_time_ms+1,f
   622  0552  02A4               	subwf	_time_ms+1,f
   623  0553                     l102:
   624                           
   625                           ;stopwatch.c: 51:         time_ms += 2;
   626  0553  3002               	movlw	2
   627  0554  07A3               	addwf	_time_ms,f
   628  0555  1803               	skipnc
   629  0556  0AA4               	incf	_time_ms+1,f
   630  0557  3000               	movlw	0
   631  0558  07A4               	addwf	_time_ms+1,f
   632  0559                     l103:
   633  0559  0008               	return
   634  055A                     __end_of_update_time_counter:
   635                           
   636                           	psect	text2
   637  0590                     __ptext2:	
   638 ;; *************** function _update_disp *****************
   639 ;; Defined at:
   640 ;;		line 51 in file "display.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;		None
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : 0/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   654 ;;      Params:         0       0       0       0
   655 ;;      Locals:         0       0       0       0
   656 ;;      Temps:          0       1       0       0
   657 ;;      Totals:         0       1       0       0
   658 ;;Total ram usage:        1 bytes
   659 ;; Hardware stack levels used: 1
   660 ;; Hardware stack levels required when called: 2
   661 ;; This function calls:
   662 ;;		_format_time
   663 ;;		_set_disp_digit_value
   664 ;; This function is called by:
   665 ;;		_main
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           
   670                           ;psect for function _update_disp
   671  0590                     _update_disp:
   672  0590                     l1554:	
   673                           ;incstack = 0
   674                           ; Regs used in _update_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   675                           
   676                           
   677                           ;display.c: 53:     format_time();
   678  0590  2681               	fcall	_format_time
   679  0591                     l1556:
   680                           
   681                           ;display.c: 55:     set_disp_digit_value(formatted_time.ms);
   682  0591  1283               	bcf	3,5	;RP0=0, select bank0
   683  0592  1303               	bcf	3,6	;RP1=0, select bank0
   684  0593  0820               	movf	_formatted_time,w
   685  0594  2731               	fcall	_set_disp_digit_value
   686  0595                     l1558:
   687                           
   688                           ;display.c: 56:     PORTAbits.RA0 = 1;
   689  0595  1283               	bcf	3,5	;RP0=0, select bank0
   690  0596  1303               	bcf	3,6	;RP1=0, select bank0
   691  0597  1405               	bsf	5,0	;volatile
   692  0598                     l1560:
   693                           
   694                           ;display.c: 57:     _delay((unsigned long)((1.586)*(4000000/4000.0)));
   695  0598  30E2               	movlw	226
   696  0599  1283               	bcf	3,5	;RP0=0, select bank0
   697  059A  1303               	bcf	3,6	;RP1=0, select bank0
   698  059B  00AB               	movwf	??_update_disp
   699  059C                     u1087:
   700  059C  2D9D               	nop2
   701  059D  2D9E               	nop2
   702  059E  0BAB               	decfsz	??_update_disp,f
   703  059F  2D9C               	goto	u1087
   704  05A0  2DA1               	nop2
   705  05A1                     l1562:
   706                           
   707                           ;display.c: 58:     PORTAbits.RA0 = 0;
   708  05A1  1283               	bcf	3,5	;RP0=0, select bank0
   709  05A2  1303               	bcf	3,6	;RP1=0, select bank0
   710  05A3  1005               	bcf	5,0	;volatile
   711  05A4                     l1564:
   712                           
   713                           ;display.c: 60:     set_disp_digit_value(formatted_time.sec_1_digit);
   714  05A4  0821               	movf	_formatted_time+1,w
   715  05A5  2731               	fcall	_set_disp_digit_value
   716  05A6                     l1566:
   717                           
   718                           ;display.c: 61:     PORTAbits.RA1 = 1;
   719  05A6  1283               	bcf	3,5	;RP0=0, select bank0
   720  05A7  1303               	bcf	3,6	;RP1=0, select bank0
   721  05A8  1485               	bsf	5,1	;volatile
   722  05A9                     l1568:
   723                           
   724                           ;display.c: 62:     PORTBbits.RB7 = 0;
   725  05A9  1386               	bcf	6,7	;volatile
   726  05AA                     l1570:
   727                           
   728                           ;display.c: 63:     _delay((unsigned long)((1.586)*(4000000/4000.0)));
   729  05AA  30E2               	movlw	226
   730  05AB  1283               	bcf	3,5	;RP0=0, select bank0
   731  05AC  1303               	bcf	3,6	;RP1=0, select bank0
   732  05AD  00AB               	movwf	??_update_disp
   733  05AE                     u1097:
   734  05AE  2DAF               	nop2
   735  05AF  2DB0               	nop2
   736  05B0  0BAB               	decfsz	??_update_disp,f
   737  05B1  2DAE               	goto	u1097
   738  05B2  2DB3               	nop2
   739  05B3                     l1572:
   740                           
   741                           ;display.c: 64:     PORTAbits.RA1 = 0;
   742  05B3  1283               	bcf	3,5	;RP0=0, select bank0
   743  05B4  1303               	bcf	3,6	;RP1=0, select bank0
   744  05B5  1085               	bcf	5,1	;volatile
   745  05B6                     l1574:
   746                           
   747                           ;display.c: 65:     PORTBbits.RB7 = 1;
   748  05B6  1786               	bsf	6,7	;volatile
   749  05B7                     l1576:
   750                           
   751                           ;display.c: 67:     set_disp_digit_value(formatted_time.sec_2_digit);
   752  05B7  0822               	movf	_formatted_time+2,w
   753  05B8  2731               	fcall	_set_disp_digit_value
   754  05B9                     l1578:
   755                           
   756                           ;display.c: 68:     PORTAbits.RA2 = 1;
   757  05B9  1283               	bcf	3,5	;RP0=0, select bank0
   758  05BA  1303               	bcf	3,6	;RP1=0, select bank0
   759  05BB  1505               	bsf	5,2	;volatile
   760  05BC                     l1580:
   761                           
   762                           ;display.c: 69:     _delay((unsigned long)((1.586)*(4000000/4000.0)));
   763  05BC  30E2               	movlw	226
   764  05BD  1283               	bcf	3,5	;RP0=0, select bank0
   765  05BE  1303               	bcf	3,6	;RP1=0, select bank0
   766  05BF  00AB               	movwf	??_update_disp
   767  05C0                     u1107:
   768  05C0  2DC1               	nop2
   769  05C1  2DC2               	nop2
   770  05C2  0BAB               	decfsz	??_update_disp,f
   771  05C3  2DC0               	goto	u1107
   772  05C4  2DC5               	nop2
   773  05C5                     l1582:
   774                           
   775                           ;display.c: 70:     PORTAbits.RA2 = 0;
   776  05C5  1283               	bcf	3,5	;RP0=0, select bank0
   777  05C6  1303               	bcf	3,6	;RP1=0, select bank0
   778  05C7  1105               	bcf	5,2	;volatile
   779  05C8                     l134:
   780  05C8  0008               	return
   781  05C9                     __end_of_update_disp:
   782                           
   783                           	psect	text3
   784  0731                     __ptext3:	
   785 ;; *************** function _set_disp_digit_value *****************
   786 ;; Defined at:
   787 ;;		line 12 in file "display.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  value           1    wreg     unsigned char 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  value           1    2[COMMON] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   801 ;;      Params:         0       0       0       0
   802 ;;      Locals:         1       0       0       0
   803 ;;      Temps:          2       0       0       0
   804 ;;      Totals:         3       0       0       0
   805 ;;Total ram usage:        3 bytes
   806 ;; Hardware stack levels used: 1
   807 ;; This function calls:
   808 ;;		Nothing
   809 ;; This function is called by:
   810 ;;		_update_disp
   811 ;; This function uses a non-reentrant model
   812 ;;
   813                           
   814                           
   815                           ;psect for function _set_disp_digit_value
   816  0731                     _set_disp_digit_value:
   817                           
   818                           ;incstack = 0
   819                           ; Regs used in _set_disp_digit_value: [wreg-fsr0h+status,2+status,0]
   820                           ;set_disp_digit_value@value stored from wreg
   821  0731  00F2               	movwf	set_disp_digit_value@value
   822  0732                     l1194:
   823                           
   824                           ;display.c: 12: static void set_disp_digit_value(uint8_t value);display.c: 13: {;display
      +                          .c: 14:     switch(value)
   825  0732  2F65               	goto	l1218
   826  0733                     l1196:
   827                           
   828                           ;display.c: 17:             PORTB = 0xC0;
   829  0733  30C0               	movlw	192
   830  0734  1283               	bcf	3,5	;RP0=0, select bank0
   831  0735  1303               	bcf	3,6	;RP1=0, select bank0
   832  0736  0086               	movwf	6	;volatile
   833                           
   834                           ;display.c: 18:             break;
   835  0737  2F8D               	goto	l131
   836  0738                     l1198:
   837                           
   838                           ;display.c: 20:             PORTB = 0xF9;
   839  0738  30F9               	movlw	249
   840  0739  1283               	bcf	3,5	;RP0=0, select bank0
   841  073A  1303               	bcf	3,6	;RP1=0, select bank0
   842  073B  0086               	movwf	6	;volatile
   843                           
   844                           ;display.c: 21:             break;
   845  073C  2F8D               	goto	l131
   846  073D                     l1200:
   847                           
   848                           ;display.c: 23:             PORTB = 0xA4;
   849  073D  30A4               	movlw	164
   850  073E  1283               	bcf	3,5	;RP0=0, select bank0
   851  073F  1303               	bcf	3,6	;RP1=0, select bank0
   852  0740  0086               	movwf	6	;volatile
   853                           
   854                           ;display.c: 24:             break;
   855  0741  2F8D               	goto	l131
   856  0742                     l1202:
   857                           
   858                           ;display.c: 26:             PORTB = 0xB0;
   859  0742  30B0               	movlw	176
   860  0743  1283               	bcf	3,5	;RP0=0, select bank0
   861  0744  1303               	bcf	3,6	;RP1=0, select bank0
   862  0745  0086               	movwf	6	;volatile
   863                           
   864                           ;display.c: 27:             break;
   865  0746  2F8D               	goto	l131
   866  0747                     l1204:
   867                           
   868                           ;display.c: 29:             PORTB = 0x99;
   869  0747  3099               	movlw	153
   870  0748  1283               	bcf	3,5	;RP0=0, select bank0
   871  0749  1303               	bcf	3,6	;RP1=0, select bank0
   872  074A  0086               	movwf	6	;volatile
   873                           
   874                           ;display.c: 30:             break;
   875  074B  2F8D               	goto	l131
   876  074C                     l1206:
   877                           
   878                           ;display.c: 32:             PORTB = 0x92;
   879  074C  3092               	movlw	146
   880  074D  1283               	bcf	3,5	;RP0=0, select bank0
   881  074E  1303               	bcf	3,6	;RP1=0, select bank0
   882  074F  0086               	movwf	6	;volatile
   883                           
   884                           ;display.c: 33:             break;
   885  0750  2F8D               	goto	l131
   886  0751                     l1208:
   887                           
   888                           ;display.c: 35:             PORTB = 0x82;
   889  0751  3082               	movlw	130
   890  0752  1283               	bcf	3,5	;RP0=0, select bank0
   891  0753  1303               	bcf	3,6	;RP1=0, select bank0
   892  0754  0086               	movwf	6	;volatile
   893                           
   894                           ;display.c: 36:             break;
   895  0755  2F8D               	goto	l131
   896  0756                     l1210:
   897                           
   898                           ;display.c: 38:             PORTB = 0xF8;
   899  0756  30F8               	movlw	248
   900  0757  1283               	bcf	3,5	;RP0=0, select bank0
   901  0758  1303               	bcf	3,6	;RP1=0, select bank0
   902  0759  0086               	movwf	6	;volatile
   903                           
   904                           ;display.c: 39:             break;
   905  075A  2F8D               	goto	l131
   906  075B                     l1212:
   907                           
   908                           ;display.c: 41:             PORTB = 0x80;
   909  075B  3080               	movlw	128
   910  075C  1283               	bcf	3,5	;RP0=0, select bank0
   911  075D  1303               	bcf	3,6	;RP1=0, select bank0
   912  075E  0086               	movwf	6	;volatile
   913                           
   914                           ;display.c: 42:             break;
   915  075F  2F8D               	goto	l131
   916  0760                     l1214:
   917                           
   918                           ;display.c: 44:             PORTB = 0x90;
   919  0760  3090               	movlw	144
   920  0761  1283               	bcf	3,5	;RP0=0, select bank0
   921  0762  1303               	bcf	3,6	;RP1=0, select bank0
   922  0763  0086               	movwf	6	;volatile
   923                           
   924                           ;display.c: 45:             break;
   925  0764  2F8D               	goto	l131
   926  0765                     l1218:
   927  0765  0872               	movf	set_disp_digit_value@value,w
   928  0766  00F0               	movwf	??_set_disp_digit_value
   929  0767  01F1               	clrf	??_set_disp_digit_value+1
   930                           
   931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   932                           ; Switch size 1, requested type "simple"
   933                           ; Number of cases is 1, Range of values is 0 to 0
   934                           ; switch strategies available:
   935                           ; Name         Instructions Cycles
   936                           ; simple_byte            4     3 (average)
   937                           ; direct_byte            7     6 (fixed)
   938                           ; jumptable            260     6 (fixed)
   939                           ;	Chosen strategy is simple_byte
   940  0768  0871               	movf	??_set_disp_digit_value+1,w
   941  0769  3A00               	xorlw	0	; case 0
   942  076A  1903               	skipnz
   943  076B  2F6D               	goto	l1632
   944  076C  2F8D               	goto	l131
   945  076D                     l1632:
   946                           
   947                           ; Switch size 1, requested type "simple"
   948                           ; Number of cases is 10, Range of values is 0 to 9
   949                           ; switch strategies available:
   950                           ; Name         Instructions Cycles
   951                           ; direct_byte           16     6 (fixed)
   952                           ; simple_byte           31    16 (average)
   953                           ; jumptable            260     6 (fixed)
   954                           ;	Chosen strategy is simple_byte
   955  076D  0870               	movf	??_set_disp_digit_value,w
   956  076E  3A00               	xorlw	0	; case 0
   957  076F  1903               	skipnz
   958  0770  2F33               	goto	l1196
   959  0771  3A01               	xorlw	1	; case 1
   960  0772  1903               	skipnz
   961  0773  2F38               	goto	l1198
   962  0774  3A03               	xorlw	3	; case 2
   963  0775  1903               	skipnz
   964  0776  2F3D               	goto	l1200
   965  0777  3A01               	xorlw	1	; case 3
   966  0778  1903               	skipnz
   967  0779  2F42               	goto	l1202
   968  077A  3A07               	xorlw	7	; case 4
   969  077B  1903               	skipnz
   970  077C  2F47               	goto	l1204
   971  077D  3A01               	xorlw	1	; case 5
   972  077E  1903               	skipnz
   973  077F  2F4C               	goto	l1206
   974  0780  3A03               	xorlw	3	; case 6
   975  0781  1903               	skipnz
   976  0782  2F51               	goto	l1208
   977  0783  3A01               	xorlw	1	; case 7
   978  0784  1903               	skipnz
   979  0785  2F56               	goto	l1210
   980  0786  3A0F               	xorlw	15	; case 8
   981  0787  1903               	skipnz
   982  0788  2F5B               	goto	l1212
   983  0789  3A01               	xorlw	1	; case 9
   984  078A  1903               	skipnz
   985  078B  2F60               	goto	l1214
   986  078C  2F8D               	goto	l131
   987  078D                     l131:
   988  078D  0008               	return
   989  078E                     __end_of_set_disp_digit_value:
   990                           
   991                           	psect	text4
   992  0681                     __ptext4:	
   993 ;; *************** function _format_time *****************
   994 ;; Defined at:
   995 ;;		line 35 in file "stopwatch.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;		None
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  cashed_value    1    3[BANK0 ] unsigned char 
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, status,2, status,0, pclath, cstack
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1009 ;;      Params:         0       0       0       0
  1010 ;;      Locals:         0       1       0       0
  1011 ;;      Temps:          0       3       0       0
  1012 ;;      Totals:         0       4       0       0
  1013 ;;Total ram usage:        4 bytes
  1014 ;; Hardware stack levels used: 1
  1015 ;; Hardware stack levels required when called: 1
  1016 ;; This function calls:
  1017 ;;		___awdiv
  1018 ;;		___awmod
  1019 ;;		___lwdiv
  1020 ;;		___lwmod
  1021 ;; This function is called by:
  1022 ;;		_update_disp
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _format_time
  1028  0681                     _format_time:
  1029  0681                     l1552:	
  1030                           ;incstack = 0
  1031                           ; Regs used in _format_time: [wreg+status,2+status,0+pclath+cstack]
  1032                           
  1033                           
  1034                           ;stopwatch.c: 37:     uint8_t cashed_value;;stopwatch.c: 39:     formatted_time.ms = tim
      +                          e_ms / 100 % 10;
  1035  0681  300A               	movlw	10
  1036  0682  00F8               	movwf	___lwmod@divisor
  1037  0683  3000               	movlw	0
  1038  0684  00F9               	movwf	___lwmod@divisor+1
  1039  0685  3064               	movlw	100
  1040  0686  00F0               	movwf	___lwdiv@divisor
  1041  0687  3000               	movlw	0
  1042  0688  00F1               	movwf	___lwdiv@divisor+1
  1043  0689  1283               	bcf	3,5	;RP0=0, select bank0
  1044  068A  1303               	bcf	3,6	;RP1=0, select bank0
  1045  068B  0824               	movf	_time_ms+1,w
  1046  068C  00F3               	movwf	___lwdiv@dividend+1
  1047  068D  0823               	movf	_time_ms,w
  1048  068E  00F2               	movwf	___lwdiv@dividend
  1049  068F  263D               	fcall	___lwdiv
  1050  0690  0871               	movf	?___lwdiv+1,w
  1051  0691  00FB               	movwf	___lwmod@dividend+1
  1052  0692  0870               	movf	?___lwdiv,w
  1053  0693  00FA               	movwf	___lwmod@dividend
  1054  0694  2603               	fcall	___lwmod
  1055  0695  0878               	movf	?___lwmod,w
  1056  0696  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0697  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0698  00A7               	movwf	??_format_time
  1059  0699  0827               	movf	??_format_time,w
  1060  069A  00A0               	movwf	_formatted_time
  1061                           
  1062                           ;stopwatch.c: 40:     cashed_value = time_ms / 1000 % 60;
  1063  069B  303C               	movlw	60
  1064  069C  00F8               	movwf	___lwmod@divisor
  1065  069D  3000               	movlw	0
  1066  069E  00F9               	movwf	___lwmod@divisor+1
  1067  069F  30E8               	movlw	232
  1068  06A0  00F0               	movwf	___lwdiv@divisor
  1069  06A1  3003               	movlw	3
  1070  06A2  00F1               	movwf	___lwdiv@divisor+1
  1071  06A3  0824               	movf	_time_ms+1,w
  1072  06A4  00F3               	movwf	___lwdiv@dividend+1
  1073  06A5  0823               	movf	_time_ms,w
  1074  06A6  00F2               	movwf	___lwdiv@dividend
  1075  06A7  263D               	fcall	___lwdiv
  1076  06A8  0871               	movf	?___lwdiv+1,w
  1077  06A9  00FB               	movwf	___lwmod@dividend+1
  1078  06AA  0870               	movf	?___lwdiv,w
  1079  06AB  00FA               	movwf	___lwmod@dividend
  1080  06AC  2603               	fcall	___lwmod
  1081  06AD  0878               	movf	?___lwmod,w
  1082  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1083  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1084  06B0  00A7               	movwf	??_format_time
  1085  06B1  0827               	movf	??_format_time,w
  1086  06B2  00AA               	movwf	format_time@cashed_value
  1087                           
  1088                           ;stopwatch.c: 41:     formatted_time.sec_1_digit = cashed_value % 10;
  1089  06B3  300A               	movlw	10
  1090  06B4  00F0               	movwf	___awmod@divisor
  1091  06B5  3000               	movlw	0
  1092  06B6  00F1               	movwf	___awmod@divisor+1
  1093  06B7  082A               	movf	format_time@cashed_value,w
  1094  06B8  00A7               	movwf	??_format_time
  1095  06B9  01A8               	clrf	??_format_time+1
  1096  06BA  0827               	movf	??_format_time,w
  1097  06BB  00F2               	movwf	___awmod@dividend
  1098  06BC  0828               	movf	??_format_time+1,w
  1099  06BD  00F3               	movwf	___awmod@dividend+1
  1100  06BE  26D8               	fcall	___awmod
  1101  06BF  0870               	movf	?___awmod,w
  1102  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1103  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1104  06C2  00A9               	movwf	??_format_time+2
  1105  06C3  0829               	movf	??_format_time+2,w
  1106  06C4  00A1               	movwf	_formatted_time+1
  1107                           
  1108                           ;stopwatch.c: 42:     formatted_time.sec_2_digit = (uint8_t)(cashed_value / 10);
  1109  06C5  300A               	movlw	10
  1110  06C6  00F0               	movwf	___awdiv@divisor
  1111  06C7  3000               	movlw	0
  1112  06C8  00F1               	movwf	___awdiv@divisor+1
  1113  06C9  082A               	movf	format_time@cashed_value,w
  1114  06CA  00A7               	movwf	??_format_time
  1115  06CB  01A8               	clrf	??_format_time+1
  1116  06CC  0827               	movf	??_format_time,w
  1117  06CD  00F2               	movwf	___awdiv@dividend
  1118  06CE  0828               	movf	??_format_time+1,w
  1119  06CF  00F3               	movwf	___awdiv@dividend+1
  1120  06D0  278E               	fcall	___awdiv
  1121  06D1  0870               	movf	?___awdiv,w
  1122  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1123  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1124  06D4  00A9               	movwf	??_format_time+2
  1125  06D5  0829               	movf	??_format_time+2,w
  1126  06D6  00A2               	movwf	_formatted_time+2
  1127  06D7                     l98:
  1128  06D7  0008               	return
  1129  06D8                     __end_of_format_time:
  1130                           
  1131                           	psect	text5
  1132  0603                     __ptext5:	
  1133 ;; *************** function ___lwmod *****************
  1134 ;; Defined at:
  1135 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/lwmod.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;  divisor         2    8[COMMON] unsigned int 
  1138 ;;  dividend        2   10[COMMON] unsigned int 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  counter         1   13[COMMON] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  2    8[COMMON] unsigned int 
  1143 ;; Registers used:
  1144 ;;		wreg, status,2, status,0
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1150 ;;      Params:         4       0       0       0
  1151 ;;      Locals:         1       0       0       0
  1152 ;;      Temps:          1       0       0       0
  1153 ;;      Totals:         6       0       0       0
  1154 ;;Total ram usage:        6 bytes
  1155 ;; Hardware stack levels used: 1
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_format_time
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           
  1164                           ;psect for function ___lwmod
  1165  0603                     ___lwmod:
  1166  0603                     l1530:	
  1167                           ;incstack = 0
  1168                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1169                           
  1170  0603  0878               	movf	___lwmod@divisor,w
  1171  0604  0479               	iorwf	___lwmod@divisor+1,w
  1172  0605  1903               	btfsc	3,2
  1173  0606  2E08               	goto	u1021
  1174  0607  2E09               	goto	u1020
  1175  0608                     u1021:
  1176  0608  2E38               	goto	l1548
  1177  0609                     u1020:
  1178  0609                     l1532:
  1179  0609  01FD               	clrf	___lwmod@counter
  1180  060A  0AFD               	incf	___lwmod@counter,f
  1181  060B  2E17               	goto	l1538
  1182  060C                     l1534:
  1183  060C  3001               	movlw	1
  1184  060D                     u1035:
  1185  060D  1003               	clrc
  1186  060E  0DF8               	rlf	___lwmod@divisor,f
  1187  060F  0DF9               	rlf	___lwmod@divisor+1,f
  1188  0610  3EFF               	addlw	-1
  1189  0611  1D03               	skipz
  1190  0612  2E0D               	goto	u1035
  1191  0613                     l1536:
  1192  0613  3001               	movlw	1
  1193  0614  00FC               	movwf	??___lwmod
  1194  0615  087C               	movf	??___lwmod,w
  1195  0616  07FD               	addwf	___lwmod@counter,f
  1196  0617                     l1538:
  1197  0617  1FF9               	btfss	___lwmod@divisor+1,7
  1198  0618  2E1A               	goto	u1041
  1199  0619  2E1B               	goto	u1040
  1200  061A                     u1041:
  1201  061A  2E0C               	goto	l1534
  1202  061B                     u1040:
  1203  061B                     l1540:
  1204  061B  0879               	movf	___lwmod@divisor+1,w
  1205  061C  027B               	subwf	___lwmod@dividend+1,w
  1206  061D  1D03               	skipz
  1207  061E  2E21               	goto	u1055
  1208  061F  0878               	movf	___lwmod@divisor,w
  1209  0620  027A               	subwf	___lwmod@dividend,w
  1210  0621                     u1055:
  1211  0621  1C03               	skipc
  1212  0622  2E24               	goto	u1051
  1213  0623  2E25               	goto	u1050
  1214  0624                     u1051:
  1215  0624  2E2B               	goto	l1544
  1216  0625                     u1050:
  1217  0625                     l1542:
  1218  0625  0878               	movf	___lwmod@divisor,w
  1219  0626  02FA               	subwf	___lwmod@dividend,f
  1220  0627  0879               	movf	___lwmod@divisor+1,w
  1221  0628  1C03               	skipc
  1222  0629  03FB               	decf	___lwmod@dividend+1,f
  1223  062A  02FB               	subwf	___lwmod@dividend+1,f
  1224  062B                     l1544:
  1225  062B  3001               	movlw	1
  1226  062C                     u1065:
  1227  062C  1003               	clrc
  1228  062D  0CF9               	rrf	___lwmod@divisor+1,f
  1229  062E  0CF8               	rrf	___lwmod@divisor,f
  1230  062F  3EFF               	addlw	-1
  1231  0630  1D03               	skipz
  1232  0631  2E2C               	goto	u1065
  1233  0632                     l1546:
  1234  0632  3001               	movlw	1
  1235  0633  02FD               	subwf	___lwmod@counter,f
  1236  0634  1D03               	btfss	3,2
  1237  0635  2E37               	goto	u1071
  1238  0636  2E38               	goto	u1070
  1239  0637                     u1071:
  1240  0637  2E1B               	goto	l1540
  1241  0638                     u1070:
  1242  0638                     l1548:
  1243  0638  087B               	movf	___lwmod@dividend+1,w
  1244  0639  00F9               	movwf	?___lwmod+1
  1245  063A  087A               	movf	___lwmod@dividend,w
  1246  063B  00F8               	movwf	?___lwmod
  1247  063C                     l502:
  1248  063C  0008               	return
  1249  063D                     __end_of___lwmod:
  1250                           
  1251                           	psect	text6
  1252  063D                     __ptext6:	
  1253 ;; *************** function ___lwdiv *****************
  1254 ;; Defined at:
  1255 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/lwdiv.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  divisor         2    0[COMMON] unsigned int 
  1258 ;;  dividend        2    2[COMMON] unsigned int 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  quotient        2    5[COMMON] unsigned int 
  1261 ;;  counter         1    7[COMMON] unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  2    0[COMMON] unsigned int 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1271 ;;      Params:         4       0       0       0
  1272 ;;      Locals:         3       0       0       0
  1273 ;;      Temps:          1       0       0       0
  1274 ;;      Totals:         8       0       0       0
  1275 ;;Total ram usage:        8 bytes
  1276 ;; Hardware stack levels used: 1
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_format_time
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           
  1285                           ;psect for function ___lwdiv
  1286  063D                     ___lwdiv:
  1287  063D                     l1342:	
  1288                           ;incstack = 0
  1289                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1290                           
  1291  063D  01F5               	clrf	___lwdiv@quotient
  1292  063E  01F6               	clrf	___lwdiv@quotient+1
  1293  063F                     l1344:
  1294  063F  0870               	movf	___lwdiv@divisor,w
  1295  0640  0471               	iorwf	___lwdiv@divisor+1,w
  1296  0641  1903               	btfsc	3,2
  1297  0642  2E44               	goto	u761
  1298  0643  2E45               	goto	u760
  1299  0644                     u761:
  1300  0644  2E7C               	goto	l1364
  1301  0645                     u760:
  1302  0645                     l1346:
  1303  0645  01F7               	clrf	___lwdiv@counter
  1304  0646  0AF7               	incf	___lwdiv@counter,f
  1305  0647  2E53               	goto	l1352
  1306  0648                     l1348:
  1307  0648  3001               	movlw	1
  1308  0649                     u775:
  1309  0649  1003               	clrc
  1310  064A  0DF0               	rlf	___lwdiv@divisor,f
  1311  064B  0DF1               	rlf	___lwdiv@divisor+1,f
  1312  064C  3EFF               	addlw	-1
  1313  064D  1D03               	skipz
  1314  064E  2E49               	goto	u775
  1315  064F                     l1350:
  1316  064F  3001               	movlw	1
  1317  0650  00F4               	movwf	??___lwdiv
  1318  0651  0874               	movf	??___lwdiv,w
  1319  0652  07F7               	addwf	___lwdiv@counter,f
  1320  0653                     l1352:
  1321  0653  1FF1               	btfss	___lwdiv@divisor+1,7
  1322  0654  2E56               	goto	u781
  1323  0655  2E57               	goto	u780
  1324  0656                     u781:
  1325  0656  2E48               	goto	l1348
  1326  0657                     u780:
  1327  0657                     l1354:
  1328  0657  3001               	movlw	1
  1329  0658                     u795:
  1330  0658  1003               	clrc
  1331  0659  0DF5               	rlf	___lwdiv@quotient,f
  1332  065A  0DF6               	rlf	___lwdiv@quotient+1,f
  1333  065B  3EFF               	addlw	-1
  1334  065C  1D03               	skipz
  1335  065D  2E58               	goto	u795
  1336  065E  0871               	movf	___lwdiv@divisor+1,w
  1337  065F  0273               	subwf	___lwdiv@dividend+1,w
  1338  0660  1D03               	skipz
  1339  0661  2E64               	goto	u805
  1340  0662  0870               	movf	___lwdiv@divisor,w
  1341  0663  0272               	subwf	___lwdiv@dividend,w
  1342  0664                     u805:
  1343  0664  1C03               	skipc
  1344  0665  2E67               	goto	u801
  1345  0666  2E68               	goto	u800
  1346  0667                     u801:
  1347  0667  2E6F               	goto	l1360
  1348  0668                     u800:
  1349  0668                     l1356:
  1350  0668  0870               	movf	___lwdiv@divisor,w
  1351  0669  02F2               	subwf	___lwdiv@dividend,f
  1352  066A  0871               	movf	___lwdiv@divisor+1,w
  1353  066B  1C03               	skipc
  1354  066C  03F3               	decf	___lwdiv@dividend+1,f
  1355  066D  02F3               	subwf	___lwdiv@dividend+1,f
  1356  066E                     l1358:
  1357  066E  1475               	bsf	___lwdiv@quotient,0
  1358  066F                     l1360:
  1359  066F  3001               	movlw	1
  1360  0670                     u815:
  1361  0670  1003               	clrc
  1362  0671  0CF1               	rrf	___lwdiv@divisor+1,f
  1363  0672  0CF0               	rrf	___lwdiv@divisor,f
  1364  0673  3EFF               	addlw	-1
  1365  0674  1D03               	skipz
  1366  0675  2E70               	goto	u815
  1367  0676                     l1362:
  1368  0676  3001               	movlw	1
  1369  0677  02F7               	subwf	___lwdiv@counter,f
  1370  0678  1D03               	btfss	3,2
  1371  0679  2E7B               	goto	u821
  1372  067A  2E7C               	goto	u820
  1373  067B                     u821:
  1374  067B  2E57               	goto	l1354
  1375  067C                     u820:
  1376  067C                     l1364:
  1377  067C  0876               	movf	___lwdiv@quotient+1,w
  1378  067D  00F1               	movwf	?___lwdiv+1
  1379  067E  0875               	movf	___lwdiv@quotient,w
  1380  067F  00F0               	movwf	?___lwdiv
  1381  0680                     l492:
  1382  0680  0008               	return
  1383  0681                     __end_of___lwdiv:
  1384                           
  1385                           	psect	text7
  1386  06D8                     __ptext7:	
  1387 ;; *************** function ___awmod *****************
  1388 ;; Defined at:
  1389 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/awmod.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  divisor         2    0[COMMON] int 
  1392 ;;  dividend        2    2[COMMON] int 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  sign            1    6[COMMON] unsigned char 
  1395 ;;  counter         1    5[COMMON] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2    0[COMMON] int 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1405 ;;      Params:         4       0       0       0
  1406 ;;      Locals:         2       0       0       0
  1407 ;;      Temps:          1       0       0       0
  1408 ;;      Totals:         7       0       0       0
  1409 ;;Total ram usage:        7 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_format_time
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           
  1419                           ;psect for function ___awmod
  1420  06D8                     ___awmod:
  1421  06D8                     l1492:	
  1422                           ;incstack = 0
  1423                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1424                           
  1425  06D8  01F6               	clrf	___awmod@sign
  1426  06D9                     l1494:
  1427  06D9  1FF3               	btfss	___awmod@dividend+1,7
  1428  06DA  2EDC               	goto	u931
  1429  06DB  2EDD               	goto	u930
  1430  06DC                     u931:
  1431  06DC  2EE4               	goto	l1500
  1432  06DD                     u930:
  1433  06DD                     l1496:
  1434  06DD  09F2               	comf	___awmod@dividend,f
  1435  06DE  09F3               	comf	___awmod@dividend+1,f
  1436  06DF  0AF2               	incf	___awmod@dividend,f
  1437  06E0  1903               	skipnz
  1438  06E1  0AF3               	incf	___awmod@dividend+1,f
  1439  06E2                     l1498:
  1440  06E2  01F6               	clrf	___awmod@sign
  1441  06E3  0AF6               	incf	___awmod@sign,f
  1442  06E4                     l1500:
  1443  06E4  1FF1               	btfss	___awmod@divisor+1,7
  1444  06E5  2EE7               	goto	u941
  1445  06E6  2EE8               	goto	u940
  1446  06E7                     u941:
  1447  06E7  2EED               	goto	l1504
  1448  06E8                     u940:
  1449  06E8                     l1502:
  1450  06E8  09F0               	comf	___awmod@divisor,f
  1451  06E9  09F1               	comf	___awmod@divisor+1,f
  1452  06EA  0AF0               	incf	___awmod@divisor,f
  1453  06EB  1903               	skipnz
  1454  06EC  0AF1               	incf	___awmod@divisor+1,f
  1455  06ED                     l1504:
  1456  06ED  0870               	movf	___awmod@divisor,w
  1457  06EE  0471               	iorwf	___awmod@divisor+1,w
  1458  06EF  1903               	btfsc	3,2
  1459  06F0  2EF2               	goto	u951
  1460  06F1  2EF3               	goto	u950
  1461  06F2                     u951:
  1462  06F2  2F22               	goto	l1522
  1463  06F3                     u950:
  1464  06F3                     l1506:
  1465  06F3  01F5               	clrf	___awmod@counter
  1466  06F4  0AF5               	incf	___awmod@counter,f
  1467  06F5  2F01               	goto	l1512
  1468  06F6                     l1508:
  1469  06F6  3001               	movlw	1
  1470  06F7                     u965:
  1471  06F7  1003               	clrc
  1472  06F8  0DF0               	rlf	___awmod@divisor,f
  1473  06F9  0DF1               	rlf	___awmod@divisor+1,f
  1474  06FA  3EFF               	addlw	-1
  1475  06FB  1D03               	skipz
  1476  06FC  2EF7               	goto	u965
  1477  06FD                     l1510:
  1478  06FD  3001               	movlw	1
  1479  06FE  00F4               	movwf	??___awmod
  1480  06FF  0874               	movf	??___awmod,w
  1481  0700  07F5               	addwf	___awmod@counter,f
  1482  0701                     l1512:
  1483  0701  1FF1               	btfss	___awmod@divisor+1,7
  1484  0702  2F04               	goto	u971
  1485  0703  2F05               	goto	u970
  1486  0704                     u971:
  1487  0704  2EF6               	goto	l1508
  1488  0705                     u970:
  1489  0705                     l1514:
  1490  0705  0871               	movf	___awmod@divisor+1,w
  1491  0706  0273               	subwf	___awmod@dividend+1,w
  1492  0707  1D03               	skipz
  1493  0708  2F0B               	goto	u985
  1494  0709  0870               	movf	___awmod@divisor,w
  1495  070A  0272               	subwf	___awmod@dividend,w
  1496  070B                     u985:
  1497  070B  1C03               	skipc
  1498  070C  2F0E               	goto	u981
  1499  070D  2F0F               	goto	u980
  1500  070E                     u981:
  1501  070E  2F15               	goto	l1518
  1502  070F                     u980:
  1503  070F                     l1516:
  1504  070F  0870               	movf	___awmod@divisor,w
  1505  0710  02F2               	subwf	___awmod@dividend,f
  1506  0711  0871               	movf	___awmod@divisor+1,w
  1507  0712  1C03               	skipc
  1508  0713  03F3               	decf	___awmod@dividend+1,f
  1509  0714  02F3               	subwf	___awmod@dividend+1,f
  1510  0715                     l1518:
  1511  0715  3001               	movlw	1
  1512  0716                     u995:
  1513  0716  1003               	clrc
  1514  0717  0CF1               	rrf	___awmod@divisor+1,f
  1515  0718  0CF0               	rrf	___awmod@divisor,f
  1516  0719  3EFF               	addlw	-1
  1517  071A  1D03               	skipz
  1518  071B  2F16               	goto	u995
  1519  071C                     l1520:
  1520  071C  3001               	movlw	1
  1521  071D  02F5               	subwf	___awmod@counter,f
  1522  071E  1D03               	btfss	3,2
  1523  071F  2F21               	goto	u1001
  1524  0720  2F22               	goto	u1000
  1525  0721                     u1001:
  1526  0721  2F05               	goto	l1514
  1527  0722                     u1000:
  1528  0722                     l1522:
  1529  0722  0876               	movf	___awmod@sign,w
  1530  0723  1903               	btfsc	3,2
  1531  0724  2F26               	goto	u1011
  1532  0725  2F27               	goto	u1010
  1533  0726                     u1011:
  1534  0726  2F2C               	goto	l1526
  1535  0727                     u1010:
  1536  0727                     l1524:
  1537  0727  09F2               	comf	___awmod@dividend,f
  1538  0728  09F3               	comf	___awmod@dividend+1,f
  1539  0729  0AF2               	incf	___awmod@dividend,f
  1540  072A  1903               	skipnz
  1541  072B  0AF3               	incf	___awmod@dividend+1,f
  1542  072C                     l1526:
  1543  072C  0873               	movf	___awmod@dividend+1,w
  1544  072D  00F1               	movwf	?___awmod+1
  1545  072E  0872               	movf	___awmod@dividend,w
  1546  072F  00F0               	movwf	?___awmod
  1547  0730                     l386:
  1548  0730  0008               	return
  1549  0731                     __end_of___awmod:
  1550                           
  1551                           	psect	text8
  1552  078E                     __ptext8:	
  1553 ;; *************** function ___awdiv *****************
  1554 ;; Defined at:
  1555 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/awdiv.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  divisor         2    0[COMMON] int 
  1558 ;;  dividend        2    2[COMMON] int 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  quotient        2    7[COMMON] int 
  1561 ;;  sign            1    6[COMMON] unsigned char 
  1562 ;;  counter         1    5[COMMON] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2    0[COMMON] int 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1572 ;;      Params:         4       0       0       0
  1573 ;;      Locals:         4       0       0       0
  1574 ;;      Temps:          1       0       0       0
  1575 ;;      Totals:         9       0       0       0
  1576 ;;Total ram usage:        9 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_format_time
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           
  1586                           ;psect for function ___awdiv
  1587  078E                     ___awdiv:
  1588  078E                     l1448:	
  1589                           ;incstack = 0
  1590                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1591                           
  1592  078E  01F6               	clrf	___awdiv@sign
  1593  078F                     l1450:
  1594  078F  1FF1               	btfss	___awdiv@divisor+1,7
  1595  0790  2F92               	goto	u831
  1596  0791  2F93               	goto	u830
  1597  0792                     u831:
  1598  0792  2F9A               	goto	l1456
  1599  0793                     u830:
  1600  0793                     l1452:
  1601  0793  09F0               	comf	___awdiv@divisor,f
  1602  0794  09F1               	comf	___awdiv@divisor+1,f
  1603  0795  0AF0               	incf	___awdiv@divisor,f
  1604  0796  1903               	skipnz
  1605  0797  0AF1               	incf	___awdiv@divisor+1,f
  1606  0798                     l1454:
  1607  0798  01F6               	clrf	___awdiv@sign
  1608  0799  0AF6               	incf	___awdiv@sign,f
  1609  079A                     l1456:
  1610  079A  1FF3               	btfss	___awdiv@dividend+1,7
  1611  079B  2F9D               	goto	u841
  1612  079C  2F9E               	goto	u840
  1613  079D                     u841:
  1614  079D  2FA7               	goto	l1462
  1615  079E                     u840:
  1616  079E                     l1458:
  1617  079E  09F2               	comf	___awdiv@dividend,f
  1618  079F  09F3               	comf	___awdiv@dividend+1,f
  1619  07A0  0AF2               	incf	___awdiv@dividend,f
  1620  07A1  1903               	skipnz
  1621  07A2  0AF3               	incf	___awdiv@dividend+1,f
  1622  07A3                     l1460:
  1623  07A3  3001               	movlw	1
  1624  07A4  00F4               	movwf	??___awdiv
  1625  07A5  0874               	movf	??___awdiv,w
  1626  07A6  06F6               	xorwf	___awdiv@sign,f
  1627  07A7                     l1462:
  1628  07A7  01F7               	clrf	___awdiv@quotient
  1629  07A8  01F8               	clrf	___awdiv@quotient+1
  1630  07A9                     l1464:
  1631  07A9  0870               	movf	___awdiv@divisor,w
  1632  07AA  0471               	iorwf	___awdiv@divisor+1,w
  1633  07AB  1903               	btfsc	3,2
  1634  07AC  2FAE               	goto	u851
  1635  07AD  2FAF               	goto	u850
  1636  07AE                     u851:
  1637  07AE  2FE6               	goto	l1484
  1638  07AF                     u850:
  1639  07AF                     l1466:
  1640  07AF  01F5               	clrf	___awdiv@counter
  1641  07B0  0AF5               	incf	___awdiv@counter,f
  1642  07B1  2FBD               	goto	l1472
  1643  07B2                     l1468:
  1644  07B2  3001               	movlw	1
  1645  07B3                     u865:
  1646  07B3  1003               	clrc
  1647  07B4  0DF0               	rlf	___awdiv@divisor,f
  1648  07B5  0DF1               	rlf	___awdiv@divisor+1,f
  1649  07B6  3EFF               	addlw	-1
  1650  07B7  1D03               	skipz
  1651  07B8  2FB3               	goto	u865
  1652  07B9                     l1470:
  1653  07B9  3001               	movlw	1
  1654  07BA  00F4               	movwf	??___awdiv
  1655  07BB  0874               	movf	??___awdiv,w
  1656  07BC  07F5               	addwf	___awdiv@counter,f
  1657  07BD                     l1472:
  1658  07BD  1FF1               	btfss	___awdiv@divisor+1,7
  1659  07BE  2FC0               	goto	u871
  1660  07BF  2FC1               	goto	u870
  1661  07C0                     u871:
  1662  07C0  2FB2               	goto	l1468
  1663  07C1                     u870:
  1664  07C1                     l1474:
  1665  07C1  3001               	movlw	1
  1666  07C2                     u885:
  1667  07C2  1003               	clrc
  1668  07C3  0DF7               	rlf	___awdiv@quotient,f
  1669  07C4  0DF8               	rlf	___awdiv@quotient+1,f
  1670  07C5  3EFF               	addlw	-1
  1671  07C6  1D03               	skipz
  1672  07C7  2FC2               	goto	u885
  1673  07C8  0871               	movf	___awdiv@divisor+1,w
  1674  07C9  0273               	subwf	___awdiv@dividend+1,w
  1675  07CA  1D03               	skipz
  1676  07CB  2FCE               	goto	u895
  1677  07CC  0870               	movf	___awdiv@divisor,w
  1678  07CD  0272               	subwf	___awdiv@dividend,w
  1679  07CE                     u895:
  1680  07CE  1C03               	skipc
  1681  07CF  2FD1               	goto	u891
  1682  07D0  2FD2               	goto	u890
  1683  07D1                     u891:
  1684  07D1  2FD9               	goto	l1480
  1685  07D2                     u890:
  1686  07D2                     l1476:
  1687  07D2  0870               	movf	___awdiv@divisor,w
  1688  07D3  02F2               	subwf	___awdiv@dividend,f
  1689  07D4  0871               	movf	___awdiv@divisor+1,w
  1690  07D5  1C03               	skipc
  1691  07D6  03F3               	decf	___awdiv@dividend+1,f
  1692  07D7  02F3               	subwf	___awdiv@dividend+1,f
  1693  07D8                     l1478:
  1694  07D8  1477               	bsf	___awdiv@quotient,0
  1695  07D9                     l1480:
  1696  07D9  3001               	movlw	1
  1697  07DA                     u905:
  1698  07DA  1003               	clrc
  1699  07DB  0CF1               	rrf	___awdiv@divisor+1,f
  1700  07DC  0CF0               	rrf	___awdiv@divisor,f
  1701  07DD  3EFF               	addlw	-1
  1702  07DE  1D03               	skipz
  1703  07DF  2FDA               	goto	u905
  1704  07E0                     l1482:
  1705  07E0  3001               	movlw	1
  1706  07E1  02F5               	subwf	___awdiv@counter,f
  1707  07E2  1D03               	btfss	3,2
  1708  07E3  2FE5               	goto	u911
  1709  07E4  2FE6               	goto	u910
  1710  07E5                     u911:
  1711  07E5  2FC1               	goto	l1474
  1712  07E6                     u910:
  1713  07E6                     l1484:
  1714  07E6  0876               	movf	___awdiv@sign,w
  1715  07E7  1903               	btfsc	3,2
  1716  07E8  2FEA               	goto	u921
  1717  07E9  2FEB               	goto	u920
  1718  07EA                     u921:
  1719  07EA  2FF0               	goto	l1488
  1720  07EB                     u920:
  1721  07EB                     l1486:
  1722  07EB  09F7               	comf	___awdiv@quotient,f
  1723  07EC  09F8               	comf	___awdiv@quotient+1,f
  1724  07ED  0AF7               	incf	___awdiv@quotient,f
  1725  07EE  1903               	skipnz
  1726  07EF  0AF8               	incf	___awdiv@quotient+1,f
  1727  07F0                     l1488:
  1728  07F0  0878               	movf	___awdiv@quotient+1,w
  1729  07F1  00F1               	movwf	?___awdiv+1
  1730  07F2  0877               	movf	___awdiv@quotient,w
  1731  07F3  00F0               	movwf	?___awdiv
  1732  07F4                     l373:
  1733  07F4  0008               	return
  1734  07F5                     __end_of___awdiv:
  1735                           
  1736                           	psect	text9
  1737  0521                     __ptext9:	
  1738 ;; *************** function _handle_btn_pressing *****************
  1739 ;; Defined at:
  1740 ;;		line 62 in file "buttons.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  btn             1    wreg     enum E469
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  btn             1    2[COMMON] enum E469
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1754 ;;      Params:         0       0       0       0
  1755 ;;      Locals:         1       0       0       0
  1756 ;;      Temps:          2       0       0       0
  1757 ;;      Totals:         3       0       0       0
  1758 ;;Total ram usage:        3 bytes
  1759 ;; Hardware stack levels used: 1
  1760 ;; Hardware stack levels required when called: 1
  1761 ;; This function calls:
  1762 ;;		_reset_stopwatch
  1763 ;;		_start_stopwatch
  1764 ;;		_stop_stopwatch
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _handle_btn_pressing
  1772  0521                     _handle_btn_pressing:
  1773                           
  1774                           ;incstack = 0
  1775                           ; Regs used in _handle_btn_pressing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1776                           ;handle_btn_pressing@btn stored from wreg
  1777  0521  00F2               	movwf	handle_btn_pressing@btn
  1778  0522                     l1272:
  1779                           
  1780                           ;buttons.c: 62: void handle_btn_pressing(enum Button btn);buttons.c: 63: {;buttons.c: 64
      +                          :     switch(btn)
  1781  0522  2D29               	goto	l1282
  1782  0523                     l1274:
  1783                           
  1784                           ;buttons.c: 67:             reset_stopwatch();
  1785  0523  24EA               	fcall	_reset_stopwatch
  1786                           
  1787                           ;buttons.c: 68:             break;
  1788  0524  2D3C               	goto	l78
  1789  0525                     l1276:
  1790                           
  1791                           ;buttons.c: 70:             stop_stopwatch();
  1792  0525  24E1               	fcall	_stop_stopwatch
  1793                           
  1794                           ;buttons.c: 71:             break;
  1795  0526  2D3C               	goto	l78
  1796  0527                     l1278:
  1797                           
  1798                           ;buttons.c: 73:             start_stopwatch();
  1799  0527  24E5               	fcall	_start_stopwatch
  1800                           
  1801                           ;buttons.c: 74:             break;
  1802  0528  2D3C               	goto	l78
  1803  0529                     l1282:
  1804  0529  0872               	movf	handle_btn_pressing@btn,w
  1805  052A  00F0               	movwf	??_handle_btn_pressing
  1806  052B  01F1               	clrf	??_handle_btn_pressing+1
  1807                           
  1808                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1809                           ; Switch size 1, requested type "simple"
  1810                           ; Number of cases is 1, Range of values is 0 to 0
  1811                           ; switch strategies available:
  1812                           ; Name         Instructions Cycles
  1813                           ; simple_byte            4     3 (average)
  1814                           ; direct_byte            7     6 (fixed)
  1815                           ; jumptable            260     6 (fixed)
  1816                           ;	Chosen strategy is simple_byte
  1817  052C  0871               	movf	??_handle_btn_pressing+1,w
  1818  052D  3A00               	xorlw	0	; case 0
  1819  052E  1903               	skipnz
  1820  052F  2D31               	goto	l1634
  1821  0530  2D3C               	goto	l78
  1822  0531                     l1634:
  1823                           
  1824                           ; Switch size 1, requested type "simple"
  1825                           ; Number of cases is 3, Range of values is 1 to 3
  1826                           ; switch strategies available:
  1827                           ; Name         Instructions Cycles
  1828                           ; simple_byte           10     6 (average)
  1829                           ; direct_byte           12     9 (fixed)
  1830                           ; jumptable            263     9 (fixed)
  1831                           ;	Chosen strategy is simple_byte
  1832  0531  0870               	movf	??_handle_btn_pressing,w
  1833  0532  3A01               	xorlw	1	; case 1
  1834  0533  1903               	skipnz
  1835  0534  2D23               	goto	l1274
  1836  0535  3A03               	xorlw	3	; case 2
  1837  0536  1903               	skipnz
  1838  0537  2D25               	goto	l1276
  1839  0538  3A01               	xorlw	1	; case 3
  1840  0539  1903               	skipnz
  1841  053A  2D27               	goto	l1278
  1842  053B  2D3C               	goto	l78
  1843  053C                     l78:
  1844  053C  0008               	return
  1845  053D                     __end_of_handle_btn_pressing:
  1846                           
  1847                           	psect	text10
  1848  04E1                     __ptext10:	
  1849 ;; *************** function _stop_stopwatch *****************
  1850 ;; Defined at:
  1851 ;;		line 24 in file "stopwatch.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		status,2
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1865 ;;      Params:         0       0       0       0
  1866 ;;      Locals:         0       0       0       0
  1867 ;;      Temps:          0       0       0       0
  1868 ;;      Totals:         0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_handle_btn_pressing
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           
  1879                           ;psect for function _stop_stopwatch
  1880  04E1                     _stop_stopwatch:
  1881  04E1                     l1184:	
  1882                           ;incstack = 0
  1883                           ; Regs used in _stop_stopwatch: [status,2]
  1884                           
  1885                           
  1886                           ;stopwatch.c: 26:     is_timer_work = 0;
  1887  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1888  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1889  04E3  01A5               	clrf	_is_timer_work
  1890  04E4                     l92:
  1891  04E4  0008               	return
  1892  04E5                     __end_of_stop_stopwatch:
  1893                           
  1894                           	psect	text11
  1895  04E5                     __ptext11:	
  1896 ;; *************** function _start_stopwatch *****************
  1897 ;; Defined at:
  1898 ;;		line 29 in file "stopwatch.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		None
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used: 1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_handle_btn_pressing
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function _start_stopwatch
  1927  04E5                     _start_stopwatch:
  1928  04E5                     l1186:	
  1929                           ;incstack = 0
  1930                           ; Regs used in _start_stopwatch: []
  1931                           
  1932                           
  1933                           ;stopwatch.c: 31:     is_timer_work = 1;
  1934  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  1935  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  1936  04E7  01A5               	clrf	_is_timer_work
  1937  04E8  0AA5               	incf	_is_timer_work,f
  1938  04E9                     l95:
  1939  04E9  0008               	return
  1940  04EA                     __end_of_start_stopwatch:
  1941                           
  1942                           	psect	text12
  1943  04EA                     __ptext12:	
  1944 ;; *************** function _reset_stopwatch *****************
  1945 ;; Defined at:
  1946 ;;		line 17 in file "stopwatch.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, status,2
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1960 ;;      Params:         0       0       0       0
  1961 ;;      Locals:         0       0       0       0
  1962 ;;      Temps:          0       0       0       0
  1963 ;;      Totals:         0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels used: 1
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;;		_handle_btn_pressing
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           
  1975                           ;psect for function _reset_stopwatch
  1976  04EA                     _reset_stopwatch:
  1977  04EA                     l1154:	
  1978                           ;incstack = 0
  1979                           ; Regs used in _reset_stopwatch: [wreg+status,2]
  1980                           
  1981                           
  1982                           ;stopwatch.c: 19:     is_timer_work = 0;
  1983  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1984  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1985  04EC  01A5               	clrf	_is_timer_work
  1986                           
  1987                           ;stopwatch.c: 20:     time_ms = 0;
  1988  04ED  01A3               	clrf	_time_ms
  1989  04EE  01A4               	clrf	_time_ms+1
  1990  04EF                     l1156:
  1991                           
  1992                           ;stopwatch.c: 21:     PORTB = 0xC0;
  1993  04EF  30C0               	movlw	192
  1994  04F0  0086               	movwf	6	;volatile
  1995  04F1                     l89:
  1996  04F1  0008               	return
  1997  04F2                     __end_of_reset_stopwatch:
  1998                           
  1999                           	psect	text13
  2000  055A                     __ptext13:	
  2001 ;; *************** function _get_btn_pressed *****************
  2002 ;; Defined at:
  2003 ;;		line 49 in file "buttons.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;		None
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  btn             1   10[COMMON] enum E469
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  1    wreg      enum E469
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2017 ;;      Params:         0       0       0       0
  2018 ;;      Locals:         1       0       0       0
  2019 ;;      Temps:          1       0       0       0
  2020 ;;      Totals:         2       0       0       0
  2021 ;;Total ram usage:        2 bytes
  2022 ;; Hardware stack levels used: 1
  2023 ;; Hardware stack levels required when called: 2
  2024 ;; This function calls:
  2025 ;;		_is_btn_bounce
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           
  2032                           ;psect for function _get_btn_pressed
  2033  055A                     _get_btn_pressed:
  2034  055A                     l1254:	
  2035                           ;incstack = 0
  2036                           ; Regs used in _get_btn_pressed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2037                           
  2038                           
  2039                           ;buttons.c: 51:     enum Button btn = NONE;
  2040  055A  01FA               	clrf	get_btn_pressed@btn
  2041  055B                     l1256:
  2042                           
  2043                           ;buttons.c: 53:     if (PORTAbits.RA7 == 0 && !is_btn_bounce(RESET))
  2044  055B  1283               	bcf	3,5	;RP0=0, select bank0
  2045  055C  1303               	bcf	3,6	;RP1=0, select bank0
  2046  055D  1B85               	btfsc	5,7	;volatile
  2047  055E  2D60               	goto	u681
  2048  055F  2D61               	goto	u680
  2049  0560                     u681:
  2050  0560  2D6B               	goto	l64
  2051  0561                     u680:
  2052  0561                     l1258:
  2053  0561  3001               	movlw	1
  2054  0562  25C9               	fcall	_is_btn_bounce
  2055  0563  3A00               	xorlw	0
  2056  0564  1D03               	skipz
  2057  0565  2D67               	goto	u691
  2058  0566  2D68               	goto	u690
  2059  0567                     u691:
  2060  0567  2D6B               	goto	l64
  2061  0568                     u690:
  2062  0568                     l1260:
  2063                           
  2064                           ;buttons.c: 54:         btn = RESET;
  2065  0568  01FA               	clrf	get_btn_pressed@btn
  2066  0569  0AFA               	incf	get_btn_pressed@btn,f
  2067  056A  2D8E               	goto	l65
  2068  056B                     l64:	
  2069                           ;buttons.c: 55:     else if (PORTAbits.RA6 == 0 && !is_btn_bounce(STOP))
  2070                           
  2071  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2072  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2073  056D  1B05               	btfsc	5,6	;volatile
  2074  056E  2D70               	goto	u701
  2075  056F  2D71               	goto	u700
  2076  0570                     u701:
  2077  0570  2D7D               	goto	l66
  2078  0571                     u700:
  2079  0571                     l1262:
  2080  0571  3002               	movlw	2
  2081  0572  25C9               	fcall	_is_btn_bounce
  2082  0573  3A00               	xorlw	0
  2083  0574  1D03               	skipz
  2084  0575  2D77               	goto	u711
  2085  0576  2D78               	goto	u710
  2086  0577                     u711:
  2087  0577  2D7D               	goto	l66
  2088  0578                     u710:
  2089  0578                     l1264:
  2090                           
  2091                           ;buttons.c: 56:         btn = STOP;
  2092  0578  3002               	movlw	2
  2093  0579  00F9               	movwf	??_get_btn_pressed
  2094  057A  0879               	movf	??_get_btn_pressed,w
  2095  057B  00FA               	movwf	get_btn_pressed@btn
  2096  057C  2D8E               	goto	l65
  2097  057D                     l66:	
  2098                           ;buttons.c: 57:     else if (PORTAbits.RA5 == 0 && !is_btn_bounce(START))
  2099                           
  2100  057D  1283               	bcf	3,5	;RP0=0, select bank0
  2101  057E  1303               	bcf	3,6	;RP1=0, select bank0
  2102  057F  1A85               	btfsc	5,5	;volatile
  2103  0580  2D82               	goto	u721
  2104  0581  2D83               	goto	u720
  2105  0582                     u721:
  2106  0582  2D8E               	goto	l65
  2107  0583                     u720:
  2108  0583                     l1266:
  2109  0583  3003               	movlw	3
  2110  0584  25C9               	fcall	_is_btn_bounce
  2111  0585  3A00               	xorlw	0
  2112  0586  1D03               	skipz
  2113  0587  2D89               	goto	u731
  2114  0588  2D8A               	goto	u730
  2115  0589                     u731:
  2116  0589  2D8E               	goto	l65
  2117  058A                     u730:
  2118  058A                     l1268:
  2119                           
  2120                           ;buttons.c: 58:         btn = START;
  2121  058A  3003               	movlw	3
  2122  058B  00F9               	movwf	??_get_btn_pressed
  2123  058C  0879               	movf	??_get_btn_pressed,w
  2124  058D  00FA               	movwf	get_btn_pressed@btn
  2125  058E                     l65:
  2126                           
  2127                           ;buttons.c: 59:     return (btn);
  2128  058E  087A               	movf	get_btn_pressed@btn,w
  2129  058F                     l69:
  2130  058F  0008               	return
  2131  0590                     __end_of_get_btn_pressed:
  2132                           
  2133                           	psect	text14
  2134  05C9                     __ptext14:	
  2135 ;; *************** function _is_btn_bounce *****************
  2136 ;; Defined at:
  2137 ;;		line 29 in file "buttons.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  btn             1    wreg     enum E469
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  btn             1    4[COMMON] enum E469
  2142 ;;  i               2    6[COMMON] int 
  2143 ;;  is_bounce       1    8[COMMON] _Bool 
  2144 ;;  mask            1    5[COMMON] unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      _Bool 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2154 ;;      Params:         0       0       0       0
  2155 ;;      Locals:         5       0       0       0
  2156 ;;      Temps:          1       0       0       0
  2157 ;;      Totals:         6       0       0       0
  2158 ;;Total ram usage:        6 bytes
  2159 ;; Hardware stack levels used: 1
  2160 ;; Hardware stack levels required when called: 1
  2161 ;; This function calls:
  2162 ;;		_get_mask
  2163 ;; This function is called by:
  2164 ;;		_get_btn_pressed
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _is_btn_bounce
  2170  05C9                     _is_btn_bounce:
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _is_btn_bounce: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2174                           ;is_btn_bounce@btn stored from wreg
  2175  05C9  00F4               	movwf	is_btn_bounce@btn
  2176  05CA                     l1158:
  2177                           
  2178                           ;buttons.c: 29: static _Bool is_btn_bounce(enum Button btn);buttons.c: 30: {;buttons.c: 
      +                          31:     _Bool is_bounce = 0;
  2179  05CA  01F8               	clrf	is_btn_bounce@is_bounce
  2180  05CB                     l1160:
  2181                           
  2182                           ;buttons.c: 32:     uint8_t mask = get_mask(btn);
  2183  05CB  0874               	movf	is_btn_bounce@btn,w
  2184  05CC  2505               	fcall	_get_mask
  2185  05CD  00F3               	movwf	??_is_btn_bounce
  2186  05CE  0873               	movf	??_is_btn_bounce,w
  2187  05CF  00F5               	movwf	is_btn_bounce@mask
  2188  05D0                     l1162:
  2189                           
  2190                           ;buttons.c: 39:     for (int i = 0; i < 602; i++)
  2191  05D0  01F6               	clrf	is_btn_bounce@i
  2192  05D1  01F7               	clrf	is_btn_bounce@i+1
  2193  05D2                     l1168:
  2194                           
  2195                           ;buttons.c: 40:     {;buttons.c: 41:         if (!is_bounce && (PORTA & mask) != 0)
  2196  05D2  0878               	movf	is_btn_bounce@is_bounce,w
  2197  05D3  1D03               	btfss	3,2
  2198  05D4  2DD6               	goto	u641
  2199  05D5  2DD7               	goto	u640
  2200  05D6                     u641:
  2201  05D6  2DE1               	goto	l1174
  2202  05D7                     u640:
  2203  05D7                     l1170:
  2204  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  2205  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  2206  05D9  0805               	movf	5,w	;volatile
  2207  05DA  0575               	andwf	is_btn_bounce@mask,w
  2208  05DB  1903               	btfsc	3,2
  2209  05DC  2DDE               	goto	u651
  2210  05DD  2DDF               	goto	u650
  2211  05DE                     u651:
  2212  05DE  2DE1               	goto	l1174
  2213  05DF                     u650:
  2214  05DF                     l1172:
  2215                           
  2216                           ;buttons.c: 42:             is_bounce = 1;
  2217  05DF  01F8               	clrf	is_btn_bounce@is_bounce
  2218  05E0  0AF8               	incf	is_btn_bounce@is_bounce,f
  2219  05E1                     l1174:
  2220                           
  2221                           ;buttons.c: 43:     }
  2222  05E1  3001               	movlw	1
  2223  05E2  07F6               	addwf	is_btn_bounce@i,f
  2224  05E3  1803               	skipnc
  2225  05E4  0AF7               	incf	is_btn_bounce@i+1,f
  2226  05E5  3000               	movlw	0
  2227  05E6  07F7               	addwf	is_btn_bounce@i+1,f
  2228  05E7                     l1176:
  2229  05E7  0877               	movf	is_btn_bounce@i+1,w
  2230  05E8  3A80               	xorlw	128
  2231  05E9  00FF               	movwf	btemp+1
  2232  05EA  3082               	movlw	130
  2233  05EB  027F               	subwf	btemp+1,w
  2234  05EC  1D03               	skipz
  2235  05ED  2DF0               	goto	u665
  2236  05EE  305A               	movlw	90
  2237  05EF  0276               	subwf	is_btn_bounce@i,w
  2238  05F0                     u665:
  2239  05F0  1C03               	skipc
  2240  05F1  2DF3               	goto	u661
  2241  05F2  2DF4               	goto	u660
  2242  05F3                     u661:
  2243  05F3  2DD2               	goto	l1168
  2244  05F4                     u660:
  2245  05F4                     l1178:
  2246                           
  2247                           ;buttons.c: 44:     if (is_timer_work)
  2248  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  2249  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  2250  05F6  0825               	movf	_is_timer_work,w
  2251  05F7  1903               	btfsc	3,2
  2252  05F8  2DFA               	goto	u671
  2253  05F9  2DFB               	goto	u670
  2254  05FA                     u671:
  2255  05FA  2E01               	goto	l60
  2256  05FB                     u670:
  2257  05FB                     l1180:
  2258                           
  2259                           ;buttons.c: 45:         time_ms += 5;
  2260  05FB  3005               	movlw	5
  2261  05FC  07A3               	addwf	_time_ms,f
  2262  05FD  1803               	skipnc
  2263  05FE  0AA4               	incf	_time_ms+1,f
  2264  05FF  3000               	movlw	0
  2265  0600  07A4               	addwf	_time_ms+1,f
  2266  0601                     l60:
  2267                           
  2268                           ;buttons.c: 46:     return (is_bounce);
  2269  0601  0878               	movf	is_btn_bounce@is_bounce,w
  2270  0602                     l61:
  2271  0602  0008               	return
  2272  0603                     __end_of_is_btn_bounce:
  2273                           
  2274                           	psect	text15
  2275  0505                     __ptext15:	
  2276 ;; *************** function _get_mask *****************
  2277 ;; Defined at:
  2278 ;;		line 16 in file "buttons.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  btn             1    wreg     enum E469
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  btn             1    1[COMMON] enum E469
  2283 ;;  mask            1    2[COMMON] unsigned char 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      unsigned char 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2293 ;;      Params:         0       0       0       0
  2294 ;;      Locals:         2       0       0       0
  2295 ;;      Temps:          1       0       0       0
  2296 ;;      Totals:         3       0       0       0
  2297 ;;Total ram usage:        3 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; This function calls:
  2300 ;;		Nothing
  2301 ;; This function is called by:
  2302 ;;		_is_btn_bounce
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           
  2307                           ;psect for function _get_mask
  2308  0505                     _get_mask:
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in _get_mask: [wreg+status,2+status,0]
  2312                           ;get_mask@btn stored from wreg
  2313  0505  00F1               	movwf	get_mask@btn
  2314  0506                     l1036:
  2315  0506                     l1038:
  2316                           
  2317                           ;buttons.c: 20:     if (btn == RESET)
  2318  0506  0371               	decf	get_mask@btn,w
  2319  0507  1D03               	btfss	3,2
  2320  0508  2D0A               	goto	u371
  2321  0509  2D0B               	goto	u370
  2322  050A                     u371:
  2323  050A  2D10               	goto	l1042
  2324  050B                     u370:
  2325  050B                     l1040:
  2326                           
  2327                           ;buttons.c: 21:         mask = 0b10000000;
  2328  050B  3080               	movlw	128
  2329  050C  00F0               	movwf	??_get_mask
  2330  050D  0870               	movf	??_get_mask,w
  2331  050E  00F2               	movwf	get_mask@mask
  2332  050F  2D1F               	goto	l51
  2333  0510                     l1042:
  2334  0510  3002               	movlw	2
  2335  0511  0671               	xorwf	get_mask@btn,w
  2336  0512  1D03               	btfss	3,2
  2337  0513  2D15               	goto	u381
  2338  0514  2D16               	goto	u380
  2339  0515                     u381:
  2340  0515  2D1B               	goto	l1046
  2341  0516                     u380:
  2342  0516                     l1044:
  2343                           
  2344                           ;buttons.c: 23:         mask = 0b01000000;
  2345  0516  3040               	movlw	64
  2346  0517  00F0               	movwf	??_get_mask
  2347  0518  0870               	movf	??_get_mask,w
  2348  0519  00F2               	movwf	get_mask@mask
  2349  051A  2D1F               	goto	l51
  2350  051B                     l1046:
  2351                           
  2352                           ;buttons.c: 25:         mask = 0b00100000;
  2353  051B  3020               	movlw	32
  2354  051C  00F0               	movwf	??_get_mask
  2355  051D  0870               	movf	??_get_mask,w
  2356  051E  00F2               	movwf	get_mask@mask
  2357  051F                     l51:
  2358                           
  2359                           ;buttons.c: 26:     return (mask);
  2360  051F  0872               	movf	get_mask@mask,w
  2361  0520                     l54:
  2362  0520  0008               	return
  2363  0521                     __end_of_get_mask:
  2364                           
  2365                           	psect	text16
  2366  04FA                     __ptext16:	
  2367 ;; *************** function _configure *****************
  2368 ;; Defined at:
  2369 ;;		line 18 in file "main.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;		None
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;		None
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      void 
  2376 ;; Registers used:
  2377 ;;		wreg, status,2
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2383 ;;      Params:         0       0       0       0
  2384 ;;      Locals:         0       0       0       0
  2385 ;;      Temps:          0       0       0       0
  2386 ;;      Totals:         0       0       0       0
  2387 ;;Total ram usage:        0 bytes
  2388 ;; Hardware stack levels used: 1
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           
  2397                           ;psect for function _configure
  2398  04FA                     _configure:
  2399  04FA                     l912:	
  2400                           ;incstack = 0
  2401                           ; Regs used in _configure: [wreg+status,2]
  2402                           
  2403                           
  2404                           ;main.c: 20:         handle_btn_pressing(get_btn_pressed());
  2405  04FA  178B               	bsf	11,7	;volatile
  2406  04FB                     l914:
  2407                           
  2408                           ;main.c: 22:     }
  2409  04FB  3007               	movlw	7
  2410  04FC  1283               	bcf	3,5	;RP0=0, select bank0
  2411  04FD  1303               	bcf	3,6	;RP1=0, select bank0
  2412  04FE  009F               	movwf	31	;volatile
  2413                           
  2414                           ;main.c: 24: }
  2415  04FF  30E0               	movlw	224
  2416  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2417  0501  1303               	bcf	3,6	;RP1=0, select bank1
  2418  0502  0085               	movwf	5	;volatile
  2419  0503                     l916:
  2420  0503  0186               	clrf	6	;volatile
  2421  0504                     l23:
  2422  0504  0008               	return
  2423  0505                     __end_of_configure:
  2424  007E                     btemp	set	126	;btemp
  2425  007E                     wtemp0	set	126
  2426                           
  2427                           	psect	config
  2428                           
  2429                           ;Config register CONFIG @ 0x2007
  2430                           ;	Oscillator Selection bits
  2431                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2432                           ;	Watchdog Timer Enable bit
  2433                           ;	WDTE = OFF, WDT disabled
  2434                           ;	Power-up Timer Enable bit
  2435                           ;	PWRTE = OFF, PWRT disabled
  2436                           ;	RA5/MCLR/VPP Pin Function Select bit
  2437                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2438                           ;	Brown-out Detect Enable bit
  2439                           ;	BOREN = OFF, BOD disabled
  2440                           ;	Low-Voltage Programming Enable bit
  2441                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2442                           ;	Data EE Memory Code Protection bit
  2443                           ;	CPD = OFF, Data memory code protection off
  2444                           ;	Flash Program Memory Code Protection bit
  2445                           ;	CP = OFF, Code protection off
  2446  2007                     	org	8199
  2447  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      5      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _format_time->___lwmod
    ___lwmod->___lwdiv
    _get_btn_pressed->_is_btn_bounce
    _is_btn_bounce->_get_mask

Critical Paths under _main in BANK0

    _main->_update_disp
    _update_disp->_format_time

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2232
                          _configure
                    _get_btn_pressed
                _handle_btn_pressing
                    _reset_stopwatch
                        _update_disp
                _update_time_counter
 ---------------------------------------------------------------------------------
 (1) _update_time_counter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_disp                                          1     1      0    1977
                                              4 BANK0      1     1      0
                        _format_time
               _set_disp_digit_value
 ---------------------------------------------------------------------------------
 (2) _set_disp_digit_value                                 3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _format_time                                          4     4      0    1955
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     600
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4      19
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     617
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     629
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _handle_btn_pressing                                  3     3      0      22
                                              0 COMMON     3     3      0
                    _reset_stopwatch
                    _start_stopwatch
                     _stop_stopwatch
 ---------------------------------------------------------------------------------
 (2) _stop_stopwatch                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_btn_pressed                                      2     2      0     233
                                              9 COMMON     2     2      0
                      _is_btn_bounce
 ---------------------------------------------------------------------------------
 (2) _is_btn_bounce                                        6     6      0     207
                                              3 COMMON     6     6      0
                           _get_mask
 ---------------------------------------------------------------------------------
 (3) _get_mask                                             3     3      0      70
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _configure                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure
   _get_btn_pressed
     _is_btn_bounce
       _get_mask
   _handle_btn_pressing
     _reset_stopwatch
     _start_stopwatch
     _stop_stopwatch
   _reset_stopwatch
   _update_disp
     _format_time
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _set_disp_digit_value
   _update_time_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      5       C       3       15.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      1A      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Sep  7 21:57:23 2021

                  _update_disp 0590                             l23 0504                             l51 051F  
                           l60 0601                             l61 0602                             l54 0520  
                           l64 056B                             l65 058E                             l66 057D  
                           l92 04E4                             l69 058F                             l78 053C  
                           l95 04E9                             l89 04F1                             l98 06D7  
                 ___awdiv@sign 0076                            l102 0553                            l103 0559  
                          l131 078D                            l134 05C8                            l502 063C  
                          l373 07F4                            l386 0730                            l492 0680  
                          l912 04FA                            l914 04FB                            l916 0503  
                          u370 050B                            u371 050A                            u380 0516  
                          u700 0571                            u381 0515                            u701 0570  
                          u710 0578                            u711 0577                            u640 05D7  
                          u720 0583                            u800 0668                            u641 05D6  
                          u721 0582                            u801 0667                            u650 05DF  
                          u730 058A                            u651 05DE                            u731 0589  
                          u660 05F4                            u820 067C                            u740 0544  
                          u661 05F3                            u821 067B                            u805 0664  
                          u741 0543                            u670 05FB                            u910 07E6  
                          u830 0793                            u750 054D                            u671 05FA  
                          u911 07E5                            u831 0792                            u815 0670  
                          u751 054C                            u680 0561                            u920 07EB  
                          u840 079E                            u760 0645                            u665 05F0  
                          u681 0560                            u921 07EA                            u905 07DA  
                          u841 079D                            u761 0644                            u690 0568  
                          u850 07AF                            u930 06DD                            u691 0567  
                          u851 07AE                            u931 06DC                            u940 06E8  
                          u780 0657                            u941 06E7                            u781 0656  
                          u870 07C1                            u950 06F3                            u871 07C0  
                          u951 06F2                            u775 0649                            u865 07B3  
                          u890 07D2                            u970 0705                            u891 07D1  
                          u971 0704                            u795 0658                            u980 070F  
                          u885 07C2                            u981 070E                            u965 06F7  
                          u895 07CE                            u985 070B                            u995 0716  
                  get_mask@btn 0071           ?_handle_btn_pressing 0070          ??_update_time_counter 0070  
                 ___awmod@sign 0076                           l1040 050B                           l1200 073D  
                         l1042 0510                           l1210 0756                           l1202 0742  
                         l1044 0516                           l1036 0506                           l1212 075B  
                         l1204 0747                           l1046 051B                           l1038 0506  
                         l1214 0760                           l1206 074C                           l1160 05CB  
                         l1208 0751                           l1170 05D7                           l1162 05D0  
                         l1154 04EA                           l1218 0765                           l1180 05FB  
                         l1172 05DF                           l1260 0568                           l1156 04EF  
                         l1500 06E4                           l1174 05E1                           l1158 05CA  
                         l1262 0571                           l1254 055A                           l1510 06FD  
                         l1502 06E8                           l1350 064F                           l1342 063D  
                         l1176 05E7                           l1168 05D2                           l1264 0578  
                         l1256 055B                           l1184 04E1                           l1272 0522  
                         l1520 071C                           l1512 0701                           l1504 06ED  
                         l1360 066F                           l1352 0653                           l1344 063F  
                         l1178 05F4                           l1266 0583                           l1258 0561  
                         l1186 04E5                           l1274 0523                           l1282 0529  
                         l1450 078F                           l1514 0705                           l1506 06F3  
                         l1522 0722                           l1362 0676                           l1354 0657  
                         l1346 0645                           l1530 0603                           l1194 0732  
                         l1290 0544                           l1268 058A                           l1276 0525  
                         l1460 07A3                           l1452 0793                           l1524 0727  
                         l1516 070F                           l1508 06F6                           l1356 0668  
                         l1348 0648                           l1364 067C                           l1540 061B  
                         l1532 0609                           l1196 0733                           l1292 054D  
                         l1278 0527                           l1470 07B9                           l1462 07A7  
                         l1454 0798                           l1526 072C                           l1518 0715  
                         l1358 066E                           l1542 0625                           l1534 060C  
                         l1198 0738                           l1480 07D9                           l1472 07BD  
                         l1464 07A9                           l1456 079A                           l1448 078E  
                         l1544 062B                           l1536 0613                           l1552 0681  
                         l1632 076D                           l1560 0598                           l1288 053D  
                         l1634 0531                           l1482 07E0                           l1474 07C1  
                         l1466 07AF                           l1458 079E                           l1546 0632  
                         l1538 0617                           l1570 05AA                           l1562 05A1  
                         l1554 0590                           l1476 07D2                           l1468 07B2  
                         l1484 07E6                           l1492 06D8                           l1548 0638  
                         l1580 05BC                           l1572 05B3                           l1564 05A4  
                         l1556 0591                           l1486 07EB                           l1478 07D8  
                         l1494 06D9                           l1582 05C5                           l1574 05B6  
                         l1566 05A6                           l1558 0595                           l1590 04F7  
                         l1488 07F0                           l1496 06DD                           l1576 05B7  
                         l1568 05A9                           l1584 04F2                           l1498 06E2  
                         l1578 05B9                           l1586 04F4                           l1588 04F5  
                         u1000 0722                           u1001 0721                           u1010 0727  
                         u1011 0726                           u1020 0609                           u1021 0608  
                         u1040 061B                           u1041 061A                           u1050 0625  
                         u1051 0624                           u1035 060D                           u1107 05C0  
                         u1070 0638                           u1071 0637                           u1055 0621  
                         u1065 062C                           u1087 059C                           u1097 05AE  
                 get_mask@mask 0072                           _main 04F2                           btemp 007E  
                         start 0000        __end_of_reset_stopwatch 04F2                   ?_format_time 0070  
     __size_of_start_stopwatch 0005                          ?_main 0070                __end_of___awdiv 07F5  
              __end_of___awmod 0731                          _CMCON 001F                ___awdiv@divisor 0070  
              __end_of___lwdiv 0681          ??_handle_btn_pressing 0070                __end_of___lwmod 063D  
              ___awdiv@counter 0075                          _PORTA 0005                          _PORTB 0006  
                        _TRISA 0085                          _TRISB 0086      set_disp_digit_value@value 0072  
                        status 0003                          wtemp0 007E                __initialization 07F5  
                 __end_of_main 04FA         __size_of_is_btn_bounce 003A                         ??_main 007E  
             ___awdiv@dividend 0072         handle_btn_pressing@btn 0072                         _Button 0026  
             __end_of_get_mask 0521               ?_reset_stopwatch 0070                      ??___awdiv 0074  
                    ??___awmod 0074                      ??___lwdiv 0074                      ??___lwmod 007C  
             ___awdiv@quotient 0077                ___awmod@divisor 0070                ___awmod@counter 0075  
            ??_start_stopwatch 0070                  _is_btn_bounce 05C9        __end_of__initialization 07FE  
     __size_of_get_btn_pressed 0036                   ?_update_disp 0070                 __pcstackCOMMON 0070  
      format_time@cashed_value 002A           __size_of_format_time 0057                 ?_is_btn_bounce 0070  
           __size_of_configure 000B                     __pbssBANK0 0020                     __pmaintext 04F2  
__size_of_set_disp_digit_value 005D    __end_of_update_time_counter 055A                  _is_timer_work 0025  
                    ?_get_mask 0070        __size_of_stop_stopwatch 0004              ??_get_btn_pressed 0079  
            __end_of_configure 0505                        ___awdiv 078E                        ___awmod 06D8  
  __end_of_handle_btn_pressing 053D                        ___lwdiv 063D                        ___lwmod 0603  
                      __ptext1 053D                        __ptext2 0590                        __ptext3 0731  
                      __ptext4 0681                        __ptext5 0603                        __ptext6 063D  
                      __ptext7 06D8                        __ptext8 078E                        __ptext9 0521  
             ___awmod@dividend 0072                ??_is_btn_bounce 0073                        _time_ms 0023  
                   ??_get_mask 0070           end_of_initialization 07FE           __size_of_update_disp 0039  
              _start_stopwatch 04E5                      _PORTAbits 0005                      _PORTBbits 0006  
               is_btn_bounce@i 0076                 _formatted_time 0020       __size_of_reset_stopwatch 0008  
          start_initialization 07F5                 _stop_stopwatch 04E1        __end_of_start_stopwatch 04EA  
                ??_format_time 0027   __end_of_set_disp_digit_value 078E                      ___latbits 0000  
                __pcstackBANK0 0027         __end_of_stop_stopwatch 04E5                _get_btn_pressed 055A  
            __size_of_get_mask 001C               ___lwdiv@dividend 0072                       ?___awdiv 0070  
                     ?___awmod 0070                       ?___lwdiv 0070                       ?___lwmod 0078  
                    _configure 04FA            __end_of_format_time 06D8   __size_of_update_time_counter 001D  
             ___lwdiv@quotient 0075                ?_stop_stopwatch 0070              ??_reset_stopwatch 0070  
             ?_start_stopwatch 0070                     ?_configure 0070   __size_of_handle_btn_pressing 001C  
      __end_of_get_btn_pressed 0590          __end_of_is_btn_bounce 0603                  ??_update_disp 002B  
         _set_disp_digit_value 0731               __size_of___awdiv 0067               __size_of___awmod 0059  
                  _format_time 0681               __size_of___lwdiv 0044               __size_of___lwmod 003A  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0077                       __ptext10 04E1  
                     __ptext11 04E5                       __ptext12 04EA                       __ptext13 055A  
                     __ptext14 05C9                       __ptext15 0505                       __ptext16 04FA  
                     _get_mask 0505                  __size_of_main 0008          ?_set_disp_digit_value 0070  
                  ??_configure 0070            __end_of_update_disp 05C9                     _INTCONbits 000B  
             ?_get_btn_pressed 0070               ___lwmod@dividend 007A            _update_time_counter 053D  
       is_btn_bounce@is_bounce 0078                _reset_stopwatch 04EA                ___lwmod@divisor 0078  
             ??_stop_stopwatch 0070                ___lwmod@counter 007D           ?_update_time_counter 0070  
           get_btn_pressed@btn 007A         ??_set_disp_digit_value 0070            _handle_btn_pressing 0521  
            is_btn_bounce@mask 0075               is_btn_bounce@btn 0074  
