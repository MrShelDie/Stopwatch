

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Sep  7 00:05:56 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F628A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  008C                     	;# 
    90  008E                     	;# 
    91  0092                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009F                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0092                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  008C                     	;# 
   164  008E                     	;# 
   165  0092                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009A                     	;# 
   169  009B                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009F                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0015                     	;# 
   190  0015                     	;# 
   191  0016                     	;# 
   192  0017                     	;# 
   193  0018                     	;# 
   194  0019                     	;# 
   195  001A                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  008C                     	;# 
   201  008E                     	;# 
   202  0092                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009F                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001F                     	;# 
   234  0081                     	;# 
   235  0085                     	;# 
   236  0086                     	;# 
   237  008C                     	;# 
   238  008E                     	;# 
   239  0092                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009F                     	;# 
   247  0006                     _PORTBbits	set	6
   248  0006                     _PORTB	set	6
   249  0005                     _PORTAbits	set	5
   250  0005                     _PORTA	set	5
   251  001F                     _CMCON	set	31
   252  000B                     _INTCONbits	set	11
   253  0081                     _OPTION_REG	set	129
   254  0081                     _OPTION_REGbits	set	129
   255  0086                     _TRISB	set	134
   256  0085                     _TRISA	set	133
   257                           
   258                           	psect	cinit
   259  07F5                     start_initialization:	
   260                           ; #config settings
   261                           
   262  07F5                     __initialization:
   263                           
   264                           ; Clear objects allocated to BANK0
   265  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   266  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   267  07F7  01A0               	clrf	__pbssBANK0& (0+127)
   268  07F8  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   269  07F9  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   270  07FA  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   271  07FB  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   272  07FC  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   273  07FD  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   274  07FE                     end_of_initialization:	
   275                           ;End of C runtime variable initialization code
   276                           
   277  07FE                     __end_of__initialization:
   278  07FE  0183               	clrf	3
   279  07FF  2CF9               	ljmp	_main	;jump to C main() function
   280                           
   281                           	psect	bssBANK0
   282  0020                     __pbssBANK0:
   283  0020                     _formatted_time:
   284  0020                     	ds	3
   285  0023                     _time_ms:
   286  0023                     	ds	2
   287  0025                     _is_timer_work:
   288  0025                     	ds	1
   289  0026                     _Button:
   290  0026                     	ds	1
   291                           
   292                           	psect	cstackCOMMON
   293  0070                     __pcstackCOMMON:
   294  0070                     ?_reset_stopwatch:
   295  0070                     ??_reset_stopwatch:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_update_disp:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_handle_btn_pressing:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ??_handle_btn_pressing:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?_get_btn_pressed:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_update_time_counter:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ??_update_time_counter:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_stop_stopwatch:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ??_stop_stopwatch:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_start_stopwatch:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ??_start_stopwatch:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ?_configure:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ??_configure:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_main:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_get_mask:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ??_get_mask:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ?_is_btn_bounce:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_format_time:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_set_disp_digit_value:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ??_set_disp_digit_value:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?___awdiv:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?___awmod:	
   359                           ; 2 bytes @ 0x0
   360                           
   361  0070                     ?___lwdiv:	
   362                           ; 2 bytes @ 0x0
   363                           
   364  0070                     ___awdiv@divisor:	
   365                           ; 2 bytes @ 0x0
   366                           
   367  0070                     ___awmod@divisor:	
   368                           ; 2 bytes @ 0x0
   369                           
   370  0070                     ___lwdiv@divisor:	
   371                           ; 2 bytes @ 0x0
   372                           
   373                           
   374                           ; 2 bytes @ 0x0
   375  0070                     	ds	1
   376  0071                     get_mask@mask:
   377                           
   378                           ; 1 bytes @ 0x1
   379  0071                     	ds	1
   380  0072                     get_mask@btn:
   381  0072                     handle_btn_pressing@btn:	
   382                           ; 1 bytes @ 0x2
   383                           
   384  0072                     set_disp_digit_value@value:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0072                     ___awdiv@dividend:	
   388                           ; 1 bytes @ 0x2
   389                           
   390  0072                     ___awmod@dividend:	
   391                           ; 2 bytes @ 0x2
   392                           
   393  0072                     ___lwdiv@dividend:	
   394                           ; 2 bytes @ 0x2
   395                           
   396                           
   397                           ; 2 bytes @ 0x2
   398  0072                     	ds	1
   399  0073                     ??_is_btn_bounce:
   400                           
   401                           ; 1 bytes @ 0x3
   402  0073                     	ds	1
   403  0074                     ??___awdiv:
   404  0074                     ??___awmod:	
   405                           ; 1 bytes @ 0x4
   406                           
   407  0074                     ??___lwdiv:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     is_btn_bounce@btn:	
   411                           ; 1 bytes @ 0x4
   412                           
   413                           
   414                           ; 1 bytes @ 0x4
   415  0074                     	ds	1
   416  0075                     is_btn_bounce@mask:
   417  0075                     ___awdiv@counter:	
   418                           ; 1 bytes @ 0x5
   419                           
   420  0075                     ___awmod@counter:	
   421                           ; 1 bytes @ 0x5
   422                           
   423  0075                     ___lwdiv@quotient:	
   424                           ; 1 bytes @ 0x5
   425                           
   426                           
   427                           ; 2 bytes @ 0x5
   428  0075                     	ds	1
   429  0076                     ___awdiv@sign:
   430  0076                     ___awmod@sign:	
   431                           ; 1 bytes @ 0x6
   432                           
   433  0076                     is_btn_bounce@i:	
   434                           ; 1 bytes @ 0x6
   435                           
   436                           
   437                           ; 2 bytes @ 0x6
   438  0076                     	ds	1
   439  0077                     ___lwdiv@counter:
   440  0077                     ___awdiv@quotient:	
   441                           ; 1 bytes @ 0x7
   442                           
   443                           
   444                           ; 2 bytes @ 0x7
   445  0077                     	ds	1
   446  0078                     ?___lwmod:
   447  0078                     is_btn_bounce@is_bounce:	
   448                           ; 2 bytes @ 0x8
   449                           
   450  0078                     ___lwmod@divisor:	
   451                           ; 1 bytes @ 0x8
   452                           
   453                           
   454                           ; 2 bytes @ 0x8
   455  0078                     	ds	1
   456  0079                     ??_get_btn_pressed:
   457                           
   458                           ; 1 bytes @ 0x9
   459  0079                     	ds	1
   460  007A                     get_btn_pressed@btn:
   461  007A                     ___lwmod@dividend:	
   462                           ; 1 bytes @ 0xA
   463                           
   464                           
   465                           ; 2 bytes @ 0xA
   466  007A                     	ds	2
   467  007C                     ??___lwmod:
   468                           
   469                           ; 1 bytes @ 0xC
   470  007C                     	ds	1
   471  007D                     ___lwmod@counter:
   472                           
   473                           ; 1 bytes @ 0xD
   474  007D                     	ds	1
   475  007E                     ??_main:
   476                           
   477                           	psect	cstackBANK0
   478  0027                     __pcstackBANK0:	
   479                           ; 1 bytes @ 0xE
   480                           
   481  0027                     ??_format_time:
   482                           
   483                           ; 1 bytes @ 0x0
   484  0027                     	ds	3
   485  002A                     format_time@cashed_value:
   486                           
   487                           ; 1 bytes @ 0x3
   488  002A                     	ds	1
   489  002B                     ??_update_disp:
   490                           
   491                           ; 1 bytes @ 0x4
   492  002B                     	ds	1
   493                           
   494                           	psect	maintext
   495  04F9                     __pmaintext:	
   496 ;;
   497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   498 ;;
   499 ;; *************** function _main *****************
   500 ;; Defined at:
   501 ;;		line 33 in file "main.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : B00/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   515 ;;      Params:         0       0       0       0
   516 ;;      Locals:         0       0       0       0
   517 ;;      Temps:          0       0       0       0
   518 ;;      Totals:         0       0       0       0
   519 ;;Total ram usage:        0 bytes
   520 ;; Hardware stack levels required when called: 3
   521 ;; This function calls:
   522 ;;		_configure
   523 ;;		_get_btn_pressed
   524 ;;		_handle_btn_pressing
   525 ;;		_reset_stopwatch
   526 ;;		_update_disp
   527 ;;		_update_time_counter
   528 ;; This function is called by:
   529 ;;		Startup code after reset
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           
   534                           ;psect for function _main
   535  04F9                     _main:
   536  04F9                     l1285:	
   537                           ;incstack = 0
   538                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   539                           
   540  04F9  2501               	fcall	_configure
   541  04FA  24F1               	fcall	_reset_stopwatch
   542  04FB                     l1287:
   543  04FB  25CA               	fcall	_update_disp
   544  04FC                     l1289:
   545  04FC  2594               	fcall	_get_btn_pressed
   546  04FD  252E               	fcall	_handle_btn_pressing
   547  04FE                     l1291:
   548  04FE  254A               	fcall	_update_time_counter
   549  04FF  2CFB               	goto	l1287
   550  0500  2800               	ljmp	start
   551  0501                     __end_of_main:
   552                           
   553                           	psect	text1
   554  054A                     __ptext1:	
   555 ;; *************** function _update_time_counter *****************
   556 ;; Defined at:
   557 ;;		line 43 in file "stopwatch.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   571 ;;      Params:         0       0       0       0
   572 ;;      Locals:         0       0       0       0
   573 ;;      Temps:          0       0       0       0
   574 ;;      Totals:         0       0       0       0
   575 ;;Total ram usage:        0 bytes
   576 ;; Hardware stack levels used: 1
   577 ;; This function calls:
   578 ;;		Nothing
   579 ;; This function is called by:
   580 ;;		_main
   581 ;; This function uses a non-reentrant model
   582 ;;
   583                           
   584                           
   585                           ;psect for function _update_time_counter
   586  054A                     _update_time_counter:
   587  054A                     l1279:	
   588                           ;incstack = 0
   589                           ; Regs used in _update_time_counter: [wreg+status,2+status,0]
   590                           
   591                           
   592                           ;stopwatch.c: 45:     if (is_timer_work)
   593  054A  1283               	bcf	3,5	;RP0=0, select bank0
   594  054B  1303               	bcf	3,6	;RP1=0, select bank0
   595  054C  0825               	movf	_is_timer_work,w
   596  054D  1903               	btfsc	3,2
   597  054E  2D50               	goto	u781
   598  054F  2D51               	goto	u780
   599  0550                     u781:
   600  0550  2D66               	goto	l102
   601  0551                     u780:
   602  0551                     l1281:
   603                           
   604                           ;stopwatch.c: 46:     {;stopwatch.c: 47:         if (time_ms > 60000)
   605  0551  30EA               	movlw	234
   606  0552  0224               	subwf	_time_ms+1,w
   607  0553  3061               	movlw	97
   608  0554  1903               	skipnz
   609  0555  0223               	subwf	_time_ms,w
   610  0556  1C03               	skipc
   611  0557  2D59               	goto	u791
   612  0558  2D5A               	goto	u790
   613  0559                     u791:
   614  0559  2D60               	goto	l101
   615  055A                     u790:
   616  055A                     l1283:
   617                           
   618                           ;stopwatch.c: 48:             time_ms -= 60000;
   619  055A  3060               	movlw	96
   620  055B  02A3               	subwf	_time_ms,f
   621  055C  30EA               	movlw	234
   622  055D  1C03               	skipc
   623  055E  03A4               	decf	_time_ms+1,f
   624  055F  02A4               	subwf	_time_ms+1,f
   625  0560                     l101:
   626                           
   627                           ;stopwatch.c: 49:         time_ms += 16;
   628  0560  3010               	movlw	16
   629  0561  07A3               	addwf	_time_ms,f
   630  0562  1803               	skipnc
   631  0563  0AA4               	incf	_time_ms+1,f
   632  0564  3000               	movlw	0
   633  0565  07A4               	addwf	_time_ms+1,f
   634  0566                     l102:
   635  0566  0008               	return
   636  0567                     __end_of_update_time_counter:
   637                           
   638                           	psect	text2
   639  05CA                     __ptext2:	
   640 ;; *************** function _update_disp *****************
   641 ;; Defined at:
   642 ;;		line 49 in file "display.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   656 ;;      Params:         0       0       0       0
   657 ;;      Locals:         0       0       0       0
   658 ;;      Temps:          0       1       0       0
   659 ;;      Totals:         0       1       0       0
   660 ;;Total ram usage:        1 bytes
   661 ;; Hardware stack levels used: 1
   662 ;; Hardware stack levels required when called: 2
   663 ;; This function calls:
   664 ;;		_format_time
   665 ;;		_set_disp_digit_value
   666 ;; This function is called by:
   667 ;;		_main
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           
   672                           ;psect for function _update_disp
   673  05CA                     _update_disp:
   674  05CA                     l1233:	
   675                           ;incstack = 0
   676                           ; Regs used in _update_disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   677                           
   678                           
   679                           ;display.c: 51:     format_time();
   680  05CA  2681               	fcall	_format_time
   681  05CB                     l1235:
   682                           
   683                           ;display.c: 53:     set_disp_digit_value(formatted_time.ms);
   684  05CB  1283               	bcf	3,5	;RP0=0, select bank0
   685  05CC  1303               	bcf	3,6	;RP1=0, select bank0
   686  05CD  0820               	movf	_formatted_time,w
   687  05CE  2731               	fcall	_set_disp_digit_value
   688  05CF                     l1237:
   689                           
   690                           ;display.c: 54:     PORTAbits.RA0 = 1;
   691  05CF  1283               	bcf	3,5	;RP0=0, select bank0
   692  05D0  1303               	bcf	3,6	;RP1=0, select bank0
   693  05D1  1405               	bsf	5,0	;volatile
   694  05D2                     l1239:
   695                           
   696                           ;display.c: 55:     _delay((unsigned long)((1)*(4000000/4000.0)));
   697  05D2  30C7               	movlw	199
   698  05D3  1283               	bcf	3,5	;RP0=0, select bank0
   699  05D4  1303               	bcf	3,6	;RP1=0, select bank0
   700  05D5  00AB               	movwf	??_update_disp
   701  05D6                     u807:
   702  05D6  2DD7               	nop2
   703  05D7  0BAB               	decfsz	??_update_disp,f
   704  05D8  2DD6               	goto	u807
   705  05D9  2DDA               	nop2
   706  05DA  0000               	nop
   707  05DB                     l1241:
   708                           
   709                           ;display.c: 56:     PORTAbits.RA0 = 0;
   710  05DB  1283               	bcf	3,5	;RP0=0, select bank0
   711  05DC  1303               	bcf	3,6	;RP1=0, select bank0
   712  05DD  1005               	bcf	5,0	;volatile
   713  05DE                     l1243:
   714                           
   715                           ;display.c: 58:     set_disp_digit_value(formatted_time.sec_1_digit);
   716  05DE  0821               	movf	_formatted_time+1,w
   717  05DF  2731               	fcall	_set_disp_digit_value
   718  05E0                     l1245:
   719                           
   720                           ;display.c: 59:     PORTAbits.RA1 = 1;
   721  05E0  1283               	bcf	3,5	;RP0=0, select bank0
   722  05E1  1303               	bcf	3,6	;RP1=0, select bank0
   723  05E2  1485               	bsf	5,1	;volatile
   724  05E3                     l1247:
   725                           
   726                           ;display.c: 60:     PORTBbits.RB7 = 0;
   727  05E3  1386               	bcf	6,7	;volatile
   728  05E4                     l1249:
   729                           
   730                           ;display.c: 61:     _delay((unsigned long)((1)*(4000000/4000.0)));
   731  05E4  30C7               	movlw	199
   732  05E5  1283               	bcf	3,5	;RP0=0, select bank0
   733  05E6  1303               	bcf	3,6	;RP1=0, select bank0
   734  05E7  00AB               	movwf	??_update_disp
   735  05E8                     u817:
   736  05E8  2DE9               	nop2
   737  05E9  0BAB               	decfsz	??_update_disp,f
   738  05EA  2DE8               	goto	u817
   739  05EB  2DEC               	nop2
   740  05EC  0000               	nop
   741  05ED                     l1251:
   742                           
   743                           ;display.c: 62:     PORTAbits.RA1 = 0;
   744  05ED  1283               	bcf	3,5	;RP0=0, select bank0
   745  05EE  1303               	bcf	3,6	;RP1=0, select bank0
   746  05EF  1085               	bcf	5,1	;volatile
   747  05F0                     l1253:
   748                           
   749                           ;display.c: 63:     PORTBbits.RB7 = 1;
   750  05F0  1786               	bsf	6,7	;volatile
   751  05F1                     l1255:
   752                           
   753                           ;display.c: 65:     set_disp_digit_value(formatted_time.sec_2_digit);
   754  05F1  0822               	movf	_formatted_time+2,w
   755  05F2  2731               	fcall	_set_disp_digit_value
   756  05F3                     l1257:
   757                           
   758                           ;display.c: 66:     PORTAbits.RA2 = 1;
   759  05F3  1283               	bcf	3,5	;RP0=0, select bank0
   760  05F4  1303               	bcf	3,6	;RP1=0, select bank0
   761  05F5  1505               	bsf	5,2	;volatile
   762  05F6                     l1259:
   763                           
   764                           ;display.c: 67:     _delay((unsigned long)((1)*(4000000/4000.0)));
   765  05F6  30C7               	movlw	199
   766  05F7  1283               	bcf	3,5	;RP0=0, select bank0
   767  05F8  1303               	bcf	3,6	;RP1=0, select bank0
   768  05F9  00AB               	movwf	??_update_disp
   769  05FA                     u827:
   770  05FA  2DFB               	nop2
   771  05FB  0BAB               	decfsz	??_update_disp,f
   772  05FC  2DFA               	goto	u827
   773  05FD  2DFE               	nop2
   774  05FE  0000               	nop
   775  05FF                     l1261:
   776                           
   777                           ;display.c: 68:     PORTAbits.RA2 = 0;
   778  05FF  1283               	bcf	3,5	;RP0=0, select bank0
   779  0600  1303               	bcf	3,6	;RP1=0, select bank0
   780  0601  1105               	bcf	5,2	;volatile
   781  0602                     l133:
   782  0602  0008               	return
   783  0603                     __end_of_update_disp:
   784                           
   785                           	psect	text3
   786  0731                     __ptext3:	
   787 ;; *************** function _set_disp_digit_value *****************
   788 ;; Defined at:
   789 ;;		line 10 in file "display.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  value           1    wreg     unsigned char 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  value           1    2[COMMON] unsigned char 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   803 ;;      Params:         0       0       0       0
   804 ;;      Locals:         1       0       0       0
   805 ;;      Temps:          2       0       0       0
   806 ;;      Totals:         3       0       0       0
   807 ;;Total ram usage:        3 bytes
   808 ;; Hardware stack levels used: 1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_update_disp
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _set_disp_digit_value
   818  0731                     _set_disp_digit_value:
   819                           
   820                           ;incstack = 0
   821                           ; Regs used in _set_disp_digit_value: [wreg-fsr0h+status,2+status,0]
   822                           ;set_disp_digit_value@value stored from wreg
   823  0731  00F2               	movwf	set_disp_digit_value@value
   824  0732                     l1203:
   825                           
   826                           ;display.c: 10: static void set_disp_digit_value(uint8_t value);display.c: 11: {;display
      +                          .c: 12:     switch(value)
   827  0732  2F65               	goto	l1227
   828  0733                     l1205:
   829                           
   830                           ;display.c: 15:             PORTB = 0xC0;
   831  0733  30C0               	movlw	192
   832  0734  1283               	bcf	3,5	;RP0=0, select bank0
   833  0735  1303               	bcf	3,6	;RP1=0, select bank0
   834  0736  0086               	movwf	6	;volatile
   835                           
   836                           ;display.c: 16:             break;
   837  0737  2F8D               	goto	l130
   838  0738                     l1207:
   839                           
   840                           ;display.c: 18:             PORTB = 0xF9;
   841  0738  30F9               	movlw	249
   842  0739  1283               	bcf	3,5	;RP0=0, select bank0
   843  073A  1303               	bcf	3,6	;RP1=0, select bank0
   844  073B  0086               	movwf	6	;volatile
   845                           
   846                           ;display.c: 19:             break;
   847  073C  2F8D               	goto	l130
   848  073D                     l1209:
   849                           
   850                           ;display.c: 21:             PORTB = 0xA4;
   851  073D  30A4               	movlw	164
   852  073E  1283               	bcf	3,5	;RP0=0, select bank0
   853  073F  1303               	bcf	3,6	;RP1=0, select bank0
   854  0740  0086               	movwf	6	;volatile
   855                           
   856                           ;display.c: 22:             break;
   857  0741  2F8D               	goto	l130
   858  0742                     l1211:
   859                           
   860                           ;display.c: 24:             PORTB = 0xB0;
   861  0742  30B0               	movlw	176
   862  0743  1283               	bcf	3,5	;RP0=0, select bank0
   863  0744  1303               	bcf	3,6	;RP1=0, select bank0
   864  0745  0086               	movwf	6	;volatile
   865                           
   866                           ;display.c: 25:             break;
   867  0746  2F8D               	goto	l130
   868  0747                     l1213:
   869                           
   870                           ;display.c: 27:             PORTB = 0x99;
   871  0747  3099               	movlw	153
   872  0748  1283               	bcf	3,5	;RP0=0, select bank0
   873  0749  1303               	bcf	3,6	;RP1=0, select bank0
   874  074A  0086               	movwf	6	;volatile
   875                           
   876                           ;display.c: 28:             break;
   877  074B  2F8D               	goto	l130
   878  074C                     l1215:
   879                           
   880                           ;display.c: 30:             PORTB = 0x92;
   881  074C  3092               	movlw	146
   882  074D  1283               	bcf	3,5	;RP0=0, select bank0
   883  074E  1303               	bcf	3,6	;RP1=0, select bank0
   884  074F  0086               	movwf	6	;volatile
   885                           
   886                           ;display.c: 31:             break;
   887  0750  2F8D               	goto	l130
   888  0751                     l1217:
   889                           
   890                           ;display.c: 33:             PORTB = 0x82;
   891  0751  3082               	movlw	130
   892  0752  1283               	bcf	3,5	;RP0=0, select bank0
   893  0753  1303               	bcf	3,6	;RP1=0, select bank0
   894  0754  0086               	movwf	6	;volatile
   895                           
   896                           ;display.c: 34:             break;
   897  0755  2F8D               	goto	l130
   898  0756                     l1219:
   899                           
   900                           ;display.c: 36:             PORTB = 0xF8;
   901  0756  30F8               	movlw	248
   902  0757  1283               	bcf	3,5	;RP0=0, select bank0
   903  0758  1303               	bcf	3,6	;RP1=0, select bank0
   904  0759  0086               	movwf	6	;volatile
   905                           
   906                           ;display.c: 37:             break;
   907  075A  2F8D               	goto	l130
   908  075B                     l1221:
   909                           
   910                           ;display.c: 39:             PORTB = 0x80;
   911  075B  3080               	movlw	128
   912  075C  1283               	bcf	3,5	;RP0=0, select bank0
   913  075D  1303               	bcf	3,6	;RP1=0, select bank0
   914  075E  0086               	movwf	6	;volatile
   915                           
   916                           ;display.c: 40:             break;
   917  075F  2F8D               	goto	l130
   918  0760                     l1223:
   919                           
   920                           ;display.c: 42:             PORTB = 0x90;
   921  0760  3090               	movlw	144
   922  0761  1283               	bcf	3,5	;RP0=0, select bank0
   923  0762  1303               	bcf	3,6	;RP1=0, select bank0
   924  0763  0086               	movwf	6	;volatile
   925                           
   926                           ;display.c: 43:             break;
   927  0764  2F8D               	goto	l130
   928  0765                     l1227:
   929  0765  0872               	movf	set_disp_digit_value@value,w
   930  0766  00F0               	movwf	??_set_disp_digit_value
   931  0767  01F1               	clrf	??_set_disp_digit_value+1
   932                           
   933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 1, Range of values is 0 to 0
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte            4     3 (average)
   939                           ; direct_byte            7     6 (fixed)
   940                           ; jumptable            260     6 (fixed)
   941                           ;	Chosen strategy is simple_byte
   942  0768  0871               	movf	??_set_disp_digit_value+1,w
   943  0769  3A00               	xorlw	0	; case 0
   944  076A  1903               	skipnz
   945  076B  2F6D               	goto	l1333
   946  076C  2F8D               	goto	l130
   947  076D                     l1333:
   948                           
   949                           ; Switch size 1, requested type "simple"
   950                           ; Number of cases is 10, Range of values is 0 to 9
   951                           ; switch strategies available:
   952                           ; Name         Instructions Cycles
   953                           ; direct_byte           16     6 (fixed)
   954                           ; simple_byte           31    16 (average)
   955                           ; jumptable            260     6 (fixed)
   956                           ;	Chosen strategy is simple_byte
   957  076D  0870               	movf	??_set_disp_digit_value,w
   958  076E  3A00               	xorlw	0	; case 0
   959  076F  1903               	skipnz
   960  0770  2F33               	goto	l1205
   961  0771  3A01               	xorlw	1	; case 1
   962  0772  1903               	skipnz
   963  0773  2F38               	goto	l1207
   964  0774  3A03               	xorlw	3	; case 2
   965  0775  1903               	skipnz
   966  0776  2F3D               	goto	l1209
   967  0777  3A01               	xorlw	1	; case 3
   968  0778  1903               	skipnz
   969  0779  2F42               	goto	l1211
   970  077A  3A07               	xorlw	7	; case 4
   971  077B  1903               	skipnz
   972  077C  2F47               	goto	l1213
   973  077D  3A01               	xorlw	1	; case 5
   974  077E  1903               	skipnz
   975  077F  2F4C               	goto	l1215
   976  0780  3A03               	xorlw	3	; case 6
   977  0781  1903               	skipnz
   978  0782  2F51               	goto	l1217
   979  0783  3A01               	xorlw	1	; case 7
   980  0784  1903               	skipnz
   981  0785  2F56               	goto	l1219
   982  0786  3A0F               	xorlw	15	; case 8
   983  0787  1903               	skipnz
   984  0788  2F5B               	goto	l1221
   985  0789  3A01               	xorlw	1	; case 9
   986  078A  1903               	skipnz
   987  078B  2F60               	goto	l1223
   988  078C  2F8D               	goto	l130
   989  078D                     l130:
   990  078D  0008               	return
   991  078E                     __end_of_set_disp_digit_value:
   992                           
   993                           	psect	text4
   994  0681                     __ptext4:	
   995 ;; *************** function _format_time *****************
   996 ;; Defined at:
   997 ;;		line 33 in file "stopwatch.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  cashed_value    1    3[BANK0 ] unsigned char 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0, pclath, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1011 ;;      Params:         0       0       0       0
  1012 ;;      Locals:         0       1       0       0
  1013 ;;      Temps:          0       3       0       0
  1014 ;;      Totals:         0       4       0       0
  1015 ;;Total ram usage:        4 bytes
  1016 ;; Hardware stack levels used: 1
  1017 ;; Hardware stack levels required when called: 1
  1018 ;; This function calls:
  1019 ;;		___awdiv
  1020 ;;		___awmod
  1021 ;;		___lwdiv
  1022 ;;		___lwmod
  1023 ;; This function is called by:
  1024 ;;		_update_disp
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           
  1029                           ;psect for function _format_time
  1030  0681                     _format_time:
  1031  0681                     l1201:	
  1032                           ;incstack = 0
  1033                           ; Regs used in _format_time: [wreg+status,2+status,0+pclath+cstack]
  1034                           
  1035                           
  1036                           ;stopwatch.c: 35:     uint8_t cashed_value;;stopwatch.c: 37:     formatted_time.ms = tim
      +                          e_ms / 100 % 10;
  1037  0681  300A               	movlw	10
  1038  0682  00F8               	movwf	___lwmod@divisor
  1039  0683  3000               	movlw	0
  1040  0684  00F9               	movwf	___lwmod@divisor+1
  1041  0685  3064               	movlw	100
  1042  0686  00F0               	movwf	___lwdiv@divisor
  1043  0687  3000               	movlw	0
  1044  0688  00F1               	movwf	___lwdiv@divisor+1
  1045  0689  1283               	bcf	3,5	;RP0=0, select bank0
  1046  068A  1303               	bcf	3,6	;RP1=0, select bank0
  1047  068B  0824               	movf	_time_ms+1,w
  1048  068C  00F3               	movwf	___lwdiv@dividend+1
  1049  068D  0823               	movf	_time_ms,w
  1050  068E  00F2               	movwf	___lwdiv@dividend
  1051  068F  263D               	fcall	___lwdiv
  1052  0690  0871               	movf	?___lwdiv+1,w
  1053  0691  00FB               	movwf	___lwmod@dividend+1
  1054  0692  0870               	movf	?___lwdiv,w
  1055  0693  00FA               	movwf	___lwmod@dividend
  1056  0694  2603               	fcall	___lwmod
  1057  0695  0878               	movf	?___lwmod,w
  1058  0696  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0697  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0698  00A7               	movwf	??_format_time
  1061  0699  0827               	movf	??_format_time,w
  1062  069A  00A0               	movwf	_formatted_time
  1063                           
  1064                           ;stopwatch.c: 38:     cashed_value = time_ms / 1000 % 60;
  1065  069B  303C               	movlw	60
  1066  069C  00F8               	movwf	___lwmod@divisor
  1067  069D  3000               	movlw	0
  1068  069E  00F9               	movwf	___lwmod@divisor+1
  1069  069F  30E8               	movlw	232
  1070  06A0  00F0               	movwf	___lwdiv@divisor
  1071  06A1  3003               	movlw	3
  1072  06A2  00F1               	movwf	___lwdiv@divisor+1
  1073  06A3  0824               	movf	_time_ms+1,w
  1074  06A4  00F3               	movwf	___lwdiv@dividend+1
  1075  06A5  0823               	movf	_time_ms,w
  1076  06A6  00F2               	movwf	___lwdiv@dividend
  1077  06A7  263D               	fcall	___lwdiv
  1078  06A8  0871               	movf	?___lwdiv+1,w
  1079  06A9  00FB               	movwf	___lwmod@dividend+1
  1080  06AA  0870               	movf	?___lwdiv,w
  1081  06AB  00FA               	movwf	___lwmod@dividend
  1082  06AC  2603               	fcall	___lwmod
  1083  06AD  0878               	movf	?___lwmod,w
  1084  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1085  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1086  06B0  00A7               	movwf	??_format_time
  1087  06B1  0827               	movf	??_format_time,w
  1088  06B2  00AA               	movwf	format_time@cashed_value
  1089                           
  1090                           ;stopwatch.c: 39:     formatted_time.sec_1_digit = cashed_value % 10;
  1091  06B3  300A               	movlw	10
  1092  06B4  00F0               	movwf	___awmod@divisor
  1093  06B5  3000               	movlw	0
  1094  06B6  00F1               	movwf	___awmod@divisor+1
  1095  06B7  082A               	movf	format_time@cashed_value,w
  1096  06B8  00A7               	movwf	??_format_time
  1097  06B9  01A8               	clrf	??_format_time+1
  1098  06BA  0827               	movf	??_format_time,w
  1099  06BB  00F2               	movwf	___awmod@dividend
  1100  06BC  0828               	movf	??_format_time+1,w
  1101  06BD  00F3               	movwf	___awmod@dividend+1
  1102  06BE  26D8               	fcall	___awmod
  1103  06BF  0870               	movf	?___awmod,w
  1104  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1105  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1106  06C2  00A9               	movwf	??_format_time+2
  1107  06C3  0829               	movf	??_format_time+2,w
  1108  06C4  00A1               	movwf	_formatted_time+1
  1109                           
  1110                           ;stopwatch.c: 40:     formatted_time.sec_2_digit = (uint8_t)(cashed_value / 10);
  1111  06C5  300A               	movlw	10
  1112  06C6  00F0               	movwf	___awdiv@divisor
  1113  06C7  3000               	movlw	0
  1114  06C8  00F1               	movwf	___awdiv@divisor+1
  1115  06C9  082A               	movf	format_time@cashed_value,w
  1116  06CA  00A7               	movwf	??_format_time
  1117  06CB  01A8               	clrf	??_format_time+1
  1118  06CC  0827               	movf	??_format_time,w
  1119  06CD  00F2               	movwf	___awdiv@dividend
  1120  06CE  0828               	movf	??_format_time+1,w
  1121  06CF  00F3               	movwf	___awdiv@dividend+1
  1122  06D0  278E               	fcall	___awdiv
  1123  06D1  0870               	movf	?___awdiv,w
  1124  06D2  1283               	bcf	3,5	;RP0=0, select bank0
  1125  06D3  1303               	bcf	3,6	;RP1=0, select bank0
  1126  06D4  00A9               	movwf	??_format_time+2
  1127  06D5  0829               	movf	??_format_time+2,w
  1128  06D6  00A2               	movwf	_formatted_time+2
  1129  06D7                     l97:
  1130  06D7  0008               	return
  1131  06D8                     __end_of_format_time:
  1132                           
  1133                           	psect	text5
  1134  0603                     __ptext5:	
  1135 ;; *************** function ___lwmod *****************
  1136 ;; Defined at:
  1137 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/lwmod.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  divisor         2    8[COMMON] unsigned int 
  1140 ;;  dividend        2   10[COMMON] unsigned int 
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;  counter         1   13[COMMON] unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  2    8[COMMON] unsigned int 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1152 ;;      Params:         4       0       0       0
  1153 ;;      Locals:         1       0       0       0
  1154 ;;      Temps:          1       0       0       0
  1155 ;;      Totals:         6       0       0       0
  1156 ;;Total ram usage:        6 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; This function calls:
  1159 ;;		Nothing
  1160 ;; This function is called by:
  1161 ;;		_format_time
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           
  1166                           ;psect for function ___lwmod
  1167  0603                     ___lwmod:
  1168  0603                     l1171:	
  1169                           ;incstack = 0
  1170                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1171                           
  1172  0603  0878               	movf	___lwmod@divisor,w
  1173  0604  0479               	iorwf	___lwmod@divisor+1,w
  1174  0605  1903               	btfsc	3,2
  1175  0606  2E08               	goto	u721
  1176  0607  2E09               	goto	u720
  1177  0608                     u721:
  1178  0608  2E38               	goto	l1189
  1179  0609                     u720:
  1180  0609                     l1173:
  1181  0609  01FD               	clrf	___lwmod@counter
  1182  060A  0AFD               	incf	___lwmod@counter,f
  1183  060B  2E17               	goto	l1179
  1184  060C                     l1175:
  1185  060C  3001               	movlw	1
  1186  060D                     u735:
  1187  060D  1003               	clrc
  1188  060E  0DF8               	rlf	___lwmod@divisor,f
  1189  060F  0DF9               	rlf	___lwmod@divisor+1,f
  1190  0610  3EFF               	addlw	-1
  1191  0611  1D03               	skipz
  1192  0612  2E0D               	goto	u735
  1193  0613                     l1177:
  1194  0613  3001               	movlw	1
  1195  0614  00FC               	movwf	??___lwmod
  1196  0615  087C               	movf	??___lwmod,w
  1197  0616  07FD               	addwf	___lwmod@counter,f
  1198  0617                     l1179:
  1199  0617  1FF9               	btfss	___lwmod@divisor+1,7
  1200  0618  2E1A               	goto	u741
  1201  0619  2E1B               	goto	u740
  1202  061A                     u741:
  1203  061A  2E0C               	goto	l1175
  1204  061B                     u740:
  1205  061B                     l1181:
  1206  061B  0879               	movf	___lwmod@divisor+1,w
  1207  061C  027B               	subwf	___lwmod@dividend+1,w
  1208  061D  1D03               	skipz
  1209  061E  2E21               	goto	u755
  1210  061F  0878               	movf	___lwmod@divisor,w
  1211  0620  027A               	subwf	___lwmod@dividend,w
  1212  0621                     u755:
  1213  0621  1C03               	skipc
  1214  0622  2E24               	goto	u751
  1215  0623  2E25               	goto	u750
  1216  0624                     u751:
  1217  0624  2E2B               	goto	l1185
  1218  0625                     u750:
  1219  0625                     l1183:
  1220  0625  0878               	movf	___lwmod@divisor,w
  1221  0626  02FA               	subwf	___lwmod@dividend,f
  1222  0627  0879               	movf	___lwmod@divisor+1,w
  1223  0628  1C03               	skipc
  1224  0629  03FB               	decf	___lwmod@dividend+1,f
  1225  062A  02FB               	subwf	___lwmod@dividend+1,f
  1226  062B                     l1185:
  1227  062B  3001               	movlw	1
  1228  062C                     u765:
  1229  062C  1003               	clrc
  1230  062D  0CF9               	rrf	___lwmod@divisor+1,f
  1231  062E  0CF8               	rrf	___lwmod@divisor,f
  1232  062F  3EFF               	addlw	-1
  1233  0630  1D03               	skipz
  1234  0631  2E2C               	goto	u765
  1235  0632                     l1187:
  1236  0632  3001               	movlw	1
  1237  0633  02FD               	subwf	___lwmod@counter,f
  1238  0634  1D03               	btfss	3,2
  1239  0635  2E37               	goto	u771
  1240  0636  2E38               	goto	u770
  1241  0637                     u771:
  1242  0637  2E1B               	goto	l1181
  1243  0638                     u770:
  1244  0638                     l1189:
  1245  0638  087B               	movf	___lwmod@dividend+1,w
  1246  0639  00F9               	movwf	?___lwmod+1
  1247  063A  087A               	movf	___lwmod@dividend,w
  1248  063B  00F8               	movwf	?___lwmod
  1249  063C                     l501:
  1250  063C  0008               	return
  1251  063D                     __end_of___lwmod:
  1252                           
  1253                           	psect	text6
  1254  063D                     __ptext6:	
  1255 ;; *************** function ___lwdiv *****************
  1256 ;; Defined at:
  1257 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/lwdiv.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  divisor         2    0[COMMON] unsigned int 
  1260 ;;  dividend        2    2[COMMON] unsigned int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  quotient        2    5[COMMON] unsigned int 
  1263 ;;  counter         1    7[COMMON] unsigned char 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  2    0[COMMON] unsigned int 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1273 ;;      Params:         4       0       0       0
  1274 ;;      Locals:         3       0       0       0
  1275 ;;      Temps:          1       0       0       0
  1276 ;;      Totals:         8       0       0       0
  1277 ;;Total ram usage:        8 bytes
  1278 ;; Hardware stack levels used: 1
  1279 ;; This function calls:
  1280 ;;		Nothing
  1281 ;; This function is called by:
  1282 ;;		_format_time
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           
  1287                           ;psect for function ___lwdiv
  1288  063D                     ___lwdiv:
  1289  063D                     l1145:	
  1290                           ;incstack = 0
  1291                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1292                           
  1293  063D  01F5               	clrf	___lwdiv@quotient
  1294  063E  01F6               	clrf	___lwdiv@quotient+1
  1295  063F                     l1147:
  1296  063F  0870               	movf	___lwdiv@divisor,w
  1297  0640  0471               	iorwf	___lwdiv@divisor+1,w
  1298  0641  1903               	btfsc	3,2
  1299  0642  2E44               	goto	u651
  1300  0643  2E45               	goto	u650
  1301  0644                     u651:
  1302  0644  2E7C               	goto	l1167
  1303  0645                     u650:
  1304  0645                     l1149:
  1305  0645  01F7               	clrf	___lwdiv@counter
  1306  0646  0AF7               	incf	___lwdiv@counter,f
  1307  0647  2E53               	goto	l1155
  1308  0648                     l1151:
  1309  0648  3001               	movlw	1
  1310  0649                     u665:
  1311  0649  1003               	clrc
  1312  064A  0DF0               	rlf	___lwdiv@divisor,f
  1313  064B  0DF1               	rlf	___lwdiv@divisor+1,f
  1314  064C  3EFF               	addlw	-1
  1315  064D  1D03               	skipz
  1316  064E  2E49               	goto	u665
  1317  064F                     l1153:
  1318  064F  3001               	movlw	1
  1319  0650  00F4               	movwf	??___lwdiv
  1320  0651  0874               	movf	??___lwdiv,w
  1321  0652  07F7               	addwf	___lwdiv@counter,f
  1322  0653                     l1155:
  1323  0653  1FF1               	btfss	___lwdiv@divisor+1,7
  1324  0654  2E56               	goto	u671
  1325  0655  2E57               	goto	u670
  1326  0656                     u671:
  1327  0656  2E48               	goto	l1151
  1328  0657                     u670:
  1329  0657                     l1157:
  1330  0657  3001               	movlw	1
  1331  0658                     u685:
  1332  0658  1003               	clrc
  1333  0659  0DF5               	rlf	___lwdiv@quotient,f
  1334  065A  0DF6               	rlf	___lwdiv@quotient+1,f
  1335  065B  3EFF               	addlw	-1
  1336  065C  1D03               	skipz
  1337  065D  2E58               	goto	u685
  1338  065E  0871               	movf	___lwdiv@divisor+1,w
  1339  065F  0273               	subwf	___lwdiv@dividend+1,w
  1340  0660  1D03               	skipz
  1341  0661  2E64               	goto	u695
  1342  0662  0870               	movf	___lwdiv@divisor,w
  1343  0663  0272               	subwf	___lwdiv@dividend,w
  1344  0664                     u695:
  1345  0664  1C03               	skipc
  1346  0665  2E67               	goto	u691
  1347  0666  2E68               	goto	u690
  1348  0667                     u691:
  1349  0667  2E6F               	goto	l1163
  1350  0668                     u690:
  1351  0668                     l1159:
  1352  0668  0870               	movf	___lwdiv@divisor,w
  1353  0669  02F2               	subwf	___lwdiv@dividend,f
  1354  066A  0871               	movf	___lwdiv@divisor+1,w
  1355  066B  1C03               	skipc
  1356  066C  03F3               	decf	___lwdiv@dividend+1,f
  1357  066D  02F3               	subwf	___lwdiv@dividend+1,f
  1358  066E                     l1161:
  1359  066E  1475               	bsf	___lwdiv@quotient,0
  1360  066F                     l1163:
  1361  066F  3001               	movlw	1
  1362  0670                     u705:
  1363  0670  1003               	clrc
  1364  0671  0CF1               	rrf	___lwdiv@divisor+1,f
  1365  0672  0CF0               	rrf	___lwdiv@divisor,f
  1366  0673  3EFF               	addlw	-1
  1367  0674  1D03               	skipz
  1368  0675  2E70               	goto	u705
  1369  0676                     l1165:
  1370  0676  3001               	movlw	1
  1371  0677  02F7               	subwf	___lwdiv@counter,f
  1372  0678  1D03               	btfss	3,2
  1373  0679  2E7B               	goto	u711
  1374  067A  2E7C               	goto	u710
  1375  067B                     u711:
  1376  067B  2E57               	goto	l1157
  1377  067C                     u710:
  1378  067C                     l1167:
  1379  067C  0876               	movf	___lwdiv@quotient+1,w
  1380  067D  00F1               	movwf	?___lwdiv+1
  1381  067E  0875               	movf	___lwdiv@quotient,w
  1382  067F  00F0               	movwf	?___lwdiv
  1383  0680                     l491:
  1384  0680  0008               	return
  1385  0681                     __end_of___lwdiv:
  1386                           
  1387                           	psect	text7
  1388  06D8                     __ptext7:	
  1389 ;; *************** function ___awmod *****************
  1390 ;; Defined at:
  1391 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/awmod.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  divisor         2    0[COMMON] int 
  1394 ;;  dividend        2    2[COMMON] int 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  sign            1    6[COMMON] unsigned char 
  1397 ;;  counter         1    5[COMMON] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  2    0[COMMON] int 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1407 ;;      Params:         4       0       0       0
  1408 ;;      Locals:         2       0       0       0
  1409 ;;      Temps:          1       0       0       0
  1410 ;;      Totals:         7       0       0       0
  1411 ;;Total ram usage:        7 bytes
  1412 ;; Hardware stack levels used: 1
  1413 ;; This function calls:
  1414 ;;		Nothing
  1415 ;; This function is called by:
  1416 ;;		_format_time
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           
  1421                           ;psect for function ___awmod
  1422  06D8                     ___awmod:
  1423  06D8                     l1107:	
  1424                           ;incstack = 0
  1425                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1426                           
  1427  06D8  01F6               	clrf	___awmod@sign
  1428  06D9                     l1109:
  1429  06D9  1FF3               	btfss	___awmod@dividend+1,7
  1430  06DA  2EDC               	goto	u561
  1431  06DB  2EDD               	goto	u560
  1432  06DC                     u561:
  1433  06DC  2EE4               	goto	l1115
  1434  06DD                     u560:
  1435  06DD                     l1111:
  1436  06DD  09F2               	comf	___awmod@dividend,f
  1437  06DE  09F3               	comf	___awmod@dividend+1,f
  1438  06DF  0AF2               	incf	___awmod@dividend,f
  1439  06E0  1903               	skipnz
  1440  06E1  0AF3               	incf	___awmod@dividend+1,f
  1441  06E2                     l1113:
  1442  06E2  01F6               	clrf	___awmod@sign
  1443  06E3  0AF6               	incf	___awmod@sign,f
  1444  06E4                     l1115:
  1445  06E4  1FF1               	btfss	___awmod@divisor+1,7
  1446  06E5  2EE7               	goto	u571
  1447  06E6  2EE8               	goto	u570
  1448  06E7                     u571:
  1449  06E7  2EED               	goto	l1119
  1450  06E8                     u570:
  1451  06E8                     l1117:
  1452  06E8  09F0               	comf	___awmod@divisor,f
  1453  06E9  09F1               	comf	___awmod@divisor+1,f
  1454  06EA  0AF0               	incf	___awmod@divisor,f
  1455  06EB  1903               	skipnz
  1456  06EC  0AF1               	incf	___awmod@divisor+1,f
  1457  06ED                     l1119:
  1458  06ED  0870               	movf	___awmod@divisor,w
  1459  06EE  0471               	iorwf	___awmod@divisor+1,w
  1460  06EF  1903               	btfsc	3,2
  1461  06F0  2EF2               	goto	u581
  1462  06F1  2EF3               	goto	u580
  1463  06F2                     u581:
  1464  06F2  2F22               	goto	l1137
  1465  06F3                     u580:
  1466  06F3                     l1121:
  1467  06F3  01F5               	clrf	___awmod@counter
  1468  06F4  0AF5               	incf	___awmod@counter,f
  1469  06F5  2F01               	goto	l1127
  1470  06F6                     l1123:
  1471  06F6  3001               	movlw	1
  1472  06F7                     u595:
  1473  06F7  1003               	clrc
  1474  06F8  0DF0               	rlf	___awmod@divisor,f
  1475  06F9  0DF1               	rlf	___awmod@divisor+1,f
  1476  06FA  3EFF               	addlw	-1
  1477  06FB  1D03               	skipz
  1478  06FC  2EF7               	goto	u595
  1479  06FD                     l1125:
  1480  06FD  3001               	movlw	1
  1481  06FE  00F4               	movwf	??___awmod
  1482  06FF  0874               	movf	??___awmod,w
  1483  0700  07F5               	addwf	___awmod@counter,f
  1484  0701                     l1127:
  1485  0701  1FF1               	btfss	___awmod@divisor+1,7
  1486  0702  2F04               	goto	u601
  1487  0703  2F05               	goto	u600
  1488  0704                     u601:
  1489  0704  2EF6               	goto	l1123
  1490  0705                     u600:
  1491  0705                     l1129:
  1492  0705  0871               	movf	___awmod@divisor+1,w
  1493  0706  0273               	subwf	___awmod@dividend+1,w
  1494  0707  1D03               	skipz
  1495  0708  2F0B               	goto	u615
  1496  0709  0870               	movf	___awmod@divisor,w
  1497  070A  0272               	subwf	___awmod@dividend,w
  1498  070B                     u615:
  1499  070B  1C03               	skipc
  1500  070C  2F0E               	goto	u611
  1501  070D  2F0F               	goto	u610
  1502  070E                     u611:
  1503  070E  2F15               	goto	l1133
  1504  070F                     u610:
  1505  070F                     l1131:
  1506  070F  0870               	movf	___awmod@divisor,w
  1507  0710  02F2               	subwf	___awmod@dividend,f
  1508  0711  0871               	movf	___awmod@divisor+1,w
  1509  0712  1C03               	skipc
  1510  0713  03F3               	decf	___awmod@dividend+1,f
  1511  0714  02F3               	subwf	___awmod@dividend+1,f
  1512  0715                     l1133:
  1513  0715  3001               	movlw	1
  1514  0716                     u625:
  1515  0716  1003               	clrc
  1516  0717  0CF1               	rrf	___awmod@divisor+1,f
  1517  0718  0CF0               	rrf	___awmod@divisor,f
  1518  0719  3EFF               	addlw	-1
  1519  071A  1D03               	skipz
  1520  071B  2F16               	goto	u625
  1521  071C                     l1135:
  1522  071C  3001               	movlw	1
  1523  071D  02F5               	subwf	___awmod@counter,f
  1524  071E  1D03               	btfss	3,2
  1525  071F  2F21               	goto	u631
  1526  0720  2F22               	goto	u630
  1527  0721                     u631:
  1528  0721  2F05               	goto	l1129
  1529  0722                     u630:
  1530  0722                     l1137:
  1531  0722  0876               	movf	___awmod@sign,w
  1532  0723  1903               	btfsc	3,2
  1533  0724  2F26               	goto	u641
  1534  0725  2F27               	goto	u640
  1535  0726                     u641:
  1536  0726  2F2C               	goto	l1141
  1537  0727                     u640:
  1538  0727                     l1139:
  1539  0727  09F2               	comf	___awmod@dividend,f
  1540  0728  09F3               	comf	___awmod@dividend+1,f
  1541  0729  0AF2               	incf	___awmod@dividend,f
  1542  072A  1903               	skipnz
  1543  072B  0AF3               	incf	___awmod@dividend+1,f
  1544  072C                     l1141:
  1545  072C  0873               	movf	___awmod@dividend+1,w
  1546  072D  00F1               	movwf	?___awmod+1
  1547  072E  0872               	movf	___awmod@dividend,w
  1548  072F  00F0               	movwf	?___awmod
  1549  0730                     l385:
  1550  0730  0008               	return
  1551  0731                     __end_of___awmod:
  1552                           
  1553                           	psect	text8
  1554  078E                     __ptext8:	
  1555 ;; *************** function ___awdiv *****************
  1556 ;; Defined at:
  1557 ;;		line 5 in file "/opt/microchip/xc8/v2.32/pic/sources/c90/common/awdiv.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  divisor         2    0[COMMON] int 
  1560 ;;  dividend        2    2[COMMON] int 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  quotient        2    7[COMMON] int 
  1563 ;;  sign            1    6[COMMON] unsigned char 
  1564 ;;  counter         1    5[COMMON] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  2    0[COMMON] int 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2, status,0
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1574 ;;      Params:         4       0       0       0
  1575 ;;      Locals:         4       0       0       0
  1576 ;;      Temps:          1       0       0       0
  1577 ;;      Totals:         9       0       0       0
  1578 ;;Total ram usage:        9 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_format_time
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           
  1588                           ;psect for function ___awdiv
  1589  078E                     ___awdiv:
  1590  078E                     l1063:	
  1591                           ;incstack = 0
  1592                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1593                           
  1594  078E  01F6               	clrf	___awdiv@sign
  1595  078F                     l1065:
  1596  078F  1FF1               	btfss	___awdiv@divisor+1,7
  1597  0790  2F92               	goto	u461
  1598  0791  2F93               	goto	u460
  1599  0792                     u461:
  1600  0792  2F9A               	goto	l1071
  1601  0793                     u460:
  1602  0793                     l1067:
  1603  0793  09F0               	comf	___awdiv@divisor,f
  1604  0794  09F1               	comf	___awdiv@divisor+1,f
  1605  0795  0AF0               	incf	___awdiv@divisor,f
  1606  0796  1903               	skipnz
  1607  0797  0AF1               	incf	___awdiv@divisor+1,f
  1608  0798                     l1069:
  1609  0798  01F6               	clrf	___awdiv@sign
  1610  0799  0AF6               	incf	___awdiv@sign,f
  1611  079A                     l1071:
  1612  079A  1FF3               	btfss	___awdiv@dividend+1,7
  1613  079B  2F9D               	goto	u471
  1614  079C  2F9E               	goto	u470
  1615  079D                     u471:
  1616  079D  2FA7               	goto	l1077
  1617  079E                     u470:
  1618  079E                     l1073:
  1619  079E  09F2               	comf	___awdiv@dividend,f
  1620  079F  09F3               	comf	___awdiv@dividend+1,f
  1621  07A0  0AF2               	incf	___awdiv@dividend,f
  1622  07A1  1903               	skipnz
  1623  07A2  0AF3               	incf	___awdiv@dividend+1,f
  1624  07A3                     l1075:
  1625  07A3  3001               	movlw	1
  1626  07A4  00F4               	movwf	??___awdiv
  1627  07A5  0874               	movf	??___awdiv,w
  1628  07A6  06F6               	xorwf	___awdiv@sign,f
  1629  07A7                     l1077:
  1630  07A7  01F7               	clrf	___awdiv@quotient
  1631  07A8  01F8               	clrf	___awdiv@quotient+1
  1632  07A9                     l1079:
  1633  07A9  0870               	movf	___awdiv@divisor,w
  1634  07AA  0471               	iorwf	___awdiv@divisor+1,w
  1635  07AB  1903               	btfsc	3,2
  1636  07AC  2FAE               	goto	u481
  1637  07AD  2FAF               	goto	u480
  1638  07AE                     u481:
  1639  07AE  2FE6               	goto	l1099
  1640  07AF                     u480:
  1641  07AF                     l1081:
  1642  07AF  01F5               	clrf	___awdiv@counter
  1643  07B0  0AF5               	incf	___awdiv@counter,f
  1644  07B1  2FBD               	goto	l1087
  1645  07B2                     l1083:
  1646  07B2  3001               	movlw	1
  1647  07B3                     u495:
  1648  07B3  1003               	clrc
  1649  07B4  0DF0               	rlf	___awdiv@divisor,f
  1650  07B5  0DF1               	rlf	___awdiv@divisor+1,f
  1651  07B6  3EFF               	addlw	-1
  1652  07B7  1D03               	skipz
  1653  07B8  2FB3               	goto	u495
  1654  07B9                     l1085:
  1655  07B9  3001               	movlw	1
  1656  07BA  00F4               	movwf	??___awdiv
  1657  07BB  0874               	movf	??___awdiv,w
  1658  07BC  07F5               	addwf	___awdiv@counter,f
  1659  07BD                     l1087:
  1660  07BD  1FF1               	btfss	___awdiv@divisor+1,7
  1661  07BE  2FC0               	goto	u501
  1662  07BF  2FC1               	goto	u500
  1663  07C0                     u501:
  1664  07C0  2FB2               	goto	l1083
  1665  07C1                     u500:
  1666  07C1                     l1089:
  1667  07C1  3001               	movlw	1
  1668  07C2                     u515:
  1669  07C2  1003               	clrc
  1670  07C3  0DF7               	rlf	___awdiv@quotient,f
  1671  07C4  0DF8               	rlf	___awdiv@quotient+1,f
  1672  07C5  3EFF               	addlw	-1
  1673  07C6  1D03               	skipz
  1674  07C7  2FC2               	goto	u515
  1675  07C8  0871               	movf	___awdiv@divisor+1,w
  1676  07C9  0273               	subwf	___awdiv@dividend+1,w
  1677  07CA  1D03               	skipz
  1678  07CB  2FCE               	goto	u525
  1679  07CC  0870               	movf	___awdiv@divisor,w
  1680  07CD  0272               	subwf	___awdiv@dividend,w
  1681  07CE                     u525:
  1682  07CE  1C03               	skipc
  1683  07CF  2FD1               	goto	u521
  1684  07D0  2FD2               	goto	u520
  1685  07D1                     u521:
  1686  07D1  2FD9               	goto	l1095
  1687  07D2                     u520:
  1688  07D2                     l1091:
  1689  07D2  0870               	movf	___awdiv@divisor,w
  1690  07D3  02F2               	subwf	___awdiv@dividend,f
  1691  07D4  0871               	movf	___awdiv@divisor+1,w
  1692  07D5  1C03               	skipc
  1693  07D6  03F3               	decf	___awdiv@dividend+1,f
  1694  07D7  02F3               	subwf	___awdiv@dividend+1,f
  1695  07D8                     l1093:
  1696  07D8  1477               	bsf	___awdiv@quotient,0
  1697  07D9                     l1095:
  1698  07D9  3001               	movlw	1
  1699  07DA                     u535:
  1700  07DA  1003               	clrc
  1701  07DB  0CF1               	rrf	___awdiv@divisor+1,f
  1702  07DC  0CF0               	rrf	___awdiv@divisor,f
  1703  07DD  3EFF               	addlw	-1
  1704  07DE  1D03               	skipz
  1705  07DF  2FDA               	goto	u535
  1706  07E0                     l1097:
  1707  07E0  3001               	movlw	1
  1708  07E1  02F5               	subwf	___awdiv@counter,f
  1709  07E2  1D03               	btfss	3,2
  1710  07E3  2FE5               	goto	u541
  1711  07E4  2FE6               	goto	u540
  1712  07E5                     u541:
  1713  07E5  2FC1               	goto	l1089
  1714  07E6                     u540:
  1715  07E6                     l1099:
  1716  07E6  0876               	movf	___awdiv@sign,w
  1717  07E7  1903               	btfsc	3,2
  1718  07E8  2FEA               	goto	u551
  1719  07E9  2FEB               	goto	u550
  1720  07EA                     u551:
  1721  07EA  2FF0               	goto	l1103
  1722  07EB                     u550:
  1723  07EB                     l1101:
  1724  07EB  09F7               	comf	___awdiv@quotient,f
  1725  07EC  09F8               	comf	___awdiv@quotient+1,f
  1726  07ED  0AF7               	incf	___awdiv@quotient,f
  1727  07EE  1903               	skipnz
  1728  07EF  0AF8               	incf	___awdiv@quotient+1,f
  1729  07F0                     l1103:
  1730  07F0  0878               	movf	___awdiv@quotient+1,w
  1731  07F1  00F1               	movwf	?___awdiv+1
  1732  07F2  0877               	movf	___awdiv@quotient,w
  1733  07F3  00F0               	movwf	?___awdiv
  1734  07F4                     l372:
  1735  07F4  0008               	return
  1736  07F5                     __end_of___awdiv:
  1737                           
  1738                           	psect	text9
  1739  052E                     __ptext9:	
  1740 ;; *************** function _handle_btn_pressing *****************
  1741 ;; Defined at:
  1742 ;;		line 55 in file "buttons.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  btn             1    wreg     enum E469
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  btn             1    2[COMMON] enum E469
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1756 ;;      Params:         0       0       0       0
  1757 ;;      Locals:         1       0       0       0
  1758 ;;      Temps:          2       0       0       0
  1759 ;;      Totals:         3       0       0       0
  1760 ;;Total ram usage:        3 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; Hardware stack levels required when called: 1
  1763 ;; This function calls:
  1764 ;;		_reset_stopwatch
  1765 ;;		_start_stopwatch
  1766 ;;		_stop_stopwatch
  1767 ;; This function is called by:
  1768 ;;		_main
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function _handle_btn_pressing
  1774  052E                     _handle_btn_pressing:
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _handle_btn_pressing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1778                           ;handle_btn_pressing@btn stored from wreg
  1779  052E  00F2               	movwf	handle_btn_pressing@btn
  1780  052F                     l1263:
  1781                           
  1782                           ;buttons.c: 55: void handle_btn_pressing(enum Button btn);buttons.c: 56: {;buttons.c: 57
      +                          :     switch(btn)
  1783  052F  2D36               	goto	l1273
  1784  0530                     l1265:
  1785                           
  1786                           ;buttons.c: 60:             reset_stopwatch();
  1787  0530  24F1               	fcall	_reset_stopwatch
  1788                           
  1789                           ;buttons.c: 61:             break;
  1790  0531  2D49               	goto	l77
  1791  0532                     l1267:
  1792                           
  1793                           ;buttons.c: 63:             stop_stopwatch();
  1794  0532  24E8               	fcall	_stop_stopwatch
  1795                           
  1796                           ;buttons.c: 64:             break;
  1797  0533  2D49               	goto	l77
  1798  0534                     l1269:
  1799                           
  1800                           ;buttons.c: 66:             start_stopwatch();
  1801  0534  24EC               	fcall	_start_stopwatch
  1802                           
  1803                           ;buttons.c: 67:             break;
  1804  0535  2D49               	goto	l77
  1805  0536                     l1273:
  1806  0536  0872               	movf	handle_btn_pressing@btn,w
  1807  0537  00F0               	movwf	??_handle_btn_pressing
  1808  0538  01F1               	clrf	??_handle_btn_pressing+1
  1809                           
  1810                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1811                           ; Switch size 1, requested type "simple"
  1812                           ; Number of cases is 1, Range of values is 0 to 0
  1813                           ; switch strategies available:
  1814                           ; Name         Instructions Cycles
  1815                           ; simple_byte            4     3 (average)
  1816                           ; direct_byte            7     6 (fixed)
  1817                           ; jumptable            260     6 (fixed)
  1818                           ;	Chosen strategy is simple_byte
  1819  0539  0871               	movf	??_handle_btn_pressing+1,w
  1820  053A  3A00               	xorlw	0	; case 0
  1821  053B  1903               	skipnz
  1822  053C  2D3E               	goto	l1335
  1823  053D  2D49               	goto	l77
  1824  053E                     l1335:
  1825                           
  1826                           ; Switch size 1, requested type "simple"
  1827                           ; Number of cases is 3, Range of values is 1 to 3
  1828                           ; switch strategies available:
  1829                           ; Name         Instructions Cycles
  1830                           ; simple_byte           10     6 (average)
  1831                           ; direct_byte           12     9 (fixed)
  1832                           ; jumptable            263     9 (fixed)
  1833                           ;	Chosen strategy is simple_byte
  1834  053E  0870               	movf	??_handle_btn_pressing,w
  1835  053F  3A01               	xorlw	1	; case 1
  1836  0540  1903               	skipnz
  1837  0541  2D30               	goto	l1265
  1838  0542  3A03               	xorlw	3	; case 2
  1839  0543  1903               	skipnz
  1840  0544  2D32               	goto	l1267
  1841  0545  3A01               	xorlw	1	; case 3
  1842  0546  1903               	skipnz
  1843  0547  2D34               	goto	l1269
  1844  0548  2D49               	goto	l77
  1845  0549                     l77:
  1846  0549  0008               	return
  1847  054A                     __end_of_handle_btn_pressing:
  1848                           
  1849                           	psect	text10
  1850  04E8                     __ptext10:	
  1851 ;; *************** function _stop_stopwatch *****************
  1852 ;; Defined at:
  1853 ;;		line 22 in file "stopwatch.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		status,2
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1867 ;;      Params:         0       0       0       0
  1868 ;;      Locals:         0       0       0       0
  1869 ;;      Temps:          0       0       0       0
  1870 ;;      Totals:         0       0       0       0
  1871 ;;Total ram usage:        0 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_handle_btn_pressing
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _stop_stopwatch
  1882  04E8                     _stop_stopwatch:
  1883  04E8                     l1197:	
  1884                           ;incstack = 0
  1885                           ; Regs used in _stop_stopwatch: [status,2]
  1886                           
  1887                           
  1888                           ;stopwatch.c: 24:     is_timer_work = 0;
  1889  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  1890  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  1891  04EA  01A5               	clrf	_is_timer_work
  1892  04EB                     l91:
  1893  04EB  0008               	return
  1894  04EC                     __end_of_stop_stopwatch:
  1895                           
  1896                           	psect	text11
  1897  04EC                     __ptext11:	
  1898 ;; *************** function _start_stopwatch *****************
  1899 ;; Defined at:
  1900 ;;		line 27 in file "stopwatch.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		None
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1914 ;;      Params:         0       0       0       0
  1915 ;;      Locals:         0       0       0       0
  1916 ;;      Temps:          0       0       0       0
  1917 ;;      Totals:         0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used: 1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_handle_btn_pressing
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function _start_stopwatch
  1929  04EC                     _start_stopwatch:
  1930  04EC                     l1199:	
  1931                           ;incstack = 0
  1932                           ; Regs used in _start_stopwatch: []
  1933                           
  1934                           
  1935                           ;stopwatch.c: 29:     is_timer_work = 1;
  1936  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1937  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1938  04EE  01A5               	clrf	_is_timer_work
  1939  04EF  0AA5               	incf	_is_timer_work,f
  1940  04F0                     l94:
  1941  04F0  0008               	return
  1942  04F1                     __end_of_start_stopwatch:
  1943                           
  1944                           	psect	text12
  1945  04F1                     __ptext12:	
  1946 ;; *************** function _reset_stopwatch *****************
  1947 ;; Defined at:
  1948 ;;		line 15 in file "stopwatch.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;		None
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;		None
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1962 ;;      Params:         0       0       0       0
  1963 ;;      Locals:         0       0       0       0
  1964 ;;      Temps:          0       0       0       0
  1965 ;;      Totals:         0       0       0       0
  1966 ;;Total ram usage:        0 bytes
  1967 ;; Hardware stack levels used: 1
  1968 ;; This function calls:
  1969 ;;		Nothing
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;;		_handle_btn_pressing
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           
  1977                           ;psect for function _reset_stopwatch
  1978  04F1                     _reset_stopwatch:
  1979  04F1                     l1193:	
  1980                           ;incstack = 0
  1981                           ; Regs used in _reset_stopwatch: [wreg+status,2]
  1982                           
  1983                           
  1984                           ;stopwatch.c: 17:     is_timer_work = 0;
  1985  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1986  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1987  04F3  01A5               	clrf	_is_timer_work
  1988                           
  1989                           ;stopwatch.c: 18:     time_ms = 0;
  1990  04F4  01A3               	clrf	_time_ms
  1991  04F5  01A4               	clrf	_time_ms+1
  1992  04F6                     l1195:
  1993                           
  1994                           ;stopwatch.c: 19:     PORTB = 0xC0;
  1995  04F6  30C0               	movlw	192
  1996  04F7  0086               	movwf	6	;volatile
  1997  04F8                     l88:
  1998  04F8  0008               	return
  1999  04F9                     __end_of_reset_stopwatch:
  2000                           
  2001                           	psect	text13
  2002  0594                     __ptext13:	
  2003 ;; *************** function _get_btn_pressed *****************
  2004 ;; Defined at:
  2005 ;;		line 42 in file "buttons.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  btn             1   10[COMMON] enum E469
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      enum E469
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2019 ;;      Params:         0       0       0       0
  2020 ;;      Locals:         1       0       0       0
  2021 ;;      Temps:          1       0       0       0
  2022 ;;      Totals:         2       0       0       0
  2023 ;;Total ram usage:        2 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 2
  2026 ;; This function calls:
  2027 ;;		_is_btn_bounce
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           
  2034                           ;psect for function _get_btn_pressed
  2035  0594                     _get_btn_pressed:
  2036  0594                     l975:	
  2037                           ;incstack = 0
  2038                           ; Regs used in _get_btn_pressed: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2039                           
  2040                           
  2041                           ;buttons.c: 44:     enum Button btn = NONE;
  2042  0594  01FA               	clrf	get_btn_pressed@btn
  2043  0595                     l977:
  2044                           
  2045                           ;buttons.c: 46:     if (PORTAbits.RA7 == 0 && !is_btn_bounce(RESET))
  2046  0595  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0596  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0597  1B85               	btfsc	5,7	;volatile
  2049  0598  2D9A               	goto	u381
  2050  0599  2D9B               	goto	u380
  2051  059A                     u381:
  2052  059A  2DA5               	goto	l63
  2053  059B                     u380:
  2054  059B                     l979:
  2055  059B  3001               	movlw	1
  2056  059C  2567               	fcall	_is_btn_bounce
  2057  059D  3A00               	xorlw	0
  2058  059E  1D03               	skipz
  2059  059F  2DA1               	goto	u391
  2060  05A0  2DA2               	goto	u390
  2061  05A1                     u391:
  2062  05A1  2DA5               	goto	l63
  2063  05A2                     u390:
  2064  05A2                     l981:
  2065                           
  2066                           ;buttons.c: 47:         btn = RESET;
  2067  05A2  01FA               	clrf	get_btn_pressed@btn
  2068  05A3  0AFA               	incf	get_btn_pressed@btn,f
  2069  05A4  2DC8               	goto	l64
  2070  05A5                     l63:	
  2071                           ;buttons.c: 48:     else if (PORTAbits.RA6 == 0 && !is_btn_bounce(STOP))
  2072                           
  2073  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  2074  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  2075  05A7  1B05               	btfsc	5,6	;volatile
  2076  05A8  2DAA               	goto	u401
  2077  05A9  2DAB               	goto	u400
  2078  05AA                     u401:
  2079  05AA  2DB7               	goto	l65
  2080  05AB                     u400:
  2081  05AB                     l983:
  2082  05AB  3002               	movlw	2
  2083  05AC  2567               	fcall	_is_btn_bounce
  2084  05AD  3A00               	xorlw	0
  2085  05AE  1D03               	skipz
  2086  05AF  2DB1               	goto	u411
  2087  05B0  2DB2               	goto	u410
  2088  05B1                     u411:
  2089  05B1  2DB7               	goto	l65
  2090  05B2                     u410:
  2091  05B2                     l985:
  2092                           
  2093                           ;buttons.c: 49:         btn = STOP;
  2094  05B2  3002               	movlw	2
  2095  05B3  00F9               	movwf	??_get_btn_pressed
  2096  05B4  0879               	movf	??_get_btn_pressed,w
  2097  05B5  00FA               	movwf	get_btn_pressed@btn
  2098  05B6  2DC8               	goto	l64
  2099  05B7                     l65:	
  2100                           ;buttons.c: 50:     else if (PORTAbits.RA5 == 0 && !is_btn_bounce(START))
  2101                           
  2102  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2103  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2104  05B9  1A85               	btfsc	5,5	;volatile
  2105  05BA  2DBC               	goto	u421
  2106  05BB  2DBD               	goto	u420
  2107  05BC                     u421:
  2108  05BC  2DC8               	goto	l64
  2109  05BD                     u420:
  2110  05BD                     l987:
  2111  05BD  3003               	movlw	3
  2112  05BE  2567               	fcall	_is_btn_bounce
  2113  05BF  3A00               	xorlw	0
  2114  05C0  1D03               	skipz
  2115  05C1  2DC3               	goto	u431
  2116  05C2  2DC4               	goto	u430
  2117  05C3                     u431:
  2118  05C3  2DC8               	goto	l64
  2119  05C4                     u430:
  2120  05C4                     l989:
  2121                           
  2122                           ;buttons.c: 51:         btn = START;
  2123  05C4  3003               	movlw	3
  2124  05C5  00F9               	movwf	??_get_btn_pressed
  2125  05C6  0879               	movf	??_get_btn_pressed,w
  2126  05C7  00FA               	movwf	get_btn_pressed@btn
  2127  05C8                     l64:
  2128                           
  2129                           ;buttons.c: 52:     return (btn);
  2130  05C8  087A               	movf	get_btn_pressed@btn,w
  2131  05C9                     l68:
  2132  05C9  0008               	return
  2133  05CA                     __end_of_get_btn_pressed:
  2134                           
  2135                           	psect	text14
  2136  0567                     __ptext14:	
  2137 ;; *************** function _is_btn_bounce *****************
  2138 ;; Defined at:
  2139 ;;		line 26 in file "buttons.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  btn             1    wreg     enum E469
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  btn             1    4[COMMON] enum E469
  2144 ;;  i               2    6[COMMON] int 
  2145 ;;  is_bounce       1    8[COMMON] _Bool 
  2146 ;;  mask            1    5[COMMON] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      _Bool 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2156 ;;      Params:         0       0       0       0
  2157 ;;      Locals:         5       0       0       0
  2158 ;;      Temps:          1       0       0       0
  2159 ;;      Totals:         6       0       0       0
  2160 ;;Total ram usage:        6 bytes
  2161 ;; Hardware stack levels used: 1
  2162 ;; Hardware stack levels required when called: 1
  2163 ;; This function calls:
  2164 ;;		_get_mask
  2165 ;; This function is called by:
  2166 ;;		_get_btn_pressed
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _is_btn_bounce
  2172  0567                     _is_btn_bounce:
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _is_btn_bounce: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2176                           ;is_btn_bounce@btn stored from wreg
  2177  0567  00F4               	movwf	is_btn_bounce@btn
  2178  0568                     l873:
  2179                           
  2180                           ;buttons.c: 26: static _Bool is_btn_bounce(enum Button btn);buttons.c: 27: {;buttons.c: 
      +                          28:     _Bool is_bounce = 0;
  2181  0568  01F8               	clrf	is_btn_bounce@is_bounce
  2182  0569                     l875:
  2183                           
  2184                           ;buttons.c: 29:     uint8_t mask = get_mask(btn);
  2185  0569  0874               	movf	is_btn_bounce@btn,w
  2186  056A  2512               	fcall	_get_mask
  2187  056B  00F3               	movwf	??_is_btn_bounce
  2188  056C  0873               	movf	??_is_btn_bounce,w
  2189  056D  00F5               	movwf	is_btn_bounce@mask
  2190  056E                     l877:
  2191                           
  2192                           ;buttons.c: 34:     for (int i = 0; i < 385; i++)
  2193  056E  01F6               	clrf	is_btn_bounce@i
  2194  056F  01F7               	clrf	is_btn_bounce@i+1
  2195  0570                     l883:
  2196                           
  2197                           ;buttons.c: 35:     {;buttons.c: 36:         if (!is_bounce && (PORTA & mask) != 0)
  2198  0570  0878               	movf	is_btn_bounce@is_bounce,w
  2199  0571  1D03               	btfss	3,2
  2200  0572  2D74               	goto	u351
  2201  0573  2D75               	goto	u350
  2202  0574                     u351:
  2203  0574  2D7F               	goto	l889
  2204  0575                     u350:
  2205  0575                     l885:
  2206  0575  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0576  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0577  0805               	movf	5,w	;volatile
  2209  0578  0575               	andwf	is_btn_bounce@mask,w
  2210  0579  1903               	btfsc	3,2
  2211  057A  2D7C               	goto	u361
  2212  057B  2D7D               	goto	u360
  2213  057C                     u361:
  2214  057C  2D7F               	goto	l889
  2215  057D                     u360:
  2216  057D                     l887:
  2217                           
  2218                           ;buttons.c: 37:             is_bounce = 1;
  2219  057D  01F8               	clrf	is_btn_bounce@is_bounce
  2220  057E  0AF8               	incf	is_btn_bounce@is_bounce,f
  2221  057F                     l889:
  2222                           
  2223                           ;buttons.c: 38:     }
  2224  057F  3001               	movlw	1
  2225  0580  07F6               	addwf	is_btn_bounce@i,f
  2226  0581  1803               	skipnc
  2227  0582  0AF7               	incf	is_btn_bounce@i+1,f
  2228  0583  3000               	movlw	0
  2229  0584  07F7               	addwf	is_btn_bounce@i+1,f
  2230  0585                     l891:
  2231  0585  0877               	movf	is_btn_bounce@i+1,w
  2232  0586  3A80               	xorlw	128
  2233  0587  00FF               	movwf	btemp+1
  2234  0588  3081               	movlw	129
  2235  0589  027F               	subwf	btemp+1,w
  2236  058A  1D03               	skipz
  2237  058B  2D8E               	goto	u375
  2238  058C  3081               	movlw	129
  2239  058D  0276               	subwf	is_btn_bounce@i,w
  2240  058E                     u375:
  2241  058E  1C03               	skipc
  2242  058F  2D91               	goto	u371
  2243  0590  2D92               	goto	u370
  2244  0591                     u371:
  2245  0591  2D70               	goto	l883
  2246  0592                     u370:
  2247  0592                     l893:
  2248                           
  2249                           ;buttons.c: 39:     return (is_bounce);
  2250  0592  0878               	movf	is_btn_bounce@is_bounce,w
  2251  0593                     l60:
  2252  0593  0008               	return
  2253  0594                     __end_of_is_btn_bounce:
  2254                           
  2255                           	psect	text15
  2256  0512                     __ptext15:	
  2257 ;; *************** function _get_mask *****************
  2258 ;; Defined at:
  2259 ;;		line 13 in file "buttons.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  btn             1    wreg     enum E469
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  btn             1    2[COMMON] enum E469
  2264 ;;  mask            1    1[COMMON] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      unsigned char 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2274 ;;      Params:         0       0       0       0
  2275 ;;      Locals:         2       0       0       0
  2276 ;;      Temps:          1       0       0       0
  2277 ;;      Totals:         3       0       0       0
  2278 ;;Total ram usage:        3 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_is_btn_bounce
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           
  2288                           ;psect for function _get_mask
  2289  0512                     _get_mask:
  2290                           
  2291                           ;incstack = 0
  2292                           ; Regs used in _get_mask: [wreg+status,2+status,0]
  2293                           ;get_mask@btn stored from wreg
  2294  0512  00F2               	movwf	get_mask@btn
  2295  0513                     l725:
  2296  0513                     l727:
  2297                           
  2298                           ;buttons.c: 17:     if (btn == RESET)
  2299  0513  0372               	decf	get_mask@btn,w
  2300  0514  1D03               	btfss	3,2
  2301  0515  2D17               	goto	u11
  2302  0516  2D18               	goto	u10
  2303  0517                     u11:
  2304  0517  2D1D               	goto	l731
  2305  0518                     u10:
  2306  0518                     l729:
  2307                           
  2308                           ;buttons.c: 18:         mask = 0b10000000;
  2309  0518  3080               	movlw	128
  2310  0519  00F0               	movwf	??_get_mask
  2311  051A  0870               	movf	??_get_mask,w
  2312  051B  00F1               	movwf	get_mask@mask
  2313  051C  2D2C               	goto	l51
  2314  051D                     l731:
  2315  051D  3002               	movlw	2
  2316  051E  0672               	xorwf	get_mask@btn,w
  2317  051F  1D03               	btfss	3,2
  2318  0520  2D22               	goto	u21
  2319  0521  2D23               	goto	u20
  2320  0522                     u21:
  2321  0522  2D28               	goto	l735
  2322  0523                     u20:
  2323  0523                     l733:
  2324                           
  2325                           ;buttons.c: 20:         mask = 0b01000000;
  2326  0523  3040               	movlw	64
  2327  0524  00F0               	movwf	??_get_mask
  2328  0525  0870               	movf	??_get_mask,w
  2329  0526  00F1               	movwf	get_mask@mask
  2330  0527  2D2C               	goto	l51
  2331  0528                     l735:
  2332                           
  2333                           ;buttons.c: 22:         mask = 0b00100000;
  2334  0528  3020               	movlw	32
  2335  0529  00F0               	movwf	??_get_mask
  2336  052A  0870               	movf	??_get_mask,w
  2337  052B  00F1               	movwf	get_mask@mask
  2338  052C                     l51:
  2339                           
  2340                           ;buttons.c: 23:     return (mask);
  2341  052C  0871               	movf	get_mask@mask,w
  2342  052D                     l54:
  2343  052D  0008               	return
  2344  052E                     __end_of_get_mask:
  2345                           
  2346                           	psect	text16
  2347  0501                     __ptext16:	
  2348 ;; *************** function _configure *****************
  2349 ;; Defined at:
  2350 ;;		line 18 in file "main.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;                  1    wreg      void 
  2357 ;; Registers used:
  2358 ;;		wreg, status,2, status,0
  2359 ;; Tracked objects:
  2360 ;;		On entry : 0/0
  2361 ;;		On exit  : 0/0
  2362 ;;		Unchanged: 0/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2364 ;;      Params:         0       0       0       0
  2365 ;;      Locals:         0       0       0       0
  2366 ;;      Temps:          1       0       0       0
  2367 ;;      Totals:         1       0       0       0
  2368 ;;Total ram usage:        1 bytes
  2369 ;; Hardware stack levels used: 1
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_main
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           
  2378                           ;psect for function _configure
  2379  0501                     _configure:
  2380  0501                     l933:	
  2381                           ;incstack = 0
  2382                           ; Regs used in _configure: [wreg+status,2+status,0]
  2383                           
  2384                           
  2385                           ;main.c: 20: 
  2386  0501  178B               	bsf	11,7	;volatile
  2387  0502                     l935:
  2388                           
  2389                           ;main.c: 22:     {
  2390  0502  3007               	movlw	7
  2391  0503  1283               	bcf	3,5	;RP0=0, select bank0
  2392  0504  1303               	bcf	3,6	;RP1=0, select bank0
  2393  0505  009F               	movwf	31	;volatile
  2394                           
  2395                           ;main.c: 24:         handle_btn_pressing(get_btn_pressed());
  2396  0506  30E0               	movlw	224
  2397  0507  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0508  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0509  0085               	movwf	5	;volatile
  2400  050A                     l937:
  2401                           
  2402                           ;main.c: 25:         update_time_counter();
  2403  050A  0186               	clrf	6	;volatile
  2404  050B                     l939:
  2405                           
  2406                           ;main.c: 27:     return ;
  2407  050B  1281               	bcf	1,5	;volatile
  2408  050C                     l941:
  2409                           
  2410                           ;main.c: 28: }
  2411  050C  1181               	bcf	1,3	;volatile
  2412  050D                     l943:
  2413  050D  3007               	movlw	7
  2414  050E  00F0               	movwf	??_configure
  2415  050F  0870               	movf	??_configure,w
  2416  0510  0481               	iorwf	1,f	;volatile
  2417  0511                     l27:
  2418  0511  0008               	return
  2419  0512                     __end_of_configure:
  2420  007E                     btemp	set	126	;btemp
  2421  007E                     wtemp0	set	126
  2422                           
  2423                           	psect	config
  2424                           
  2425                           ;Config register CONFIG @ 0x2007
  2426                           ;	Oscillator Selection bits
  2427                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  2428                           ;	Watchdog Timer Enable bit
  2429                           ;	WDTE = OFF, WDT disabled
  2430                           ;	Power-up Timer Enable bit
  2431                           ;	PWRTE = OFF, PWRT disabled
  2432                           ;	RA5/MCLR/VPP Pin Function Select bit
  2433                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  2434                           ;	Brown-out Detect Enable bit
  2435                           ;	BOREN = OFF, BOD disabled
  2436                           ;	Low-Voltage Programming Enable bit
  2437                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  2438                           ;	Data EE Memory Code Protection bit
  2439                           ;	CPD = OFF, Data memory code protection off
  2440                           ;	Flash Program Memory Code Protection bit
  2441                           ;	CP = OFF, Code protection off
  2442  2007                     	org	8199
  2443  2007  3F18               	dw	16152

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      5      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _format_time->___lwmod
    ___lwmod->___lwdiv
    _get_btn_pressed->_is_btn_bounce
    _is_btn_bounce->_get_mask

Critical Paths under _main in BANK0

    _main->_update_disp
    _update_disp->_format_time

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2068
                          _configure
                    _get_btn_pressed
                _handle_btn_pressing
                    _reset_stopwatch
                        _update_disp
                _update_time_counter
 ---------------------------------------------------------------------------------
 (1) _update_time_counter                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_disp                                          1     1      0    1896
                                              4 BANK0      1     1      0
                        _format_time
               _set_disp_digit_value
 ---------------------------------------------------------------------------------
 (2) _set_disp_digit_value                                 3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _format_time                                          4     4      0    1874
                                              0 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     463
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     466
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _handle_btn_pressing                                  3     3      0      22
                                              0 COMMON     3     3      0
                    _reset_stopwatch
                    _start_stopwatch
                     _stop_stopwatch
 ---------------------------------------------------------------------------------
 (2) _stop_stopwatch                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _start_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset_stopwatch                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_btn_pressed                                      2     2      0     150
                                              9 COMMON     2     2      0
                      _is_btn_bounce
 ---------------------------------------------------------------------------------
 (2) _is_btn_bounce                                        6     6      0     135
                                              3 COMMON     6     6      0
                           _get_mask
 ---------------------------------------------------------------------------------
 (3) _get_mask                                             3     3      0      45
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _configure                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure
   _get_btn_pressed
     _is_btn_bounce
       _get_mask
   _handle_btn_pressing
     _reset_stopwatch
     _start_stopwatch
     _stop_stopwatch
   _reset_stopwatch
   _update_disp
     _format_time
       ___awdiv
       ___awmod
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _set_disp_digit_value
   _update_time_counter

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      5       C       3       15.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      1A      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Sep  7 00:05:56 2021

                  _update_disp 05CA                             l27 0511                             l51 052C  
                           l60 0593                             l54 052D                             l63 05A5  
                           l64 05C8                             l65 05B7                             l91 04EB  
                           l68 05C9                             l77 0549                             l94 04F0  
                           l88 04F8                             l97 06D7                             u10 0518  
                           u11 0517                             u20 0523                             u21 0522  
                 ___awdiv@sign 0076                            l101 0560                            l102 0566  
                          l130 078D                            l133 0602                            l501 063C  
                          l372 07F4                            l385 0730                            l731 051D  
                          l491 0680                            l733 0523                            l725 0513  
                          l735 0528                            l727 0513                            l729 0518  
                          l941 050C                            l933 0501                            l943 050D  
                          l935 0502                            l937 050A                            l873 0568  
                          l939 050B                            l891 0585                            l883 0570  
                          l875 0569                            l893 0592                            l885 0575  
                          l877 056E                            l981 05A2                            l887 057D  
                          l983 05AB                            l975 0594                            l889 057F  
                          l985 05B2                            l977 0595                            l987 05BD  
                          l979 059B                            l989 05C4                            u400 05AB  
                          u401 05AA                            u410 05B2                            u411 05B1  
                          u420 05BD                            u500 07C1                            u421 05BC  
                          u501 07C0                            u350 0575                            u430 05C4  
                          u351 0574                            u431 05C3                            u360 057D  
                          u520 07D2                            u600 0705                            u361 057C  
                          u521 07D1                            u601 0704                            u370 0592  
                          u610 070F                            u371 0591                            u515 07C2  
                          u611 070E                            u380 059B                            u540 07E6  
                          u460 0793                            u381 059A                            u541 07E5  
                          u525 07CE                            u461 0792                            u390 05A2  
                          u550 07EB                            u470 079E                            u630 0722  
                          u710 067C                            u375 058E                            u391 05A1  
                          u551 07EA                            u535 07DA                            u471 079D  
                          u631 0721                            u615 070B                            u711 067B  
                          u480 07AF                            u640 0727                            u560 06DD  
                          u720 0609                            u481 07AE                            u641 0726  
                          u625 0716                            u561 06DC                            u705 0670  
                          u721 0608                            u570 06E8                            u650 0645  
                          u571 06E7                            u651 0644                            u580 06F3  
                          u740 061B                            u581 06F2                            u741 061A  
                          u670 0657                            u750 0625                            u495 07B3  
                          u671 0656                            u751 0624                            u735 060D  
                          u807 05D6                            u665 0649                            u817 05E8  
                          u690 0668                            u770 0638                            u595 06F7  
                          u691 0667                            u771 0637                            u755 0621  
                          u827 05FA                            u780 0551                            u685 0658  
                          u765 062C                            u781 0550                            u790 055A  
                          u695 0664                            u791 0559                    get_mask@btn 0072  
         ?_handle_btn_pressing 0070          ??_update_time_counter 0070                   ___awmod@sign 0076  
                         l1101 07EB                           l1103 07F0                           l1111 06DD  
                         l1121 06F3                           l1113 06E2                           l1201 0681  
                         l1131 070F                           l1123 06F6                           l1115 06E4  
                         l1107 06D8                           l1211 0742                           l1203 0732  
                         l1141 072C                           l1133 0715                           l1125 06FD  
                         l1117 06E8                           l1109 06D9                           l1221 075B  
                         l1213 0747                           l1205 0733                           l1071 079A  
                         l1063 078E                           l1135 071C                           l1127 0701  
                         l1119 06ED                           l1151 0648                           l1223 0760  
                         l1215 074C                           l1207 0738                           l1081 07AF  
                         l1073 079E                           l1065 078F                           l1129 0705  
                         l1137 0722                           l1161 066E                           l1153 064F  
                         l1145 063D                           l1217 0751                           l1209 073D  
                         l1241 05DB                           l1233 05CA                           l1091 07D2  
                         l1083 07B2                           l1075 07A3                           l1067 0793  
                         l1139 0727                           l1163 066F                           l1155 0653  
                         l1147 063F                           l1171 0603                           l1219 0756  
                         l1227 0765                           l1251 05ED                           l1243 05DE  
                         l1235 05CB                           l1093 07D8                           l1085 07B9  
                         l1077 07A7                           l1069 0798                           l1165 0676  
                         l1157 0657                           l1149 0645                           l1181 061B  
                         l1173 0609                           l1333 076D                           l1261 05FF  
                         l1253 05F0                           l1245 05E0                           l1237 05CF  
                         l1335 053E                           l1263 052F                           l1095 07D9  
                         l1087 07BD                           l1079 07A9                           l1159 0668  
                         l1167 067C                           l1183 0625                           l1175 060C  
                         l1255 05F1                           l1247 05E3                           l1239 05D2  
                         l1193 04F1                           l1265 0530                           l1273 0536  
                         l1097 07E0                           l1089 07C1                           l1185 062B  
                         l1177 0613                           l1257 05F3                           l1249 05E4  
                         l1281 0551                           l1195 04F6                           l1267 0532  
                         l1099 07E6                           l1187 0632                           l1179 0617  
                         l1259 05F6                           l1283 055A                           l1291 04FE  
                         l1197 04E8                           l1269 0534                           l1189 0638  
                         l1285 04F9                           l1199 04EC                           l1279 054A  
                         l1287 04FB                           l1289 04FC                   get_mask@mask 0071  
                         _main 04F9                           btemp 007E                           start 0000  
      __end_of_reset_stopwatch 04F9                   ?_format_time 0070       __size_of_start_stopwatch 0005  
                        ?_main 0070                __end_of___awdiv 07F5                __end_of___awmod 0731  
                        _CMCON 001F                ___awdiv@divisor 0070                __end_of___lwdiv 0681  
        ??_handle_btn_pressing 0070                __end_of___lwmod 063D                ___awdiv@counter 0075  
                        _PORTA 0005                          _PORTB 0006                          _TRISA 0085  
                        _TRISB 0086      set_disp_digit_value@value 0072                          status 0003  
                        wtemp0 007E                __initialization 07F5                   __end_of_main 0501  
       __size_of_is_btn_bounce 002D                         ??_main 007E               ___awdiv@dividend 0072  
       handle_btn_pressing@btn 0072                         _Button 0026               __end_of_get_mask 052E  
             ?_reset_stopwatch 0070                      ??___awdiv 0074                      ??___awmod 0074  
                    ??___lwdiv 0074                      ??___lwmod 007C               ___awdiv@quotient 0077  
              ___awmod@divisor 0070                ___awmod@counter 0075              ??_start_stopwatch 0070  
                _is_btn_bounce 0567        __end_of__initialization 07FE       __size_of_get_btn_pressed 0036  
                 ?_update_disp 0070                 __pcstackCOMMON 0070        format_time@cashed_value 002A  
         __size_of_format_time 0057                 _OPTION_REGbits 0081                 ?_is_btn_bounce 0070  
           __size_of_configure 0011                     __pbssBANK0 0020                     __pmaintext 04F9  
__size_of_set_disp_digit_value 005D    __end_of_update_time_counter 0567                  _is_timer_work 0025  
                    ?_get_mask 0070        __size_of_stop_stopwatch 0004              ??_get_btn_pressed 0079  
            __end_of_configure 0512                        ___awdiv 078E                        ___awmod 06D8  
  __end_of_handle_btn_pressing 054A                        ___lwdiv 063D                        ___lwmod 0603  
                      __ptext1 054A                        __ptext2 05CA                        __ptext3 0731  
                      __ptext4 0681                        __ptext5 0603                        __ptext6 063D  
                      __ptext7 06D8                        __ptext8 078E                        __ptext9 052E  
             ___awmod@dividend 0072                ??_is_btn_bounce 0073                        _time_ms 0023  
                   ??_get_mask 0070           end_of_initialization 07FE           __size_of_update_disp 0039  
              _start_stopwatch 04EC                      _PORTAbits 0005                      _PORTBbits 0006  
               is_btn_bounce@i 0076                 _formatted_time 0020       __size_of_reset_stopwatch 0008  
          start_initialization 07F5                 _stop_stopwatch 04E8        __end_of_start_stopwatch 04F1  
                ??_format_time 0027   __end_of_set_disp_digit_value 078E                      ___latbits 0000  
                __pcstackBANK0 0027         __end_of_stop_stopwatch 04EC                _get_btn_pressed 0594  
            __size_of_get_mask 001C               ___lwdiv@dividend 0072                       ?___awdiv 0070  
                     ?___awmod 0070                       ?___lwdiv 0070                       ?___lwmod 0078  
                    _configure 0501            __end_of_format_time 06D8   __size_of_update_time_counter 001D  
             ___lwdiv@quotient 0075                ?_stop_stopwatch 0070              ??_reset_stopwatch 0070  
             ?_start_stopwatch 0070                     ?_configure 0070   __size_of_handle_btn_pressing 001C  
      __end_of_get_btn_pressed 05CA          __end_of_is_btn_bounce 0594                  ??_update_disp 002B  
         _set_disp_digit_value 0731               __size_of___awdiv 0067               __size_of___awmod 0059  
                  _format_time 0681               __size_of___lwdiv 0044               __size_of___lwmod 003A  
              ___lwdiv@divisor 0070                ___lwdiv@counter 0077                       __ptext10 04E8  
                     __ptext11 04EC                       __ptext12 04F1                       __ptext13 0594  
                     __ptext14 0567                       __ptext15 0512                       __ptext16 0501  
                     _get_mask 0512                  __size_of_main 0008          ?_set_disp_digit_value 0070  
                  ??_configure 0070            __end_of_update_disp 0603                     _INTCONbits 000B  
             ?_get_btn_pressed 0070               ___lwmod@dividend 007A            _update_time_counter 054A  
       is_btn_bounce@is_bounce 0078                _reset_stopwatch 04F1                     _OPTION_REG 0081  
              ___lwmod@divisor 0078               ??_stop_stopwatch 0070                ___lwmod@counter 007D  
         ?_update_time_counter 0070             get_btn_pressed@btn 007A         ??_set_disp_digit_value 0070  
          _handle_btn_pressing 052E              is_btn_bounce@mask 0075               is_btn_bounce@btn 0074  
